<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爱丽丝梦游仙境</title>
  
  <subtitle>All under the ground.</subtitle>
  <link href="https://alic3-myth.github.io/atom.xml" rel="self"/>
  
  <link href="https://alic3-myth.github.io/"/>
  <updated>2024-09-22T16:04:06.609Z</updated>
  <id>https://alic3-myth.github.io/</id>
  
  <author>
    <name>A1ic3</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LFSR</title>
    <link href="https://alic3-myth.github.io/project/LFSR/"/>
    <id>https://alic3-myth.github.io/project/LFSR/</id>
    <published>2024-09-22T09:50:06.000Z</published>
    <updated>2024-09-22T16:04:06.609Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="lfsr简介"><a class="markdownIt-Anchor" href="#lfsr简介"></a> LFSR简介：</h2><p><strong>线性反馈移位寄存器</strong>（Linear feedback shift register，LFSR）是指给定前一状态的输出，将该输出的线性函数再用作输入的移位寄存器。线性反馈移位寄存器(LFSR)归属于移位寄存器(FSR)，除此之外还有非线性移位寄存器（NFSR）。</p><p><code>GF(2)</code>上一个 <code>n</code> 级反馈移位寄存器由 <code>n</code> 个二元存储器与一个反馈函数 <code>f(a1,a2,⋯,an)</code>组成，如下图所示：</p><p><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/FSR.png" alt="FSR" / loading="lazy"></p><p>如果此处的反馈函数是<strong>线性</strong>的，我们就把它称为LFSR，此时该反馈函数可以表示为</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mtext> </mtext><mo>=</mo><mtext> </mtext><msub><mi>c</mi><mi>n</mi></msub><msub><mi>a</mi><mn>1</mn></msub><mo>⊕</mo><msub><mi>c</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><msub><mi>a</mi><mn>2</mn></msub><mo>⊕</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>c</mi><mn>1</mn></msub><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">f(a_1,a_2,...,a_n)\ =\ c_na_1⊕c_{n-1}a_2⊕...c_1a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.791661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>其中c<sub>i</sub> = 0 或 1，⊕表示异或</p><p>接下来，通过一个例子来更直观的确定LFSR的概念，假设给定一个<strong>5级</strong>的LFSR，其初始状态(即a<sub>1</sub>到a<sub>5</sub>各个寄存器的初始值)为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>3</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>4</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>5</mn></msub><mo stretchy="false">)</mo><mtext> </mtext><mo>=</mo><mtext> </mtext><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(a_1,a_2,a_3,a_4,a_5)\ =\ (1,0,0,1,1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>其反馈函数为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>3</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>4</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>5</mn></msub><mo stretchy="false">)</mo><mtext> </mtext><mo>=</mo><mtext> </mtext><msub><mi>a</mi><mn>4</mn></msub><mo>⊕</mo><msub><mi>a</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">f(a_1,a_2,a_3,a_4,a_5)\ =\ a_4⊕a_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>整个过程可以表示为下图所示形式：<br /><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/LFSR.png" alt="LFSR" / loading="lazy"></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>L</mi><mi>F</mi><mi>S</mi><mi>R</mi><mtext>的输出序列</mtext><mo stretchy="false">{</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy="false">}</mo><mtext>满足</mtext><mrow><mo fence="true">{</mo><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>a</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>c</mi><mn>1</mn></msub><msub><mi>a</mi><mi>n</mi></msub><mo>⊕</mo><msub><mi>c</mi><mn>2</mn></msub><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>⊕</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>⊕</mo><msub><mi>c</mi><mi>n</mi></msub><msub><mi>a</mi><mn>1</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>a</mi><mrow><mi>n</mi><mo>+</mo><mn>2</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>c</mi><mn>1</mn></msub><msub><mi>a</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>⊕</mo><msub><mi>c</mi><mn>2</mn></msub><msub><mi>a</mi><mi>n</mi></msub><mo>⊕</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>⊕</mo><msub><mi>c</mi><mi>n</mi></msub><msub><mi>a</mi><mn>2</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi mathvariant="normal">.</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi mathvariant="normal">.</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi mathvariant="normal">.</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>a</mi><mrow><mi>n</mi><mo>+</mo><mi>i</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>c</mi><mn>1</mn></msub><msub><mi>a</mi><mrow><mi>n</mi><mo>+</mo><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>⊕</mo><msub><mi>c</mi><mn>2</mn></msub><msub><mi>a</mi><mrow><mi>n</mi><mo>+</mo><mi>i</mi><mo>−</mo><mn>2</mn></mrow></msub><mo>⊕</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>⊕</mo><msub><mi>c</mi><mi>n</mi></msub><msub><mi>a</mi><mi>i</mi></msub></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">LFSR的输出序列\{a_n\}满足\left\{\begin{aligned}a_{n+1}&amp; =c_1a_n⊕c_2a_{n-1}⊕...⊕c_na_1\\a_{n+2}&amp; =c_1a_{n+1}⊕c_2a_{n}⊕...⊕c_na_2\\.\\.\\.\\a_{n+i}&amp; =c_1a_{n+i-1}⊕c_2a_{n+i-2}⊕...⊕c_na_i\end{aligned}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:9.00004em;vertical-align:-4.250019999999999em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">输</span><span class="mord cjk_fallback">出</span><span class="mord cjk_fallback">序</span><span class="mord cjk_fallback">列</span><span class="mopen">{</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span><span class="mord cjk_fallback">满</span><span class="mord cjk_fallback">足</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.750020000000001em;"><span style="top:0.20000999999999935em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:0.20500999999999925em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.08999000000000068em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.3849900000000006em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.6799900000000005em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.9749900000000005em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.2699900000000006em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.5649900000000008em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.859990000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.154990000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.204990000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.150010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.295010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.590010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.885010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.180010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.475010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.770010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.065010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.360010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.655010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.705010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-7.00002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.250019999999999em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.750000000000001em;"><span style="top:-6.910000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.9099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span></span></span><span style="top:-2.4099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span></span></span><span style="top:-0.9099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span></span></span><span style="top:0.5900000000000007em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.250000000000001em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.750000000000001em;"><span style="top:-6.910000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:0.5900000000000016em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.250000000000002em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>接下来，我们来计算该LFSR的输出序列，输出序列的<strong>前5位</strong>即为我们的初始状态<strong>10011</strong>，<strong>第6位</strong>的计算过程如下，</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>a</mi><mn>6</mn></msub><mtext> </mtext><mo>=</mo><mtext> </mtext><msub><mi>a</mi><mn>4</mn></msub><mo>⊕</mo><msub><mi>a</mi><mn>1</mn></msub><mtext> </mtext><mo>=</mo><mtext> </mtext><mn>1</mn><mo>⊕</mo><mn>1</mn><mtext> </mtext><mo>=</mo><mtext> </mtext><mn>0</mn></mrow><annotation encoding="application/x-tex">a_6\ =\ a_4⊕a_1\ =\ 1⊕1\ =\ 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p><p><strong>第7位</strong>的计算过程如下:</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>a</mi><mn>7</mn></msub><mtext> </mtext><mo>=</mo><mtext> </mtext><msub><mi>a</mi><mn>5</mn></msub><mo>⊕</mo><msub><mi>a</mi><mn>2</mn></msub><mtext> </mtext><mo>=</mo><mtext> </mtext><mn>1</mn><mo>⊕</mo><mn>0</mn><mtext> </mtext><mo>=</mo><mtext> </mtext><mn>1</mn></mrow><annotation encoding="application/x-tex">a_7\ =\ a_5⊕a_2\ =\ 1⊕0\ =\ 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p><p>由此类推，可以得到<strong>前31位</strong>的计算结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1001101001000010101110110001111</span></span><br></pre></td></tr></table></figure><p>对于一个n级的LFSR来讲，其<strong>最大周期</strong>为2^n-1，因此对于我们上面的5级LFSR来讲，其<strong>最大周期</strong>为 2<sup>5</sup>-1=31，再后面的输出序列即为前31位的循环。</p><p>对于一个<code>LFSR</code>来讲，目前主要关心三个部分：<strong>初始状态</strong>、<strong>反馈函数</strong>和<strong>输出序列</strong>，那么对于CTF中考察LFSR的题目来讲也是如此，<strong>大多数情况下</strong>，我们在CTF中的考察方式都可以概括为：给出<strong>反馈函数</strong>和<strong>输出序列</strong>，要求我们反推出<strong>初始状态</strong>，<strong>初始状态</strong>即为我们需要的<strong>flag</strong>，另外大多数情况下，<strong>初始状态</strong>的长度我们也是已知的。</p><h2 id="例题"><a class="markdownIt-Anchor" href="#例题"></a> 例题：</h2><h3 id="2018-ciscn-线上赛-oldstreamgame"><a class="markdownIt-Anchor" href="#2018-ciscn-线上赛-oldstreamgame"></a> 2018 CISCN 线上赛 oldstreamgame</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="string">&quot;flag&#123;xxxxxxxxxxxxxxxx&#125;&quot;</span></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">&quot;flag&#123;&quot;</span>)</span><br><span class="line"><span class="keyword">assert</span> flag.endswith(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag)==<span class="number">14</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr</span>(<span class="params">R,mask</span>):</span><br><span class="line">    output = (R &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    i=(R&amp;mask)&amp;<span class="number">0xffffffff</span></span><br><span class="line">    lastbit=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i!=<span class="number">0</span>:</span><br><span class="line">        lastbit^=(i&amp;<span class="number">1</span>)</span><br><span class="line">        i=i&gt;&gt;<span class="number">1</span></span><br><span class="line">    output^=lastbit </span><br><span class="line">    <span class="keyword">return</span> (output,lastbit)</span><br><span class="line"></span><br><span class="line">R=<span class="built_in">int</span>(flag[<span class="number">5</span>:-<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">mask = <span class="number">0b10100100000010000000100010010100</span></span><br><span class="line"></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;w&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    tmp=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        (R,out)=lfsr(R,mask)</span><br><span class="line">        tmp=(tmp &lt;&lt; <span class="number">1</span>)^out</span><br><span class="line">    f.write(<span class="built_in">chr</span>(tmp))</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>我们先分析一下已知条件：</p><blockquote><p>已知初始状态的长度为4个十六进制数，即32位</p><p>已知反馈函数的代码形式，我们要提取出它的数学表达式</p><p>已知输出序列</p></blockquote><p>那么我们的任务很明确，就是通过分析<code>lfsr</code>函数，整理成数学表达式的形式求解即可</p><p>接着我们就来逐行分析此函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr</span>(<span class="params">R,mask</span>):</span><br><span class="line"><span class="comment">#接收两个参数，R是32位的初始状态(即flag)，mask是32位的掩码，由于mask已知，所以我们就直接把它当作常数</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">output = (R&lt;&lt;<span class="number">1</span>) &amp; <span class="number">0xffffffff</span></span><br><span class="line"><span class="comment">#把R左移一位后低32位(即去除R的最高位，然后在R的最低位补0)的值赋给output</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i = (R &amp; mask) &amp; <span class="number">0xffffffff</span></span><br><span class="line"><span class="comment">#把传入的R和mask做按位与运算，运算结果取低32位，将该值赋给i变量</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lastbit = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i != <span class="number">0</span>:</span><br><span class="line">    lastbit ^= (i&amp;<span class="number">1</span>)</span><br><span class="line">    i = i&gt;&gt;<span class="number">1</span></span><br><span class="line"><span class="comment">#从i的最低位向i的最高位依次做异或运算，将运算结果赋给lastbit变量</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">output ^= lastbit</span><br><span class="line"><span class="comment">#将output变量的最后一位设置成lastbit变量的值</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (output,lastbit)</span><br><span class="line"><span class="comment">#返回output变量和lastbit变量的值，output即经过一轮lfsr之后的新序列，lastbit即经过一轮lfsr之后输出的一位</span></span><br></pre></td></tr></table></figure><p>经过以上分析，我们发现<code>lfsr</code>函数本质上就是一个<strong>输入R,输出lastbit的函数</strong></p><p>虽然我们已经清楚了<strong>R</strong>是如何经过一系列运算得到<strong>lastbit</strong>，但我们前面的反馈函数都是<strong>数学公式</strong>的形式，</p><p>我们怎么把他整理成一个表达式的形式呢？</p><blockquote><p><strong>mask</strong>只有第3、5、8、12、20、27、30、32这几位为1，其余位均为0。</p><p><strong>mask</strong>与R做按位与运算得到<strong>i</strong>，当且仅当R的第3、5、8、12、20、27、30、32这几位中也出现1时，<strong>i</strong>中才可能出现1，否则<strong>i</strong>中将全为0。</p><p><strong>lastbit</strong>是由<strong>i</strong>的最低位向<strong>i</strong>的最高位依次做异或运算得到的，在这个过程中，所有为0的位我们可以忽略不计（因为0异或任何数等于任何数本身，不影响最后运算结果），</p><p>因此lastbit的值仅取决于<strong>i</strong>中有多少个1：当<strong>i</strong>中有奇数个1时，lastbit等于1；当<strong>i</strong>中有偶数个1时，lastbit等于0。 当R的第3、5、8、12、20、27、30、32这几位依次异或结果为1时，即R中有奇数个1，因此将导致<strong>i</strong>中有奇数个1；当R的第3、5、8、12、20、27、30、32这几位依次异或结果为0时，即R中有偶数个1，因此将导致<strong>i</strong>中有偶数个1。</p><p>因此我们可以建立出联系：<strong>lastbit等于R的第3、5、8、12、20、27、30、32这几位依次异或的结果。</strong></p></blockquote><p>将其写成数学表达式的形式：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>l</mi><mi>a</mi><mi>s</mi><mi>t</mi><mi>b</mi><mi>i</mi><mi>t</mi><mtext> </mtext><mo>=</mo><mtext> </mtext><msub><mi>R</mi><mn>3</mn></msub><mo>⊕</mo><msub><mi>R</mi><mn>5</mn></msub><mo>⊕</mo><msub><mi>R</mi><mn>8</mn></msub><mo>⊕</mo><msub><mi>R</mi><mn>12</mn></msub><mo>⊕</mo><msub><mi>R</mi><mn>20</mn></msub><mo>⊕</mo><msub><mi>R</mi><mn>27</mn></msub><mo>⊕</mo><msub><mi>R</mi><mn>30</mn></msub><mo>⊕</mo><msub><mi>R</mi><mn>32</mn></msub></mrow><annotation encoding="application/x-tex">lastbit\ =\ R_3⊕R_5⊕R_8⊕R_{12}⊕R_{20}⊕R_{27}⊕R_{30}⊕R_{32}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal">b</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>显然，lastbit和R之间满足线性关系，那么接下来我们就可以开始求解了</p><p>我们想象：当即将输出第32位lastbit时，此时R已经左移了31位，根据上面的数学表达式，可以有</p><p><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/t0100384766078bfda8.png" alt="t0100384766078bfda8" / loading="lazy"></p><p>我们可以求出R的第1位，同样的方法，我们可以求出R的第2位：</p><p><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/t01ef3d957b4726b14c.png" alt="t01ef3d957b4726b14c" / loading="lazy"></p><p>以此类推，R的全部32位我们都可以依次求出了，代码形式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mask = <span class="string">&#x27;10100100000010000000100010010100&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;00100000111111011110111011111000&#x27;</span></span><br><span class="line"></span><br><span class="line">tmp=key</span><br><span class="line"></span><br><span class="line">R = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    output = <span class="string">&#x27;?&#x27;</span> + key[:<span class="number">31</span>]</span><br><span class="line">    ans = <span class="built_in">int</span>(key2[-<span class="number">1</span>-i])^<span class="built_in">int</span>(output[-<span class="number">3</span>])^<span class="built_in">int</span>(output[-<span class="number">5</span>])^<span class="built_in">int</span>(output[-<span class="number">8</span>])^<span class="built_in">int</span>(output[-<span class="number">12</span>])^<span class="built_in">int</span>(output[-<span class="number">20</span>])^<span class="built_in">int</span>(output[-<span class="number">27</span>])^<span class="built_in">int</span>(output[-<span class="number">30</span>])</span><br><span class="line">    R += <span class="built_in">str</span>(ans)</span><br><span class="line">    key = <span class="built_in">str</span>(ans) + key[:<span class="number">31</span>]</span><br><span class="line"></span><br><span class="line">R = <span class="built_in">format</span>(<span class="built_in">int</span>(R[::-<span class="number">1</span>],<span class="number">2</span>),<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">flag = <span class="string">&quot;flag&#123;&quot;</span> + R + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>如下题目的分析方法同上：</p><blockquote><p>2018 强网杯 线上赛 streamgame1</p><p>2018 强网杯 线上赛 streamgame2</p><p>2018 强网杯 线上赛 streamgame4</p><p>2018 HITB-XCTF 线上赛 streamgamex</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="crypto" scheme="https://alic3-myth.github.io/categories/crypto/"/>
    
    
    <category term="crypto" scheme="https://alic3-myth.github.io/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>ECC&#39;s smart attack</title>
    <link href="https://alic3-myth.github.io/project/ECC&#39;s%20smart%20attack/"/>
    <id>https://alic3-myth.github.io/project/ECC&#39;s%20smart%20attack/</id>
    <published>2024-09-21T07:52:06.000Z</published>
    <updated>2024-09-22T16:03:54.843Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ecc-smart-attack-推导"><a class="markdownIt-Anchor" href="#ecc-smart-attack-推导"></a> ECC smart attack 推导</h1><p>考查ECC中的一类特殊攻击——<strong>smart attack</strong>，当椭圆曲线的阶等于<strong>p</strong>时，即</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mi mathvariant="normal">.</mi><mi>o</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mtext> </mtext><mo>=</mo><mtext> </mtext><mi>P</mi></mrow><annotation encoding="application/x-tex">E.order()\ =\ P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">.</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mclose">)</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></span></p><p>椭圆曲线上的所有非零点可以构成一个循环群，简而言之，椭圆曲线上的所有点都是生成元。</p><h2 id="例题"><a class="markdownIt-Anchor" href="#例题"></a> 例题：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = <span class="number">11093300438765357787693823122068501933326829181518693650897090781749379503427651954028543076247583697669597230934286751428880673539155279232304301123931419</span></span><br><span class="line">A = <span class="number">490963434153515882934487973185142842357175523008183292296815140698999054658777820556076794490414610737654365807063916602037816955706321036900113929329671</span></span><br><span class="line">B = <span class="number">7668542654793784988436499086739239442915170287346121645884096222948338279165302213440060079141960679678526016348025029558335977042712382611197995002316466</span></span><br><span class="line">E = EllipticCurve(GF(p), [A, B])</span><br><span class="line">P = E.random_point()</span><br><span class="line">Q = flag * P</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(E)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;P:&#x27;</span>, P)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Q:&#x27;</span>, Q)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Elliptic Curve defined by y^2 = x^3 + 490963434153515882934487973185142842357175523008183292296815140698999054658777820556076794490414610737654365807063916602037816955706321036900113929329671*x + 7668542654793784988436499086739239442915170287346121645884096222948338279165302213440060079141960679678526016348025029558335977042712382611197995002316466 over Finite Field of size 11093300438765357787693823122068501933326829181518693650897090781749379503427651954028543076247583697669597230934286751428880673539155279232304301123931419</span></span><br><span class="line"><span class="comment"># P: (5554022717099360648521077915206867958510713570728935648722513803012487951670103349974914076311463683401346041009548809409633656449393930718778345589173915 : 1266078318886560129287459416353113688542197996795961235340234481614474504159805769053978291478602425874624451558101353431723090978689270131228854203647770 : 1)</span></span><br><span class="line"><span class="comment"># Q: (2758577082514053081281256667519462531364634668223896872592517478354667723237248507295586566258918736939764700935831769480917509906899250634810284495146946 : 511778894973388402517121634149232729267586460552999583843974221520798491852352254441185282292648216492508999730064294835066451755699876682807265675847421 : 1)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们知道，椭圆曲线是基于有限域上的离散对数问题，意味着 <strong>Q = flag * P</strong> 求flag是十分困难的</p><p>因此我们不妨看看椭圆曲线的阶为多少，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(E.order() == p)</span><br><span class="line"><span class="comment">#True</span></span><br></pre></td></tr></table></figure><p>于是联想到了<strong>Smart attack</strong></p><h2 id="smart-attack的本质"><a class="markdownIt-Anchor" href="#smart-attack的本质"></a> Smart attack的本质</h2><p><code>Smart attack</code>是一种利用<strong>椭圆曲线的同态性质</strong>和<strong>点的扩展域</strong>表示来破解密码</p><p>在椭圆曲线的同态结构中，我们将有限域提升为扩展域时，扩展域上的点提升</p><p>这时，我们在扩展域进行点操作，我们可以获得点的坐标比例</p><p>由于<strong>E.order() = p</strong>，所以椭圆曲线上的点构成一个<strong>循环群</strong>，所有点都可以表示为某个生成元的倍数</p><p>由于点乘的特殊性质，任意点<strong>P</strong>满足<strong>pP = O</strong>，其中O为无穷远点(单位元)，于是在<code>p-进数域</code>上计算<strong>p×P</strong>和<strong>p×Q</strong>后经过操作便可以求出k</p><h3 id="接下来开始介绍"><a class="markdownIt-Anchor" href="#接下来开始介绍"></a> 接下来开始介绍：</h3><p>我们知道P,Q均为椭圆曲线上的点，我们定义一个新的椭圆曲线</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>E</mi><mrow><mi>q</mi><mi>p</mi></mrow></msub><mtext> </mtext><mo>=</mo><mtext> </mtext><mi>E</mi><mi>l</mi><mi>l</mi><mi>i</mi><mi>p</mi><mi>t</mi><mi>i</mi><mi>c</mi><mi>C</mi><mi>u</mi><mi>r</mi><mi>v</mi><mi>e</mi><mo stretchy="false">(</mo><msub><mi>Q</mi><mi>p</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><mn>2</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">[</mo><mi>Z</mi><mi>Z</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>+</mo><mi>r</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>i</mi><mi>n</mi><mi>t</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>p</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>p</mi><mtext>  </mtext><mi>f</mi><mi>o</mi><mi>r</mi><mtext> </mtext><mi>t</mi><mtext>  </mtext><mi>i</mi><mi>n</mi><mtext>  </mtext><mi>E</mi><mi mathvariant="normal">.</mi><mi>a</mi><mi mathvariant="normal">_</mi><mi>i</mi><mi>n</mi><mi>v</mi><mi>a</mi><mi>r</mi><mi>i</mi><mi>a</mi><mi>n</mi><mi>t</mi><mi>s</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">E_{qp}\ =\ EllipticCurve(Q_p(p,2),[ZZ(t)+randint(0,p)*p\ \ for\ t\ \ in\ \ E.a\_invariants()])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">p</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">c</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mord mathnormal">p</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace"> </span><span class="mord mathnormal">t</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">.</span><span class="mord mathnormal">a</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">i</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal">s</span><span class="mopen">(</span><span class="mclose">)</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span></span></p><p>接下来我们分别看看<code>各部分的含义</code>：</p><blockquote><p><strong>Q<sub>p</sub>(p,2)</strong>：该椭圆曲线域定义为2阶的p-进数域</p><p><strong>E.a_invariants()</strong>：返回E.a_invariants()即椭圆曲线的Weierstrass形式的a-不变量</p><p>​椭圆曲线方程 y<sup>2</sup> = x<sup>3</sup> + a<sub>1</sub>xy + a<sub>2</sub>x<sup>2</sup> + a<sub>3</sub>y + a<sub>4</sub>x +</p><p>​最后返回一个包含a-不变量的列表</p><p><strong>ZZ(t)</strong>：ZZ表示整数环，ZZ(t)表示我们将不变量t转换为整数</p><p><strong>randint(0,p) * p</strong>：生成一个随机整数(在0到p之间) * p</p><p>ZZ(t) + randint(0,p) * p ：将原始不变量加上一个p的倍数，得到新的不变量</p></blockquote><ul><li><p>经过一系列操作，我们实现定义了一个从有限域提升到<code>p-进数域</code>上的椭圆曲线</p></li><li><p>接着，我们需要将P点从原始的椭圆曲线提升到我们新的椭圆曲线之上，在新曲线上找到对应的P点</p></li><li><p>使用**Eqp.lift_x(ZZ(P.xy()[0]) , all=True )**在新的椭圆曲线上找到与原始曲线上点P的x坐标相对应的所有可能的点</p></li><li><p>在新的椭圆曲线上，找到<strong>x</strong>坐标为<strong>ZZ(P.xy()[0])<strong>的所有点，于是我们便得到了一个点的列表，定义为</strong>P_Qps</strong></p></li><li><p>接着我们遍历所有<strong>P_Qps</strong>，如果其在有限域GF(p)上的y坐标与原始的点P的y坐标相等，我们便找到原始点P在新的椭圆曲线上对应的点<strong>P_Qp</strong></p></li><li><p>同理，我们也可以找到<strong>Q</strong>的新点<strong>Q_Qp</strong></p></li><li><p>接着，我们定义<strong>P</strong>的<strong>p倍点</strong>为<strong>p_times_P</strong>(其代表点P进行p次定义在椭圆曲线上的自加)</p></li><li><p>同理，<strong>p_times_Q = pQ_Qp</strong></p></li><li><p>接着我们返回<strong>P,Q的p倍点的x,y坐标</strong></p></li><li><p>我们定义</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>P</mi><mo stretchy="false">)</mo><mtext> </mtext><mo>=</mo><mtext> </mtext><mo>−</mo><mfrac><mrow><mi>x</mi><mi>P</mi></mrow><mrow><mi>y</mi><mi>P</mi></mrow></mfrac><mtext> </mtext><mo separator="true">,</mo><mtext> </mtext><mi>φ</mi><mo stretchy="false">(</mo><mi>Q</mi><mo stretchy="false">)</mo><mtext> </mtext><mo>=</mo><mtext> </mtext><mo>−</mo><mfrac><mrow><mi>x</mi><mi>Q</mi></mrow><mrow><mi>y</mi><mi>Q</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\varphi(P)\ =\ -\frac{xP}{yP}\ ,\ \varphi(Q)\ =\ -\frac{xQ}{yQ}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mclose">)</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.2407700000000004em;vertical-align:-0.8804400000000001em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace"> </span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">Q</span><span class="mclose">)</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.24077em;vertical-align:-0.8804400000000001em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603299999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal">Q</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mord mathnormal">Q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p></li><li><p>因为我们知道</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>Q</mi><mtext> </mtext><mo>=</mo><mtext> </mtext><mi>k</mi><mi>P</mi></mrow><annotation encoding="application/x-tex">Q\ =\ kP</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">Q</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></span></p></li><li><p>我们不难推出</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>p</mi><mo>×</mo><mi>Q</mi><mtext> </mtext><mo>=</mo><mtext> </mtext><mi>p</mi><mo>×</mo><mo stretchy="false">(</mo><mi>k</mi><mi>P</mi><mo stretchy="false">)</mo><mtext> </mtext><mo>=</mo><mtext> </mtext><mi>k</mi><mo>×</mo><mo stretchy="false">(</mo><mi>p</mi><mo>×</mo><mi>P</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p×Q\ =\ p×(kP)\ =\ k×(p×P)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">Q</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mclose">)</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mclose">)</span></span></span></span></span></p></li><li></li><li><p>所以</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>k</mi><mtext> </mtext><mo>=</mo><mtext> </mtext><mfrac><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>Q</mi><mo stretchy="false">)</mo></mrow><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>P</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">k\ =\ \frac{\varphi(Q)}{\varphi(P)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">Q</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p></li></ul><p>解密脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">11093300438765357787693823122068501933326829181518693650897090781749379503427651954028543076247583697669597230934286751428880673539155279232304301123931419</span></span><br><span class="line">A = <span class="number">490963434153515882934487973185142842357175523008183292296815140698999054658777820556076794490414610737654365807063916602037816955706321036900113929329671</span></span><br><span class="line">B = <span class="number">7668542654793784988436499086739239442915170287346121645884096222948338279165302213440060079141960679678526016348025029558335977042712382611197995002316466</span></span><br><span class="line">E = EllipticCurve(GF(p),[A,B])</span><br><span class="line">P = E(<span class="number">5554022717099360648521077915206867958510713570728935648722513803012487951670103349974914076311463683401346041009548809409633656449393930718778345589173915</span>,<span class="number">1266078318886560129287459416353113688542197996795961235340234481614474504159805769053978291478602425874624451558101353431723090978689270131228854203647770</span>)</span><br><span class="line">Q = E(<span class="number">2758577082514053081281256667519462531364634668223896872592517478354667723237248507295586566258918736939764700935831769480917509906899250634810284495146946</span>,<span class="number">511778894973388402517121634149232729267586460552999583843974221520798491852352254441185282292648216492508999730064294835066451755699876682807265675847421</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SmartAttack</span>(<span class="params">P,Q,p</span>):</span><br><span class="line">    E = P.curve()</span><br><span class="line">    Eqp = EllipticCurve(Qp(p,<span class="number">2</span>),[ZZ(t) + randint(<span class="number">0</span>,p)*p <span class="keyword">for</span> t <span class="keyword">in</span> E.a_invariants()])</span><br><span class="line">    </span><br><span class="line">    P_Qps = Eqp.lift_x(ZZ(P.xy()[<span class="number">0</span>]) , <span class="built_in">all</span> = <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> P_Qp <span class="keyword">in</span> P_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(Q_Qp.xy()[<span class="number">1</span>]) == Q.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    Q_Qps = Eqp.lift_x(ZZ(Q.xy()[<span class="number">0</span>]),<span class="built_in">all</span> = <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> Q_Qp <span class="keyword">in</span> Q_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(Q_Qp.xy()[<span class="number">1</span>]) == Q.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    p_times_P = p*P_Qp</span><br><span class="line">    p_times_Q = p*Q_Qp</span><br><span class="line">    </span><br><span class="line">    x_P,y_P = p_times_P.xy()</span><br><span class="line">    x_Q,y_Q = p_times_Q.xy()</span><br><span class="line">    </span><br><span class="line">    phi_P = -(x_P/y_P)</span><br><span class="line">    phi_Q = -(x_Q/y_Q)</span><br><span class="line">    </span><br><span class="line">    k = phi_Q/phi_P</span><br><span class="line">    <span class="keyword">return</span> ZZ(k)</span><br><span class="line"></span><br><span class="line">flag = SmartAttack(P,Q,p)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="crypto" scheme="https://alic3-myth.github.io/categories/crypto/"/>
    
    
    <category term="crypto" scheme="https://alic3-myth.github.io/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>数论</title>
    <link href="https://alic3-myth.github.io/project/%E6%95%B0%E8%AE%BA/"/>
    <id>https://alic3-myth.github.io/project/%E6%95%B0%E8%AE%BA/</id>
    <published>2024-09-21T07:03:55.000Z</published>
    <updated>2024-09-21T07:43:55.658Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="阿贝尔群"><a class="markdownIt-Anchor" href="#阿贝尔群"></a> 阿贝尔群：</h2><p>如果集合G有一个<strong>乘法运算<code>·</code>(+)</strong>，且此运算具有性质：</p><ul><li>结合律：(a · b) · c = a · (b · c)</li><li>单位元的存在性：e · a = a · e = a</li><li>逆元的存在：a · a<sup>-1</sup> = a<sup>-1</sup> · a = e</li></ul><p>则称<strong>G</strong>为一个<strong>乘法(加法)群</strong></p><p>如果G的乘法(加法)再满足<strong>交换律</strong> a · b = b · a，则<strong>G</strong>称为<strong>阿贝尔群(可交换群)</strong></p><h2 id="环"><a class="markdownIt-Anchor" href="#环"></a> 环：</h2><p>如果集合<strong>R</strong>有加法和乘法两个运算，且具有性质：</p><ul><li><strong>R</strong>在<strong>加法</strong>下是一个阿贝尔群</li><li><strong>乘法</strong>满足结合律： (ab)c = a(bc)</li><li>加法和乘法之间存在左、右分配律：</li></ul><p>​a(b+c) = ab + ac</p><p>​(b+c)a = ba + ca</p><p>则R称为一个<strong>环</strong>(Ring)</p><h2 id="域"><a class="markdownIt-Anchor" href="#域"></a> 域：</h2><p>一个有单位元素1的交换环为一个域，其中每一个非零元素a均有a<sup>-1</sup>，即</p><p>​a · a<sup>-1</sup> = 1</p><h3 id="fp"><a class="markdownIt-Anchor" href="#fp"></a> F<sub>p</sub></h3><p>整数模p (p为质数) 的剩余类集合 <strong>Z/pZ = {0,1,2,……,p-1}<strong>也是一个域，称为</strong>F<sub>p</sub></strong></p><h3 id="域的例子"><a class="markdownIt-Anchor" href="#域的例子"></a> 域的例子：</h3><p>**Z/5Z = {0,1,2,3,4}**是一个域，因为它的每个非零元素都是可逆的，即：</p><blockquote><p>​1<sup>-1</sup> = 1，因为 1·1<sup>-1</sup> = 1 (mod 5)</p><p>​2<sup>-1</sup> = 1，因为 2·2<sup>-1</sup> = 1 (mod 5)</p><p>​3<sup>-1</sup> = 1，因为 3·3<sup>-1</sup> = 1 (mod 5)</p><p>​4<sup>-1</sup> = 1，因为 4·4<sup>-1</sup> = 1 (mod 5)</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="math" scheme="https://alic3-myth.github.io/categories/math/"/>
    
    
    <category term="math" scheme="https://alic3-myth.github.io/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>ECC</title>
    <link href="https://alic3-myth.github.io/project/ECC/"/>
    <id>https://alic3-myth.github.io/project/ECC/</id>
    <published>2024-09-20T13:58:56.000Z</published>
    <updated>2024-09-22T16:03:45.828Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="有限域上的椭圆曲线"><a class="markdownIt-Anchor" href="#有限域上的椭圆曲线"></a> 有限域上的椭圆曲线</h1><h2 id="椭圆曲线是什么"><a class="markdownIt-Anchor" href="#椭圆曲线是什么"></a> 椭圆曲线是什么:</h2><p>满足 <code>Weierstrass 方程</code></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>Y</mi><mn>2</mn></msup><mo>=</mo><msup><mi>X</mi><mn>3</mn></msup><mo>+</mo><mi>A</mi><mi>X</mi><mo>+</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">Y^2 = X^3 + AX + B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span></span></p><p>的点集，称为椭圆曲线(elliptic curve)。下面给出两个椭圆曲线的例子：</p><p><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/e1.png" alt="e1" style="zoom: 40%;" / loading="lazy"><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/e2.png" alt="e2" style="zoom: 40%;" / loading="lazy"></p><p>可见它的长相与椭圆并没有什么联系。我们可以在椭圆曲线E上定义“加”运算：假设有P,Q两点，则P⊕Q的步骤如下：</p><ul><li>连接<strong>PQ</strong>引出一条直线，该直线交<strong>E</strong>于<strong>R</strong>点</li><li><strong>R</strong>相对于x轴的对称点就是P+Q的结果<strong>R’</strong></li></ul><h2 id="无穷远点"><a class="markdownIt-Anchor" href="#无穷远点"></a> 无穷远点：</h2><p>当P,Q(P’)关于x轴对称时，P与P‘的连线交E于某个无穷远点，记为<strong>O</strong></p><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/image-19.png" alt="image-19" style="zoom:50%;" / loading="lazy"><p>需要注意的是，我们只引入了<strong>一个</strong>无穷远点，假想它在每一条铅直线上。</p><p>如果把某个点加上无穷远点，会发生什么情况呢？<strong>P</strong> 与 <strong>O</strong> 的连线交 <strong>E</strong> 于三个点—— <strong>O,P,P′</strong>，于是把 **P′ **作为直线与 <strong>E</strong> 相交得到的点；再关于 x 轴对称一次，又回到了 <strong>P</strong>. 这也就是说：<strong>P+O=P</strong></p><p>我们意识到，<strong>O</strong> 是加法运算的单位元。</p><h2 id="椭圆曲线加法群"><a class="markdownIt-Anchor" href="#椭圆曲线加法群"></a> 椭圆曲线加法群：</h2><p>由于 <strong>O</strong> 的存在，任意两个点都是可加的。那么带着刚刚引进的无穷远点 O ，我们重新定义椭圆曲线。</p><blockquote><p>一个椭圆曲线(elliptic curve) <strong>E</strong> 是满足 Weierstrass 方程</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mo>:</mo><msup><mi>Y</mi><mn>2</mn></msup><mo>=</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mi>A</mi><mi>X</mi><mo>+</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">E:Y^2 = x^3 + AX + B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span></span></p><p>的解集，以及无穷远点 O. 其中 A,B 满足</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>4</mn><msup><mi>A</mi><mn>3</mn></msup><mo>+</mo><mn>27</mn><msup><mi>B</mi><mn>2</mn></msup><mo mathvariant="normal">≠</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">4A^3 + 27B^2  ≠ 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0585479999999998em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mord">7</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p></blockquote><p>解释为什么要 <strong>4A<sup>3</sup> + 27B<sup>2</sup> ≠ 0.</strong></p><p>我们知道<strong>x<sup>3</sup> + Ax + B</strong> 可以表达为 <strong>(x−p<sub>1</sub>)(x−p<sub>2</sub>)(x−p<sub>3</sub>)</strong>，此时当且仅当**p<sub>1</sub>,p<sub>2</sub>,p<sub>3</sub>**互不相同，才会有 4A<sup>3</sup>+27B<sup>2</sup> ≠ 0.</p><p>至于如果 <strong>4A<sup>3</sup> + 27B<sup>2</sup> = 0</strong>，会出现什么情况？</p><p><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/e1-1.png" alt="e1-1" style="zoom:50%;" / loading="lazy"><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/e2-1.png" alt="e2-1" style="zoom: 33%;" / loading="lazy"></p><p>这与我们平常见到的两类椭圆曲线，长相差异有点大。它们存在奇点，这会导致我们一些算法失效。</p><p>​在椭圆曲线上，⊕ 满足加法的性质，以下简写为 “+”。我们有：</p><ul><li><code>有单位元</code>：<strong>P + O = O + P = P</strong></li><li><code>有逆元</code>：<strong>P + (−P) = O，其中 −P 是 P 关于 x 轴的对称点。</strong></li><li><code>结合律</code>：<strong>(P + Q) + R = P + (Q + R)</strong></li><li><code>交换律</code>：<strong>P + Q = Q + P</strong></li></ul><p>以上每一条性质都可以手工验证。从而 **(E,+)**是一个阿贝尔群。于是立刻可以定义数乘运算：</p><blockquote><p>对于正整数 <strong>n</strong> 和椭圆曲线上的点 <strong>P</strong>，定义</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mi>P</mi><mo>=</mo><mi>P</mi><mo>+</mo><mi>P</mi><mo>+</mo><mi>P</mi><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>P</mi></mrow><annotation encoding="application/x-tex">nP = P + P + P + ⋯ + P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></span></p><p>​显然，<strong>nP</strong> 可以通过类似于快速幂的算法，以 <strong>O(log⁡ n)</strong> 次加法的代价求出来。<br />给定 P 和 <strong>Q=nP</strong>，求解 <strong>n</strong>，就是椭圆曲线上的离散对数问题。</p></blockquote><h2 id="sage演示"><a class="markdownIt-Anchor" href="#sage演示"></a> Sage演示：</h2><p>下面创建一个有理数域上的椭圆曲线：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">E = EllipticCurve([-<span class="number">4</span>,<span class="number">4</span>])</span><br><span class="line">show(E)</span><br><span class="line">E.plot()</span><br><span class="line"><span class="comment">#可以通过 c = E.plot()</span></span><br><span class="line"><span class="comment"># c.save(&#x27;e1.png&#x27;)在本地保存椭圆曲线图像</span></span><br></pre></td></tr></table></figure><p>​<strong>y<sup>2</sup> = x<sup>3</sup> - 4x + 4</strong></p><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/e1e.png" alt="e1e" style="zoom: 50%;" / loading="lazy"><p>​可以获取x = 1 时 y 的坐标：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">P = E.lift_x(<span class="number">1</span>)</span><br><span class="line">P.xy()</span><br><span class="line"><span class="comment"># (1,1)</span></span><br></pre></td></tr></table></figure><p>​可以进行加法和数乘：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">P = E(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>((P+P).xy())</span><br><span class="line"><span class="comment">#(-7/4, -19/8)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>((<span class="number">10</span>*P).xy())</span><br><span class="line"><span class="comment">#(6842296746792370323149869881/4707170986824452430287314276, -362077523342554990622151678980410735228339/322953474560414360335499847218317184607976)</span></span><br></pre></td></tr></table></figure><p>​单位元（无穷远点）用 <code>E(0)</code> 来得到。可以进行运算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">O = E(<span class="number">0</span>)</span><br><span class="line">P = E(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>((O+O) == O)</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>((O+P).xy())</span><br><span class="line"><span class="comment"># (1, 1)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>((O+P) == P)</span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure><p>​现在我们造一个实数域上的椭圆曲线：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E = EllipticCurve(RealField(), [-<span class="number">15</span>,<span class="number">8</span>])</span><br><span class="line">show(E)</span><br><span class="line">E.plot()</span><br></pre></td></tr></table></figure><p>​<strong>y<sup>2</sup> = x<sup>3</sup> - 15.0000000000000 * x + 8.00000000000000</strong></p><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/e2e.png" alt="e2e" style="zoom:50%;" / loading="lazy"><p>​　运算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">P = E.lift_x(<span class="number">666</span>)</span><br><span class="line">Q = E.lift_x(<span class="number">233</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(P.xy())</span><br><span class="line"><span class="comment"># (666.000000000000, 17187.1554947292)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Q.xy())</span><br><span class="line"><span class="comment"># (233.000000000000, 3556.10039228366)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>((P+Q).xy())</span><br><span class="line"><span class="comment"># (92.0216770365539, 881.967248744277)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>((<span class="number">100</span>*(P+Q)).xy())</span><br><span class="line"><span class="comment"># (4.19546744213511, 4.34929697563973)</span></span><br></pre></td></tr></table></figure><h2 id="有限域上的椭圆曲线-2"><a class="markdownIt-Anchor" href="#有限域上的椭圆曲线-2"></a> 有限域上的椭圆曲线:</h2><p>​密码学需要的是离散的数学，而以上介绍的都是连续的。我们如果想把椭圆曲线应用于密码学，就需要在它上面定义一个有限群。</p><blockquote><p>设 <strong>p</strong> 为质数，有限域 <strong>Fp</strong> 上的椭圆曲线是下面的方程：</p><p>​</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mo>:</mo><mi>Y</mi><mn>2</mn><mo>=</mo><mi>X</mi><mn>3</mn><mo>+</mo><mi>A</mi><mi>X</mi><mo>+</mo><mi>B</mi><mtext>  </mtext><mi>w</mi><mi>i</mi><mi>t</mi><mi>h</mi><mtext>  </mtext><mi>A</mi><mo separator="true">,</mo><mi>B</mi><mo>∈</mo><mi>F</mi><mi>p</mi><mo separator="true">,</mo><mn>4</mn><msup><mi>A</mi><mn>3</mn></msup><mo>+</mo><mn>27</mn><msup><mi>B</mi><mn>2</mn></msup><mo mathvariant="normal">≠</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">E:Y2=X3+AX+B\ \ with\ \  A,B∈Fp,4A^3+27B^2≠0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0585479999999998em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0585479999999998em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mord">7</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p><p>其点集为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><msub><mi>F</mi><mi>p</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">{</mo><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>:</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>∈</mo><mi>F</mi><mi>p</mi><mo separator="true">,</mo><mi>y</mi><mn>2</mn><mo>=</mo><mi>x</mi><mn>3</mn><mo>+</mo><mi>A</mi><mi>x</mi><mo>+</mo><mi>B</mi><mo stretchy="false">}</mo><mo>∪</mo><mo stretchy="false">{</mo><mi>O</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">E(F_p)=\{(x,y) : x,y∈Fp, y2=x3+Ax+B\}∪\{O\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">x</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">}</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mclose">}</span></span></span></span></span></p><p>其中所有的运算在模 p 意义下进行。</p></blockquote><p>​举个🌰，考虑F<sub>13</sub>上的椭圆曲线：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mo>:</mo><mtext> </mtext><msup><mi>Y</mi><mn>2</mn></msup><mtext> </mtext><mo>=</mo><mtext> </mtext><msup><mi>X</mi><mn>3</mn></msup><mo>+</mo><mn>3</mn><mi>X</mi><mo>+</mo><mn>8</mn></mrow><annotation encoding="application/x-tex">E:\ Y^2\ =\ X^3 +3X +8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span></span></span></span></span></p><p>​想找出这个椭圆曲线上的点集，只需要枚举 <strong>x</strong>，然后看是不是有 <strong>y</strong> 使得<strong>y<sup>2</sup></strong> 等于 <strong>x<sup>3</sup>+3x+8</strong>. 这是一个二次剩余问题，我们已经解决得比较好了。在 x=0 的时候，没有 <strong>y</strong> 与之对应；在 <strong>x=1</strong> 的时候，<strong>√12=5,8</strong>，从而 **(1,5) **和 <strong>(1,8)</strong> 是椭圆曲线上的点。</p><p><code>Sage</code> 可以在有限域上建立椭圆曲线，并枚举所有点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E = EllipticCurve(GF(<span class="number">13</span>),[<span class="number">3</span>,<span class="number">8</span>])</span><br><span class="line">E.points()</span><br><span class="line"><span class="comment"># [(0 : 1 : 0), (1 : 5 : 1), (1 : 8 : 1), (2 : 3 : 1), (2 : 10 : 1), (9 : 6 : 1), (9 : 7 : 1), (12 : 2 : 1), (12 : 11 : 1)]</span></span><br></pre></td></tr></table></figure><p>​在有限域椭圆曲线上进行加法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">E = EllipticCurve(GF(<span class="number">13</span>), [<span class="number">3</span>, <span class="number">8</span>])</span><br><span class="line"><span class="built_in">print</span>(E(<span class="number">1</span>, <span class="number">5</span>) + E(<span class="number">1</span>, <span class="number">8</span>))</span><br><span class="line"><span class="comment"># (0 : 1 : 0), 无穷远点</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(E(<span class="number">12</span>, <span class="number">2</span>) + E(<span class="number">9</span>, <span class="number">7</span>))</span><br><span class="line"><span class="comment"># (2 : 3 : 1)</span></span><br></pre></td></tr></table></figure><p>​来观察有限域 F<sub>13</sub> 上的椭圆曲线的加法表：</p><p><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/image-24.png" alt="img" / loading="lazy"></p><p>​▲ F<sub>13</sub> 上的椭圆曲线 <strong>E:Y<sup>2</sup>=X<sup>3</sup>+3X+8</strong> 的加法表</p><p>有限域上的椭圆曲线以及加法，构成了一个<strong>有限群</strong>。现在来研究这个群里的元素个数。</p><p>我们知道，一个整数在有限域内，大概有一半的概率是二次剩余，一半的概率不是。所以我们猜测</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>c</mi><mi>a</mi><mi>r</mi><mi>d</mi><mtext> </mtext><mi>E</mi><mo stretchy="false">(</mo><mi>F</mi><mi>p</mi><mo stretchy="false">)</mo><mo>≈</mo><mn>50</mn><mi mathvariant="normal">%</mi><mtext> </mtext><mo>⋅</mo><mi>p</mi><mo>⋅</mo><mn>2</mn><mo>+</mo><mn>1</mn><mo>=</mo><mi>p</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">card\ E(Fp)≈50 \%\ ⋅p⋅2+1=p+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">5</span><span class="mord">0</span><span class="mord">%</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.63889em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p><p>这个猜测挺准确。事实上</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>c</mi><mi>a</mi><mi>r</mi><mi>d</mi><mtext> </mtext><mi>E</mi><mo stretchy="false">(</mo><mi>F</mi><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><mi>p</mi><mo>+</mo><mn>1</mn><mtext>−</mtext><msub><mi>t</mi><mi>p</mi></msub><mtext>  </mtext><mi>w</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>e</mi><mtext> </mtext><mi mathvariant="normal">∣</mi><msub><mi>t</mi><mi>p</mi></msub><mi mathvariant="normal">∣</mi><mo>≤</mo><mn>2</mn><msqrt><mi>p</mi></msqrt></mrow><annotation encoding="application/x-tex">card\ E(Fp)=p+1−t_p\ \ where\ |t_p|≤2\sqrt{p}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord">1</span><span class="mord">−</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mspace"> </span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.28806499999999996em;"></span><span class="mord">2</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.751935em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">p</span></span></span><span style="top:-2.711935em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.28806499999999996em;"><span></span></span></span></span></span></span></span></span></span></p><p>有限域上的椭圆曲线，点的分布与实数域上的椭圆曲线非常不同。来看两个例子。</p><p><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/x1.png" alt="x1" style="zoom:50%;" / loading="lazy"><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/x2.png" alt="x2" style="zoom:50%;" / loading="lazy"></p><p>​▲ 有限域上椭圆曲线的点分布。它们 <strong>A=3,B=8，左：F<sub>13</sub>，右：F<sub>101</sub></strong></p><h2 id="椭圆曲线离散对数问题"><a class="markdownIt-Anchor" href="#椭圆曲线离散对数问题"></a> 椭圆曲线离散对数问题:</h2><p>​经典的椭圆曲线上的离散对数问题，是给定点 <code>P</code>和 <code>nP</code>，要推出 <code>n</code> 的值。有限域椭圆曲线上的离散对数问题亦然。</p><blockquote><p>设 <strong>E</strong> 是有限域 <strong>F<sub>p</sub></strong> 上的椭圆曲线，<strong>P,Q∈E(F<sub>p</sub>)</strong>. 椭圆曲线离散对数问题(Elliptic Curve Discrete Logarithm Problem) 是指：找到一个整数 <strong>n</strong> 使得 <strong>Q=nP</strong>. 我们记</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mo>=</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>P</mi></msub><mtext>⁡</mtext><mo stretchy="false">(</mo><mi>Q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n=log_P⁡(Q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">⁡</span><span class="mopen">(</span><span class="mord mathnormal">Q</span><span class="mclose">)</span></span></span></span></span></p><p>并称 <strong>n</strong> 是以 <strong>P</strong> 为底 <strong>Q</strong> 的椭圆曲线离散对数。</p></blockquote><p>​举一个离散对数的例子。考虑 F<sub>73</sub> 上的椭圆曲线</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mo>:</mo><msup><mi>Y</mi><mn>2</mn></msup><mo>=</mo><msup><mi>X</mi><mn>3</mn></msup><mo>+</mo><mn>8</mn><mi>X</mi><mo>+</mo><mn>7</mn></mrow><annotation encoding="application/x-tex">E:Y^2=X^3+8X+7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord">8</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span></span></span></span></span></p><p>其上有点 <strong>P=(32,53)</strong> 和点 <strong>Q=(39,17)</strong>. 计算得知 <strong>Q=11P</strong>，于是<strong>log<sub>P</sub>⁡(Q)=11</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">E = EllipticCurve(GF(<span class="number">73</span>), [<span class="number">8</span>, <span class="number">7</span>])</span><br><span class="line">P = E(<span class="number">32</span>, <span class="number">53</span>)</span><br><span class="line">Q = E(<span class="number">39</span>, <span class="number">17</span>)</span><br><span class="line"></span><br><span class="line">P.discrete_log(Q)</span><br><span class="line"><span class="comment"># 11</span></span><br></pre></td></tr></table></figure><p>很明显，符合条件的 n 会有很多很多个，就像有限域上的离散对数也有无限多个一样。为了简化问题，我们定义 P 的<strong>阶</strong>是使得 <strong>xP=yP,x&gt;y</strong> 的最小的 <strong>s:=x−y</strong>，于是 <strong>sP</strong> 显然就是无穷远点。顺带一提，由于拉格朗日定理，s 是 <strong>card E(F<sub>p</sub>)</strong> 的因数。离散对数是一个解系，每个解可以表示成 <strong>n<sub>0</sub>+k⋅s,k∈Z</strong>.</p><p>所以现在，离散对数的全体解，是集族<code>Z/sZ</code>中的一个元素。以后可以直接取 [0,p) 之间的一个代表元 n<sub>0</sub>，来代表离散对数的解了。另外，我们发现</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>P</mi></msub><mo stretchy="false">(</mo><msub><mi>Q</mi><mn>1</mn></msub><mo>+</mo><msub><mi>Q</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mtext> </mtext><mo>=</mo><mtext> </mtext><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>P</mi></msub><mo stretchy="false">(</mo><msub><mi>Q</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>+</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>P</mi></msub><mo stretchy="false">(</mo><msub><mi>Q</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">log_P(Q_1+Q_2)\ =\ log_P(Q_1)+log_P(Q_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>​从而 <strong>log<sub>P</sub>:E(F<sub>p</sub>)→Z/sZ</strong> 是群 <strong>E(F<sub>p</sub>)</strong> 到群 <strong>Z/sZ</strong> 的一个<code>同态映射</code>！</p><p>​</p><p>​最后，需要注意的一点是，并不是全体 <strong>log<sub>P</sub>⁡(Q)</strong> 都可以求出解。举个例子：在我们刚刚讨论的那条曲线上，存在 <strong>(20,65)</strong> 这个点，但它不是 <strong>P</strong> 的倍数。群论上这是很好理解的，因为这一个 <strong>P</strong> 的阶不等于 <strong>E</strong> 的<strong>阶</strong>，它无法生成整个 <strong>E</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">E = EllipticCurve(GF(<span class="number">73</span>), [<span class="number">8</span>, <span class="number">7</span>])</span><br><span class="line"></span><br><span class="line">P.discrete_log(Q)</span><br><span class="line"><span class="comment"># ValueError: ECDLog problem has no solution</span></span><br><span class="line"></span><br><span class="line">E.order(), P.order()</span><br><span class="line"><span class="comment"># (82, 41)</span></span><br></pre></td></tr></table></figure><p>目前已知的最快的 <code>ECDLP</code> 算法，需要 <code>√p</code> 次运算来求解 E(F<sub>p</sub>) 上的离散对数问题。因此 ECDLP 是一个相当困难的问题。</p><h3 id="例题"><a class="markdownIt-Anchor" href="#例题"></a> 例题：</h3><blockquote><p>Jarvis OJ: 简单ECC概念<br />已知椭圆曲线加密 Ep(a,b)</p><p>参数为 p = 15424654874903,<br />a = 16546484, b = 4548674875, G(6478678675,5636379357093)</p><p>私钥为 k = 546768，求公钥 K(x,y)<br />提示：K=kG</p><p>注：题目来源XUSTCTF2016</p></blockquote><p>​直接用Sage算出<strong>kG</strong>就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">E = EllipticCurve(GF(<span class="number">15424654874903</span>), [<span class="number">16546484</span>, <span class="number">4548674875</span>])</span><br><span class="line">G = E(<span class="number">6478678675</span>,<span class="number">5636379357093</span>)</span><br><span class="line"></span><br><span class="line">K = <span class="number">546768</span> * G</span><br><span class="line">K.xy()</span><br><span class="line"><span class="comment"># (13957031351290, 5520194834100)</span></span><br><span class="line"><span class="comment"># x+y = 19477226185390</span></span><br></pre></td></tr></table></figure><h2 id="elgamal"><a class="markdownIt-Anchor" href="#elgamal"></a> ElGamal:</h2><p>假设用户 B 要把消息加密后传给用户 A。</p><h3 id="密钥生成"><a class="markdownIt-Anchor" href="#密钥生成"></a> 密钥生成</h3><p>用户A先选择一条椭圆曲线 E<sub>q</sub>(a,b) ，然后选择其上的一个生成元 G，假设其阶为 n，之后再选择一个正整数 na 作为密钥，计算P<sub>a</sub> = n<sub>a</sub>G。</p><p>其中，E<sub>q</sub>(a,b),q,G 都会被公开。</p><p>公钥为 P<sub>a</sub>，私钥为 n<sub>a</sub>。</p><h3 id="加密"><a class="markdownIt-Anchor" href="#加密"></a> 加密</h3><p>用户 B 在向用户 A 发送消息 m，这里假设消息 m 已经被编码为椭圆曲线上的点，其加密步骤如下</p><ol><li>查询用户 A 的公钥 E<sub>q</sub>(a,b) , q ,P<sub>a</sub> ,G 。</li><li>在 (1,q - 1) 的区间内选择随机数 k 。</li><li>根据 A 的公钥计算点 (x<sub>1</sub>,y<sub>1</sub>) = kG。</li><li>计算点 (x<sub>2</sub>,y<sub>2</sub>) = kP<sub>a</sub>，如果为 0，则从第二步重新开始。</li><li>计算 C = m + (x<sub>2</sub>,y<sub>2</sub>)</li><li>将 ((x<sub>1</sub>,y<sub>1</sub>),C) 发送给 A。</li></ol><h3 id="解密"><a class="markdownIt-Anchor" href="#解密"></a> 解密</h3><p>解密步骤如下</p><ol><li>利用私钥计算点 n<sub>a</sub>(x1,y1) = n<sub>a</sub>kG = kP<sub>a</sub> = (x2,y2)。</li><li>计算消息 m = C − (x2,y2) 。</li></ol><h3 id="关键点"><a class="markdownIt-Anchor" href="#关键点"></a> 关键点</h3><p>这里的关键点在于我们即使知道了 (x1,y1) 也难以知道 k，这是由离散对数的问题的难度决定的。</p><h3 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h3><p>以 2013 SECCON CTF quals Cryptanalysis 为例<img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/2013-seccon-ctf-crypt-desp.png" alt="2013-seccon-ctf-crypt-desp" / loading="lazy"></p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Sage</span></span><br><span class="line">a = <span class="number">1234577</span></span><br><span class="line">b = <span class="number">3213242</span></span><br><span class="line">n = <span class="number">7654319</span></span><br><span class="line"></span><br><span class="line">E = EllipticCurve(GF(n),[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,a,b])</span><br><span class="line"><span class="comment">#EllipticCurve([a1,a2,a3,a4,a6])</span></span><br><span class="line"><span class="comment">#构造椭圆曲线#y**2+a1*xy+a3*y=x**3+a2*x**2+a4*x+a6</span></span><br><span class="line"></span><br><span class="line">base = E([<span class="number">5234568</span>, <span class="number">2287747</span>])</span><br><span class="line">pub = E([<span class="number">2366653</span>, <span class="number">1424308</span>])</span><br><span class="line"></span><br><span class="line">c1 = E([<span class="number">5081741</span>, <span class="number">6744615</span>])</span><br><span class="line">c2 = E([<span class="number">610619</span>, <span class="number">6218</span>])</span><br><span class="line"></span><br><span class="line">X = base</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n):</span><br><span class="line">    <span class="keyword">if</span> X == pub:</span><br><span class="line">        secret = i</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] secret:&quot;</span>,i)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        X = X + base</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">m = c2 - c1*secret</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] x:&quot;</span>, m[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] y:&quot;</span>, m[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] x+y:&quot;</span>, m[<span class="number">0</span>] + m[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h2 id="ecc中的pohlig-hellman"><a class="markdownIt-Anchor" href="#ecc中的pohlig-hellman"></a> ECC中的Pohlig-Hellman</h2><h3 id="加解密"><a class="markdownIt-Anchor" href="#加解密"></a> 加解密</h3><p>首先我们不妨假设需要求解的式子为：</p><p><strong>Q=l ∗ P</strong></p><p>其中 <code>P</code> 为我们选取的一个基点，<code>l</code>就是我们选定的随机数，相当于要求解的私钥。</p><p>首先求得 <code>P</code> 的阶 <code>n</code>，也就是可使得 <code>n * P</code> 不存在的最小正整数</p><p>然后我们将 n 进行分解，我们设</p><p><strong>n=p<sub>1</sub><sup>e1</sup>∗p<sub>2</sub><sup>e2</sup>……p<sub>r</sub><sup>er</sup></strong></p><p>然后我们将这些因子拿出来，对于 i 属于 [1, r],计算</p><p><strong>l<sub>i</sub> = l mod p<sub>i</sub><sup>ei</sup></strong></p><p>于是我们便得到了下面的这一系列等式<br /><strong>l ≡ (l<sub>1</sub> mod p<sub>1</sub><sup>e1</sup>)</strong><br /><strong>l ≡ (l<sub>2</sub> mod p<sub>2</sub><sup>e2</sup>)</strong><br />……<br /><strong>l ≡ (l<sub>r</sub> mod p<sub>r</sub><sup>er</sup>)</strong></p><p>看上去是不是有点眼熟，如果得到了这些 li 的值我们就能使用中国剩余定理进行求解得到 l 了，现在的问题就是求解这些 l<sub>i</sub></p><p>首先我们将 l<sub>i</sub> 设为成 pi 表示的多项式，如下：</p><p><strong>l<sub>i</sub>=z<sub>0</sub>+z<sub>1</sub>p<sub>i</sub>+z<sub>2</sub>p<sub>i</sub><sup>2</sup>+…+z<sub>e−1</sub>p<sub>i</sub></strong></p><p>接下来我们的任务就是求解这些 z，注意这里的z应该是属于 [0,pi−1]</p><p>下面就很有意思了，为了计算 zi，我们分别取 P0 和 Q0，并取值：</p><p><strong>P<sub>0</sub>=(n/p<sub>i</sub>)P</strong></p><p><strong>Q<sub>0</sub>=(n/p<sub>i</sub>)Q</strong></p><p>这样我们就有了 pi∗P0=nP，接下来我们可以得到 Q0 的表达式：</p><p><strong>Q<sub>0</sub> = (n/p<sub>i</sub>)Q=(n/p<sub>i</sub>)(l P)=l (n/p<sub>i</sub>)P=l * P<sub>0</sub></strong></p><p>其实就是在我们原表达式的两边乘上了 n/p<sub>i</sub></p><p>这样的话我们再转回 l<sub>i</sub>，先求解 z<sub>0</sub></p><p><strong>l<sub>i</sub>∗P=Q</strong></p><p><strong>=&gt;l<sub>i</sub> ∗ P<sub>0</sub> = Q<sub>0</sub></strong></p><p><strong>=&gt;(z<sub>0</sub>+z<sub>1</sub>P<sub>i</sub>+…+z<sub>e−1</sub>P<sub>i</sub><sup>e−1</sup>)P<sub>0</sub>=Q<sub>0</sub></strong></p><p><strong>=&gt;z<sub>0</sub> ∗ P<sub>0</sub>=Q<sub>0</sub></strong></p><p>这时我们便将在 P 域上的离散对数分解到了 P<sub>0</sub> 域上，因为 P<sub>0</sub>的阶是 n/p<sub>i</sub>，已经较原本的阶 n 运算的复杂度小了很多，当然，除非 n 本身就是个大素数</p><p>在这里我们可以求得 z<sub>0</sub>，然后我们再代回原式</p><p><strong>(z<sub>0</sub>+z<sub>1</sub>p<sub>i</sub>+…+z<sub>e−1</sub>p<sub>i</sub><sup>e−1</sup>P<sub>0</sub>=Q<sub>0</sub>)</strong></p><p><strong>=&gt;z<sub>0</sub>P<sub>0</sub>+(z<sub>1</sub>p<sub>i</sub>+…+z<sub>e−1</sub>p<sub>i</sub><sup>e−1</sup>P<sub>0</sub>=Q<sub>0</sub>)</strong></p><p><strong>=&gt;(z<sub>1</sub>p<sub>i</sub>+…+z<sub>e−1</sub>p<sub>i</sub><sup>e−1</sup>P<sub>0</sub>=Q<sub>0</sub>−z<sub>0</sub>P<sub>0</sub>)</strong></p><p><strong>=&gt;z<sub>1</sub>p<sub>i</sub>=Q<sub>0</sub>−z<sub>0</sub>P<sub>0</sub></strong></p><p>此时就可以求解 z<sub>1</sub>，然后依次将 z<sub>i</sub> 全部算出来，这样我们就得到了 l<sub>1</sub>，然后便可以代入前面的等式，将 l<sub>1</sub> 都求出后即可利用中国剩余定理求出 l</p><h3 id="例子-2"><a class="markdownIt-Anchor" href="#例子-2"></a> 例子</h3><p>picoCTF 2017的 ECC 2-200 题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Elliptic Curve: y^<span class="number">2</span> = x^<span class="number">3</span> + A*x + B mod M</span><br><span class="line">M = <span class="number">93556643250795678718734474880013829509320385402690660619699653921022012489089</span></span><br><span class="line">A = <span class="number">66001598144012865876674115570268990806314506711104521036747533612798434904785</span></span><br><span class="line">B = *You can figure this out <span class="keyword">with</span> the point below :)*</span><br><span class="line"></span><br><span class="line">P = (<span class="number">56027910981442853390816693056740903416379421186644480759538594137486160388926</span>, <span class="number">65533262933617146434438829354623658858649726233622196512439589744498050226926</span>)</span><br><span class="line">n = *SECRET*</span><br><span class="line">n*P = (<span class="number">61124499720410964164289905006830679547191538609778446060514645905829507254103</span>, <span class="number">2595146854028317060979753545310334521407008629091560515441729386088057610440</span>)</span><br><span class="line"></span><br><span class="line">n &lt; <span class="number">400000000000000000000000000000</span></span><br><span class="line"></span><br><span class="line">Find n.</span><br></pre></td></tr></table></figure><p>由于不知道B，第一步就是解决B，通过重新排列椭圆曲线方程：</p><p><strong>y<sup>2</sup> = x<sup>3</sup> + ax +b mod n</strong></p><p><strong>b = y<sup>2</sup> − x<sup>3</sup> − ax mod n</strong></p><p>在Sage中，可以通过替换 x 和 y 值求出 b，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">M = <span class="number">93556643250795678718734474880013829509320385402690660619699653921022012489089</span></span><br><span class="line">A = <span class="number">66001598144012865876674115570268990806314506711104521036747533612798434904785</span></span><br><span class="line">P = (<span class="number">56027910981442853390816693056740903416379421186644480759538594137486160388926</span>, <span class="number">65533262933617146434438829354623658858649726233622196512439589744498050226926</span>)</span><br><span class="line"></span><br><span class="line">x,y = P[<span class="number">0</span>],P[<span class="number">1</span>]</span><br><span class="line">b = (y^<span class="number">2</span> - x^<span class="number">3</span> - A*x) % M</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="comment">#25255205054024371783896605039267101837972419055969636393425590261926131199030</span></span><br></pre></td></tr></table></figure><p>再求P的阶，然后将其分解，Sage如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">M = <span class="number">93556643250795678718734474880013829509320385402690660619699653921022012489089</span></span><br><span class="line">A = <span class="number">66001598144012865876674115570268990806314506711104521036747533612798434904785</span></span><br><span class="line">B = <span class="number">25255205054024371783896605039267101837972419055969636393425590261926131199030</span></span><br><span class="line">P = (<span class="number">56027910981442853390816693056740903416379421186644480759538594137486160388926</span>, <span class="number">65533262933617146434438829354623658858649726233622196512439589744498050226926</span>)</span><br><span class="line">Q = (<span class="number">61124499720410964164289905006830679547191538609778446060514645905829507254103</span>, <span class="number">2595146854028317060979753545310334521407008629091560515441729386088057610440</span>)</span><br><span class="line"></span><br><span class="line">F = FiniteField(M)</span><br><span class="line">E = EllipticCurve(F,[A,B])</span><br><span class="line">P = E.point(P)</span><br><span class="line">Q = E,point(Q)</span><br><span class="line">P.order()</span><br><span class="line"><span class="comment">#93556643250795678718734474880013829509196181230338248789325711173791286325820</span></span><br><span class="line">factor(P.order())</span><br><span class="line"><span class="comment">#2^2 * 3 * 5 * 7 * 137 * 593 * 24337 * 25589 * 3637793 * 5733569 * 106831998530025000830453 * 1975901744727669147699767</span></span><br></pre></td></tr></table></figure><p>之后就是求分解后对应的阶下也就是P<sub>0</sub>对应的l<sub>i</sub>了，这个我们也可以用sage里的discrete_log()函数来直接完成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">primes = [<span class="number">4</span>, <span class="number">3</span> , <span class="number">5</span> , <span class="number">7</span> , <span class="number">137</span> , <span class="number">593</span> , <span class="number">24337</span> , <span class="number">25589</span> , <span class="number">3637793</span> , <span class="number">5733569</span> ,<span class="number">106831998530025000830453</span> , <span class="number">1975901744727669147699767</span>]</span><br><span class="line">dlogs = []</span><br><span class="line"><span class="keyword">for</span> fac <span class="keyword">in</span> primes:</span><br><span class="line">t = <span class="built_in">int</span>(P.order())/<span class="built_in">int</span>(fac)</span><br><span class="line">    dlog = discrete_log(t*Q,t*P,operation = <span class="string">&quot;+&quot;</span>)</span><br><span class="line">    dlogs += [dlog]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;factor:&quot;</span> + <span class="built_in">str</span>(fac) + <span class="string">&quot;,Discrete Log:&quot;</span> + <span class="built_in">str</span>(dlog))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">factor:4,Discrete Log:2</span></span><br><span class="line"><span class="string">factor:3,Discrete Log:1</span></span><br><span class="line"><span class="string">factor:5,Discrete Log:4</span></span><br><span class="line"><span class="string">factor:7,Discrete Log:1</span></span><br><span class="line"><span class="string">factor:137,Discrete Log:129</span></span><br><span class="line"><span class="string">factor:593,Discrete Log:224</span></span><br><span class="line"><span class="string">factor:24337,Discrete Log:5729</span></span><br><span class="line"><span class="string">factor:25589,Discrete Log:13993</span></span><br><span class="line"><span class="string">factor:3637793,Discrete Log:1730599</span></span><br><span class="line"><span class="string">factor:5733569,Discrete Log:4590572</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>我们发现有两个阶的l<sub>i</sub>没有算出来，不过这并不影响我们得到结果，得到了这些以后我们就可以利用中国剩余定理来求解了，可以直接在sage里调用crt函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">primes = [<span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">137</span>, <span class="number">593</span>, <span class="number">24337</span>, <span class="number">25589</span>, <span class="number">3637793</span>, <span class="number">5733569</span>]</span><br><span class="line">dlogs = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">129</span>, <span class="number">224</span>, <span class="number">5729</span>, <span class="number">13993</span>, <span class="number">1730599</span>, <span class="number">4590572</span>]</span><br><span class="line">crt(dlogs,primes)</span><br><span class="line"><span class="comment">#152977126447386808276536247114</span></span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">M = <span class="number">93556643250795678718734474880013829509320385402690660619699653921022012489089</span></span><br><span class="line">A = <span class="number">66001598144012865876674115570268990806314506711104521036747533612798434904785</span></span><br><span class="line">B = <span class="number">25255205054024371783896605039267101837972419055969636393425590261926131199030</span></span><br><span class="line">P = (<span class="number">56027910981442853390816693056740903416379421186644480759538594137486160388926</span>, <span class="number">65533262933617146434438829354623658858649726233622196512439589744498050226926</span>)</span><br><span class="line">Q = (<span class="number">61124499720410964164289905006830679547191538609778446060514645905829507254103</span>, <span class="number">2595146854028317060979753545310334521407008629091560515441729386088057610440</span>)</span><br><span class="line">F = FiniteField(M)</span><br><span class="line">E = EllipticCurve(F,[A,B])</span><br><span class="line">P = E.point(P)</span><br><span class="line">Q = E.point(Q)</span><br><span class="line">factors, exponents = <span class="built_in">zip</span>(*factor(E.order()))</span><br><span class="line">primes = [factors[i] ^ exponents[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(factors))][:-<span class="number">2</span>]</span><br><span class="line">dlogs = []</span><br><span class="line"><span class="keyword">for</span> fac <span class="keyword">in</span> primes:</span><br><span class="line">    t = <span class="built_in">int</span>(P.order()) / <span class="built_in">int</span>(fac)</span><br><span class="line">    dlog = discrete_log(t*Q,t*P,operation=<span class="string">&quot;+&quot;</span>)</span><br><span class="line">    dlogs += [dlog]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;factor: &quot;</span>+<span class="built_in">str</span>(fac)+<span class="string">&quot;, Discrete Log: &quot;</span>+<span class="built_in">str</span>(dlog)) <span class="comment">#calculates discrete logarithm for each prime order</span></span><br><span class="line"></span><br><span class="line">l = crt(dlogs,primes)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="crypto" scheme="https://alic3-myth.github.io/categories/crypto/"/>
    
    
    <category term="crypto" scheme="https://alic3-myth.github.io/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>刷题笔记</title>
    <link href="https://alic3-myth.github.io/project/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    <id>https://alic3-myth.github.io/project/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</id>
    <published>2024-09-19T10:13:00.000Z</published>
    <updated>2024-09-21T07:45:43.234Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="nssctf"><a class="markdownIt-Anchor" href="#nssctf"></a> NSSCTF:</h1><h2 id="swpuctf-2022-新生赛小明文"><a class="markdownIt-Anchor" href="#swpuctf-2022-新生赛小明文"></a> [SWPUCTF 2022 新生赛]小明文</h2><p>附件中给出了e=3和c的值，但没有n</p><p>可以判断为小明文爆破，根据c+kn = m^e</p><p>通过对m开e次方根，如果得到整数，则我们得到对应的flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime,long_to_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deco</span>(<span class="params">c,e,n</span>):</span><br><span class="line">    k=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        m=c+n*k</span><br><span class="line">        result,flag=gmpy2.iroot(m,e)</span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        k+=<span class="number">1</span></span><br><span class="line">e=<span class="number">3</span></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">c = <span class="number">128198926274489803523728445192921664</span></span><br><span class="line"></span><br><span class="line">m=deco(c,e,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="swpuctf-2022-新生赛yafu分解"><a class="markdownIt-Anchor" href="#swpuctf-2022-新生赛yafu分解"></a> [SWPUCTF 2022 新生赛]yafu分解</h2><p>我们直接用yafu分解出q,p，解密后得到<code>AFFPGS&#123;snzv1l_ov9_gur_g0_Jr1p0zr&#125;</code></p><p>然后通过凯撒或者Rot13解密得到<code>NSSCTF&#123;fami1y_bi9_the_t0_We1c0me&#125;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">n=<span class="number">1851012829537540993346897265450988006921329733937556249710137670254755668838970157221</span></span><br><span class="line">c=<span class="number">1165608868963663237838494928147497339359377331987999335624507621030816298293537918937</span></span><br><span class="line">p=<span class="number">1358730637766188714476624560503309609820513</span></span><br><span class="line">q=<span class="number">1362310363870711901033415700690289289304517</span></span><br><span class="line">Phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(e,Phi)</span><br><span class="line">m=<span class="built_in">pow</span>(c,d,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="swpuctf-2022-新生赛aes"><a class="markdownIt-Anchor" href="#swpuctf-2022-新生赛aes"></a> [SWPUCTF 2022 新生赛]AES</h2><p><code>pad部分</code>是用来用空格补全到16位的，相应的解密时就需要用<code>rstrip()</code>来删除末尾空格</p><p><code>AES_en部分</code>则是加密部分，先用CBC模式新建了一个<code>AES_obj</code>的实例，</p><p><code>AES_obj.encrypt(data.encode(&quot;utf-8&quot;))</code> 这一行代码使用了之前创建的AES对象 (<code>AES_obj</code>) 来加密输入的数据 (<code>data</code>)。让我们详细解释这个操作：</p><ol><li><code>data.encode(&quot;utf-8&quot;)</code>: 将输入的数据 <code>data</code> 转换为UTF-8编码的字节序列。AES加密要求输入数据为字节序列，而不是字符串。</li><li><code>AES_obj.encrypt(...)</code>: 这是AES对象的方法，用于对数据进行加密。它接受一个字节序列作为输入，并返回加密后的字节序列。在这里，输入是通过UTF-8编码的数据。</li></ol><p><code>AES_en_str = base64.b64encode(AES_en_str)</code>则是解码base64的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_decrypt</span>(<span class="params">key,iv,enc_data</span>):</span><br><span class="line">    cipher=AES.new(key.encode(<span class="string">&#x27;utf-8&#x27;</span>),AES.MODE_CBC,iv.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    enc_data=base64.b64decode(enc_data)</span><br><span class="line">    dec_data=cipher.decrypt(enc_data).rstrip()</span><br><span class="line">    <span class="keyword">return</span> dec_data.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">iv = <span class="string">&#x27;1229002635654321&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;nssctfneedcrypto&#x27;</span></span><br><span class="line">enc_data=<span class="string">&#x27;862EoKZMO3sqpNlzyvIW5G/8MFeAI/zgGXcgi5eNOL8=&#x27;</span></span><br><span class="line"></span><br><span class="line">decrypted_data=aes_decrypt(key,iv,enc_data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(decrypted_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="hubuctf-2022-新生赛baby_encrypt"><a class="markdownIt-Anchor" href="#hubuctf-2022-新生赛baby_encrypt"></a> [HUBUCTF 2022 新生赛]baby_encrypt</h2><p>题目提示的是加法，推测为前缀和<code>781612443113954655886887407898899451044114412011257135914071455155316031651170318041861191719652013207021272183228423832485254125932643269827992924</code></p><p>进行分割，为了方便解码，在一开始加一个0</p><p>构造序列为<code>0 78 161 244 311 395 465 588 688 740 789 889 945 1044 1144 1201 1257 1359 1407 1455 1553 1603 1651 1703 1804 1861 1917 1965 2013 2070 2127 2183 2284 2383 2485 2541 2593 2643 2698 2799 2924 -1</code></p><p>然后前后做差后转字符</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string flag;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> pre=<span class="number">0</span>,now=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;now)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(now==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(now==<span class="number">-1</span>)<span class="keyword">break</span>;</span><br><span class="line">flag+=(<span class="type">char</span>)(now-pre);</span><br><span class="line">pre=now;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;flag;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="swpuctf-2022-新生赛爆破md5"><a class="markdownIt-Anchor" href="#swpuctf-2022-新生赛爆破md5"></a> [SWPUCTF 2022 新生赛]爆破MD5</h2><p>附件中可见是MD5爆破</p><p><code>data='Boom_MD5****' flag=MD5(data) print(flag) #0618ac93d4631df725bceea74d0*****</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">dic=<span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_&#125;&#123;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> a1 <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="keyword">for</span> a2 <span class="keyword">in</span> dic:</span><br><span class="line">        <span class="keyword">for</span> a3 <span class="keyword">in</span> dic:</span><br><span class="line">            <span class="keyword">for</span> a4 <span class="keyword">in</span> dic:</span><br><span class="line">                s=<span class="string">&#x27;Boom_MD5&#x27;</span>+a1+a2+a3+a4</span><br><span class="line">                m=hashlib.md5(s.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;0618ac93d4631df725bceea74d0&#x27;</span> <span class="keyword">in</span> m:</span><br><span class="line">                    <span class="built_in">print</span>(m)</span><br><span class="line">                    exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="uuctf-2022-新生赛easy_base64"><a class="markdownIt-Anchor" href="#uuctf-2022-新生赛easy_base64"></a> [UUCTF 2022 新生赛]Easy_base64</h2><p>base64加密后有个前后异或的加密，但除了开头第一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">enc = [<span class="number">55</span> ,<span class="number">21</span> ,<span class="number">16</span>, <span class="number">50</span> ,<span class="number">105</span> ,<span class="number">71</span>, <span class="number">14</span>, <span class="number">27</span> ,<span class="number">41</span> ,<span class="number">30</span>, <span class="number">34</span> ,<span class="number">16</span>, <span class="number">50</span>, <span class="number">111</span> ,<span class="number">74</span> ,<span class="number">62</span>, <span class="number">5</span> ,<span class="number">18</span> ,<span class="number">54</span>, <span class="number">52</span>, <span class="number">106</span>,<span class="number">85</span> ,<span class="number">31</span>, <span class="number">54</span> ,<span class="number">24</span>, <span class="number">111</span>, <span class="number">83</span>, <span class="number">11</span>, <span class="number">38</span>, <span class="number">1</span>, <span class="number">53</span>, <span class="number">17</span>, <span class="number">37</span>, <span class="number">17</span>, <span class="number">35</span>, <span class="number">47</span>, <span class="number">32</span>, <span class="number">52</span>, <span class="number">40</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">59</span>, <span class="number">47</span>, <span class="number">54</span>, <span class="number">25</span>, <span class="number">111</span>, <span class="number">77</span>, <span class="number">16</span>, <span class="number">48</span>, <span class="number">26</span>, <span class="number">33</span>, <span class="number">9</span>, <span class="number">55</span>, <span class="number">108</span>, <span class="number">0</span>]</span><br><span class="line">flag = <span class="string">&quot;Z&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(<span class="built_in">ord</span>(flag[i])^enc[i])</span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(flag))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="uuctf-2022-新生赛unsafe_prime"><a class="markdownIt-Anchor" href="#uuctf-2022-新生赛unsafe_prime"></a> [UUCTF 2022 新生赛]unsafe_prime</h2><p>从附件中可知<code>n=p**3</code>，其中<code>p为质数</code></p><p>那么<strong>φ(n)= p<sup>k</sup>-p<sup>k-1</sup></strong></p><p><strong>证明</strong>：显然对于从1到p<sup>k</sup>的所有数中，除了p<sup>k-1</sup>个p的倍数以外其他数都与p<sup>k</sup>互素，所以根据<code>欧拉函数</code>的定义：<strong>φ(p<sup>k</sup>)=p<sup>k</sup>-p<sup>k-1</sup></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">n = <span class="number">1781066779141074297846071955037887396311182371062305797790413639302252321886055189043670187843106208315282055227397316083218930657040969292641990094428330517286511511741846106485971830443788363541411679523274683568732340113625424593194464460018629545968907529693143364870519531630721083893407011154181539445417439610805148961135948617691115328261432541033785402520757881586489819563221498111411690769065511011083021336493731421274742041131952523427183184133413677315203810963447656037908287875212013900845740870561508870574734100843624059414134156975073835607712519402938132401964708681236647568922173471703538744207491065165405594141287750705055447493380970194312139898574699147098202027540057477562090764694370368571887563631557761911842054442637038169316686266784299889397326811768646649462480349219937292894824766045607723468654723947999531346474969019631500665628522355198334827965770037487344994396753505248472283247731</span></span><br><span class="line">c = <span class="number">1402371150275079475353867962992356093684205278224746766691813462864343871795075217989508355749642716635931824907174189358797217546624305634264458802157933311315419673854405865092102322247505412453586251582022669511221048298234732642016439123525455296325766292112758881774720932499142635136210314142144509741404827421282969081272484330382868174392651681290127032351489627054643864671335712011990584326951285867375878235135547391155357814807654366986019707719726796289990920154227959213228064918435259919697047405788311280560319520593639968900649500117511665741073545430999580686455996145426173603547052710181735901020361145546892741579951501409108067297139928103329203429485237575169217432586580425019729120741661192297552519858305628835738911159460615968385837687234565509200392302553443089729906970894661310333276852803980265040679214814192141779678148895736682538612828771031493541256243879854624644771924477873876038496224</span></span><br><span class="line">p=gmpy2.iroot(n,<span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line">d=gmpy2.invert(e,p**<span class="number">3</span>-p**<span class="number">2</span>)</span><br><span class="line">m=<span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="swpuctf-2023-秋季新生赛easyrsa"><a class="markdownIt-Anchor" href="#swpuctf-2023-秋季新生赛easyrsa"></a> [SWPUCTF 2023 秋季新生赛]EasyRSA</h2><p>题目已经给出了p，q，e，c直接RSA解密即可</p><p><code>n=p*q</code></p><p><code>欧拉函数 Phi=φ(n)=(p-1)(q-1)</code></p><p><strong>C<sup>d</sup> mod N =M</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">p= <span class="number">122912801126049869009003839542545176400185213365268209105714006257803073428638629824801261702125287814910668428403367391355051987389837804474055637991864563803834741161217607848968821280710324766558457056004037592628178078680121173634128054936108782807954132605887275556228703383455969903056759874047110115433</span></span><br><span class="line">q= <span class="number">120790113700754477830062212762518406876786376726996249661848284428829412089402183812692045970711341815805796005449714738748110749559462448861357011272792817313060401380148108517705435100103533857957024851181447994572972501120774586405811257420853542417275740953525627232008812587423053626515513859653865873671</span></span><br><span class="line">e= <span class="number">65537</span></span><br><span class="line">c= <span class="number">7094224488947659163318199615533819770556597977720767621640224798887506152292861133457571683713587909779712343346370719403811813233693263526316785431883833118583425528830238629831001255198236686372518770451273159769779374149881346761523688131115323441973953523582174059584087249568245044443295176738493785560215046375056269378223045128094953923926250055718405799885041115025529297362914403732661935017257507786348635366480744933193471899621592092711962814949533564454932121056035003021428158830645604347966849572981124877683317022116903132719663958775850982016292384237647664448371811915879714093710876989697939277005</span></span><br><span class="line"></span><br><span class="line">n=p*q</span><br><span class="line">Phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(e,Phi)</span><br><span class="line">m=gmpy2.powmod(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="鹤城杯-2021crazy_rsa_tech"><a class="markdownIt-Anchor" href="#鹤城杯-2021crazy_rsa_tech"></a> [鹤城杯 2021]Crazy_Rsa_Tech</h2><p><code>加密指数e很小，且只有一个</code>；</p><p><code>拿到了多组n和c，且模数n不同，但使用相同的加密指数e进行多次加密</code></p><p>==》<strong>低加密指数广播攻击</strong></p><p>我们要用到的知识点是：<strong>中国剩余定理(CRT)</strong></p><p>系统来说解法就是：</p><p>​<code>M1 = m2 * m3；M2 = m1 * m3 ；M3 = m1 * m2；……</code></p><p>​<code>设t1为M1的模m1逆元(t1*M1 ≡ 1 mod m1)，t2，t3……</code></p><p>​<code>则 x=a * M1 * t1 + b * M2 * t2+ ……-k * m1 * m2 * m3*……（适当选择k使得x为最小值）</code></p><p>​<code>即 x= (a * M1 * t1 + b * M2 * t2 +……) mod ( m1 * m2 * m3 *……)</code></p><p><code>d,r,t=gmpy2.gcdext(n,m):</code></p><p>​<strong>d</strong>为n和m的最大公约数，<strong>r</strong>和<strong>t</strong>是满足<code>n*r + m*t = d</code>的一对贝祖系数，如果 <code>n</code> 和 <code>m</code> 互质，那么 <code>t</code> 就是 <code>m</code> 相对于 <code>n</code> 的乘法逆元，而 <code>r</code> 则是 <code>n</code> 相对于 <code>m</code> 的乘法逆元</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">e=<span class="number">9</span></span><br><span class="line">n_list=[</span><br><span class="line"><span class="number">71189786319102608575263218254922479901008514616376166401353025325668690465852130559783959409002115897148828732231478529655075366072137059589917001875303598680931962384468363842379833044123189276199264340224973914079447846845897807085694711541719515881377391200011269924562049643835131619086349617062034608799</span>, <span class="number">92503831027754984321994282254005318198418454777812045042619263533423066848097985191386666241913483806726751133691867010696758828674382946375162423033994046273252417389169779506788545647848951018539441971140081528915876529645525880324658212147388232683347292192795975558548712504744297104487514691170935149949</span>, <span class="number">100993952830138414466948640139083231443558390127247779484027818354177479632421980458019929149817002579508423291678953554090956334137167905685261724759487245658147039684536216616744746196651390112540237050493468689520465897258378216693418610879245129435268327315158194612110422630337395790254881602124839071919</span>, <span class="number">59138293747457431012165762343997972673625934330232909935732464725128776212729547237438509546925172847581735769773563840639187946741161318153031173864953372796950422229629824699580131369991913883136821374596762214064774480548532035315344368010507644630655604478651898097886873485265848973185431559958627423847</span>, <span class="number">66827868958054485359731420968595906328820823695638132426084478524423658597714990545142120448668257273436546456116147999073797943388584861050133103137697812149742551913704341990467090049650721713913812069904136198912314243175309387952328961054617877059134151915723594900209641163321839502908705301293546584147</span>, <span class="number">120940513339890268554625391482989102665030083707530690312336379356969219966820079510946652021721814016286307318930536030308296265425674637215009052078834615196224917417698019787514831973471113022781129000531459800329018133248426080717653298100515701379374786486337920294380753805825328119757649844054966712377</span>, <span class="number">72186594495190221129349814154999705524005203343018940547856004977368023856950836974465616291478257156860734574686154136925776069045232149725101769594505766718123155028300703627531567850035682448632166309129911061492630709698934310123778699316856399909549674138453085885820110724923723830686564968967391721281</span>, <span class="number">69105037583161467265649176715175579387938714721653281201847973223975467813529036844308693237404592381480367515044829190066606146105800243199497182114398931410844901178842049915914390117503986044951461783780327749665912369177733246873697481544777183820939967036346862056795919812693669387731294595126647751951</span>, <span class="number">76194219445824867986050004226602973283400885106636660263597964027139613163638212828932901192009131346530898961165310615466747046710743013409318156266326090650584190382130795884514074647833949281109675170830565650006906028402714868781834693473191228256626654011772428115359653448111208831188721505467497494581</span></span><br><span class="line">]</span><br><span class="line">c_list=[</span><br><span class="line"><span class="number">62580922178008480377006528793506649089253164524883696044759651305970802215270721223149734532870729533611357047595181907404222690394917605617029675103788705320032707977225447998111744887898039756375876685711148857676502670812333076878964148863713993853526715855758799502735753454247721711366497722251078739585</span>, <span class="number">46186240819076690248235492196228128599822002268014359444368898414937734806009161030424589993541799877081745454934484263188270879142125136786221625234555265815513136730416539407710862948861531339065039071959576035606192732936477944770308784472646015244527805057990939765708793705044236665364664490419874206900</span>, <span class="number">85756449024868529058704599481168414715291172247059370174556127800630896693021701121075838517372920466708826412897794900729896389468152213884232173410022054605870785910461728567377769960823103334874807744107855490558726013068890632637193410610478514663078901021307258078678427928255699031215654693270240640198</span>, <span class="number">14388767329946097216670270960679686032536707277732968784379505904021622612991917314721678940833050736745004078559116326396233622519356703639737886289595860359630019239654690312132039876082685046329079266785042428947147658321799501605837784127004536996628492065409017175037161261039765340032473048737319069656</span>, <span class="number">1143736792108232890306863524988028098730927600066491485326214420279375304665896453544100447027809433141790331191324806205845009336228331138326163746853197990596700523328423791764843694671580875538251166864957646807184041817863314204516355683663859246677105132100377322669627893863885482167305919925159944839</span>, <span class="number">2978800921927631161807562509445310353414810029862911925227583943849942080514132963605492727604495513988707849133045851539412276254555228149742924149242124724864770049898278052042163392380895275970574317984638058768854065506927848951716677514095183559625442889028813635385408810698294574175092159389388091981</span>, <span class="number">16200944263352278316040095503540249310705602580329203494665614035841657418101517016718103326928336623132935178377208651067093136976383774189554806135146237406248538919915426183225265103769259990252162411307338473817114996409705345401251435268136647166395894099897737607312110866874944619080871831772376466376</span>, <span class="number">31551601425575677138046998360378916515711528548963089502535903329268089950335615563205720969393649713416910860593823506545030969355111753902391336139384464585775439245735448030993755229554555004154084649002801255396359097917380427525820249562148313977941413268787799534165652742114031759562268691233834820996</span>, <span class="number">25288164985739570635307839193110091356864302148147148153228604718807817833935053919412276187989509493755136905193728864674684139319708358686431424793278248263545370628718355096523088238513079652226028236137381367215156975121794485995030822902933639803569133458328681148758392333073624280222354763268512333515</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CRT</span>(<span class="params">items</span>):</span><br><span class="line">    N =  reduce(<span class="keyword">lambda</span> x,y:x*y,(i[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> items))</span><br><span class="line">    result=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> a, n <span class="keyword">in</span> items:</span><br><span class="line">        m = N//n</span><br><span class="line">        d,r,t=gmpy2.gcdext(n,m)</span><br><span class="line">        <span class="keyword">if</span> d!=<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&#x27;Input not pairwise co-prime&#x27;</span>)</span><br><span class="line">        result += a*m*t</span><br><span class="line">    <span class="keyword">return</span> result % N, N</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data=<span class="built_in">list</span>(<span class="built_in">zip</span>(c_list,n_list))</span><br><span class="line">x,n = CRT(data)</span><br><span class="line">m=gmpy2.iroot(gmpy2.mpz(x),e)[<span class="number">0</span>].digits()</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><h2 id="swpuctf-2023-秋季新生赛小明文"><a class="markdownIt-Anchor" href="#swpuctf-2023-秋季新生赛小明文"></a> [SWPUCTF 2023 秋季新生赛]小明文？</h2><h3 id="franklin-reiter相关信息攻击"><a class="markdownIt-Anchor" href="#franklin-reiter相关信息攻击"></a> <strong>Franklin-Reiter相关信息攻击</strong></h3><ul><li><code>如果两个信息之间存在已知的固定差异，并且在相同的模数n下进行RSA加密，那么就有可能恢复出这两个消息</code></li><li><code>简单点说就是m和m+a两个明文在相同的e和n下进行加密，那么m就可以破解</code></li></ul><p><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/4d9cb6a54246a9e8e4019ae9b6be66a8.png" alt="4d9cb6a54246a9e8e4019ae9b6be66a8" / loading="lazy"></p><p><strong>sagemath运行：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">13026126941826887019162872735099540876106694302074884925200107036130428843197729140372377590706535217469477301361486550282890330093772372813532795303163348233096919179478061917423707929667355386062657434467799360617526194768968700908096844475960205671302377364202483195391706116078632202015938962280529309403244885363904094804118278167720593581764017089021116316636464533785051436622916960956665030100255641288863474938703</span></span><br><span class="line">a = <span class="number">280807370135687531454416708417179457159</span></span><br><span class="line">b = <span class="number">210598260561987226227971066630761929397</span></span><br><span class="line">c1 = <span class="number">5484670538103757119990644460454986219076673914082966464351809153114702100411054106785392646801736865489738145857425179185164710603704198643749378051371008266521829572436350080663825339915763509501690398283916091505443322384568973565599179112299853287766734493187659418383619877040013434926843623979979122417950089001830664273269598688130410251828579862218274297572192961909808728768317567218412746711665911495028223620671</span></span><br><span class="line">c2 = <span class="number">249587944874112168607313602465869274336587750392364868939732783502223999305089384749508572630699199927194600499968110646290832205640569694933539973256281796631433129626712361622584048439446364992886884217198680921278383770604919381329363647924261642857483728973331091285820401689502291336332199019252649615680893389557508558362194551939434128389351824194393680744241807605416750291337127085044177563509645273228457253193</span></span><br><span class="line">e = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">franklin_reiter</span>(<span class="params">n, a, b, c1, c2, e</span>):</span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    g1 = (x)^e - c1</span><br><span class="line">    g2 = (a*x+b)^e - c2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">a,b</span>):</span><br><span class="line">        <span class="keyword">while</span> b:</span><br><span class="line">            a,b=b,a%b</span><br><span class="line">        <span class="keyword">return</span> a.monic()</span><br><span class="line">    <span class="keyword">return</span> -gcd(g1,g2)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">m=franklin_reiter(n, a, b, c1, c2, e)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br></pre></td></tr></table></figure><p>得到长整型结果然后转字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">m=<span class="number">2806865643354785582447058473372538382961766115574914049099282462437697164397424611542516856194548817486973</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="swpuctf-2022-新生赛welcome-to-modern-cryptography"><a class="markdownIt-Anchor" href="#swpuctf-2022-新生赛welcome-to-modern-cryptography"></a> [SWPUCTF 2022 新生赛]Welcome to Modern Cryptography</h2><p>提供了公钥和私钥，直接利用在线RSA解密即可</p><p><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240807193447652.png" alt="image-20240807193447652" / loading="lazy"></p><h2 id="swpuctf-2023-秋季新生赛dpdp"><a class="markdownIt-Anchor" href="#swpuctf-2023-秋季新生赛dpdp"></a> [SWPUCTF 2023 秋季新生赛]dpdp</h2><p>dp泄露，给了n,e,c,dp</p><p><strong>公式推理</strong>：</p><p><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240807203058349.png" alt="image-20240807203058349" / loading="lazy"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_q</span>(<span class="params">e, n,dp</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):</span><br><span class="line">        <span class="keyword">if</span>(e*dp%x==<span class="number">1</span>):</span><br><span class="line">            p=(e*dp-<span class="number">1</span>)//x+<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span>(n%p!=<span class="number">0</span>):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            q=n//p</span><br><span class="line">    <span class="keyword">return</span> q</span><br><span class="line"></span><br><span class="line">n = <span class="number">62950660589752377241535942010457460675378335694404721223426371627802159493655570041534480026979837056215567303530448462076388942749116962945931432723672826148999814815864738069663127706046027850586024555861960247057288826014343547293035737544457656904257388300461848219257240252715837662741274235378360898441</span></span><br><span class="line">c = <span class="number">26392919777656338278184497106215581599692023606797351841011065350738534402079717897589592521000832026751736045905247050532819571969784687491977953157313304550096179520376626220816081159472339787295872214912587497324709488986746768994907107727184468228540635002062232484115731701648311946527233449512543132274</span></span><br><span class="line">dp = <span class="number">7088497034630351463006975624795947102639056977565074157092915907376477955247769847204254053775159112398217033648894620506901638351932922911273150932128973</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">q = get_q(e, n, dp)</span><br><span class="line">p = n//q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="uuctf-2022-新生赛impossible_rsa"><a class="markdownIt-Anchor" href="#uuctf-2022-新生赛impossible_rsa"></a> [UUCTF 2022 新生赛]Impossible_RSA</h2><ul><li>从已知条件可得到两个方程：<ol><li><code>n=p*q</code></li><li><code>leak3=p+q</code></li></ol></li></ul><p>​根据这个即可解出<code>p</code>（或者<code>q</code>）</p><ul><li><p>由于缺少了密文<code>c</code>，我们可以通过<code>中国剩余定理</code>得到，此处采用sage内置的crt()</p></li><li><p>由于缺少了e，但给定了e的范围，且范围不是很大，可以爆破得到</p></li></ul><p>以下部分中：</p><p>​1.注释部分利用sympy库的solve解出p（或q）</p><p>​2.<code>c=[int(crt([leak1,leak2],[p,q])),int(crt([leak1,leak2],[q,p]))]</code>由于无法确定第一步得到的是p还是q，所以将两个结果都要算出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line">n = <span class="number">21256406304024147327122699985764737895162788854942201173538004689536569610046157311527715126074775927977409773971656249943602454790380966869525211733301201659688694473703188427037879868522859419364680904585572399937639393418586498509580133474303442722716959873727260844993296681950092753897902540593927952622713860163782763263944291810729056735965535138964485886748344167499818148134252327820007439830749462775149754781930983094046362696040641091039506998835624218220892441813224657845627120344960554424765109502415773475619490661527184126374299883610442465428985757004551740482644952396990065188807827114495184096249</span></span><br><span class="line">leak1 = <span class="number">8842431959638543756327530752221031675897458993985909403335303147413741167900365489182674478419510549838159493192002672500346433589707076289344572454304647803237654059883974235710442126617587691632375039292283285577033977676131772115877520248352227419433136507412485140428972344000541898060766721412300525883</span></span><br><span class="line">leak2 = <span class="number">127414092867622693231378230621806169422569654246682818498761930473755998913688181327473434110121174292309611256339271412324673262030535400937563769685033472683498585742711576446343086462569783541192470920638935990937187809422965809986860709074542257475025562691683977493260026623616012846939417988284096473040</span></span><br><span class="line">leak3 = <span class="number">293130152177150437492580785085598394773458388719469800871702200331766258900690595210759869625006484354799804558552583572062231998451041105464048317708732987121458633718573774164071597186461239762511364549980544029915308083867329707804739776241438307060614946195675715671343671137725809499387682363101164970886</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p=Symbol(&#x27;p&#x27;)</span></span><br><span class="line"><span class="comment"># q=Symbol(&#x27;q&#x27;)</span></span><br><span class="line"><span class="comment"># ans=solve([p*q-n,p+q-leak3],[p,q])</span></span><br><span class="line"><span class="comment"># print(ans)</span></span><br><span class="line">p=<span class="number">131567902193947737457053703919039608741727165458271604872166212865939087016959861850815713604059268499777293923208600279164674644010570874718551586480430092745439767701977059922316781232716126035386163833756203019774439784605127681828683292496816187253311811505880053923307168541440673933884409766487464694543</span></span><br><span class="line">q=n//p</span><br><span class="line">c=[<span class="built_in">int</span>(crt([leak1,leak2],[p,q])),<span class="built_in">int</span>(crt([leak1,leak2],[q,p]))]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> cc <span class="keyword">in</span> c:</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">500000</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">            d=inverse(e,phi)</span><br><span class="line">            m=<span class="built_in">pow</span>(cc,d,n)</span><br><span class="line">            flag=long_to_bytes(m)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">b&#x27;ctf&#x27;</span> <span class="keyword">in</span> flag <span class="keyword">or</span> <span class="string">b&#x27;flag&#x27;</span> <span class="keyword">in</span> flag <span class="keyword">or</span> <span class="string">b&#x27;CTF&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">                <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">except</span>:<span class="keyword">pass</span></span><br><span class="line">            </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="uuctf-2022-新生赛简单的数学"><a class="markdownIt-Anchor" href="#uuctf-2022-新生赛简单的数学"></a> [UUCTF 2022 新生赛]简单的数学</h2><p>1.<code>c=(m*p+kn)^e mod n</code></p><p>2.<code>根据二项式展开可知最后不含n的项仅有m*p</code></p><p>3.<code>c=(m*p)^e mod n</code></p><p>4.<code>m*p=c^d mod n</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">25014963863951112347974440214066273048882503259160338255496299775995961351901571648895465031685356024238885233929337483853960374743565692563404769039019561050421788096283392820458449077490390195564801845037357811298274797645813808259301937466827199149702646030007667049110326436048932024335483846993690455310182909643176845321021209137548742937430940258997221937352498631551209822079559591857076641561863821325180714184637516327495056825200929458796589533188382551310078527193764723189551017851538326522660734366263229681834096022505151628784267513086843047784002223603418978827233728149657480292961095596638702578233</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">21332979626247382647148222928588089621511790656630926013612529289276199934646065751526142377438330548167579869346422391777913473113228287023801928140946948279096562923728186040013041739656216576467903409087827269164764659636977412246373447194249307513950780025367450729199178539765363446611686879821064068711525543800807969264271445173422813211738947698740537888866771159352960700295474589207758542367193701819811125602611901272496121027126921035697692984486226677539547135753720071134145590716156803665486826826046693205511230289946748601632769198172373201803516681379607412290191420859001274915183415061321376410345</span></span><br><span class="line"></span><br><span class="line">p=gmpy2.gcd(n,c)</span><br><span class="line">q=n//p</span><br><span class="line">Phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(e,Phi)</span><br><span class="line">m=<span class="built_in">pow</span>(c,d,n)//p</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="swpuctf-2023-秋季新生赛dpdpdpdp"><a class="markdownIt-Anchor" href="#swpuctf-2023-秋季新生赛dpdpdpdp"></a> [SWPUCTF 2023 秋季新生赛]dpdpdpdp</h2><p>将已知信息放入轩禹CTF_RSA工具中，dp先放入Private(D)中，在模式中选取<code>仅dp泄露</code>得到Prime(P,Q)，在常规中计算Euler(φN)，然后右键选取计算私钥D，然后计算明文，转为字符</p><p>![](<a href="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE">https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/屏幕截图</a> 2024-08-09 134958.png)</p><h2 id="nustctf-2022-新生赛ezrsa"><a class="markdownIt-Anchor" href="#nustctf-2022-新生赛ezrsa"></a> [NUSTCTF 2022 新生赛]ezRSA</h2><p>简单分析可知，p和q差距太大了，所以N<sub>1</sub>/N<sub>2</sub>接近q<sub>1</sub>/q<sub>2</sub>，考虑用连分数逼近N<sub>1</sub>/N<sub>2</sub>，得到q<sub>1</sub>和q<sub>2</sub></p><p>尝试对N<sub>1</sub>/N<sub>2</sub> 进行连分数展开并求其各项渐进分数，记为 t<sub>i</sub>/s<sub>i</sub> 并验证 N<sub>1</sub>%t<sub>k</sub>==0 是否成立，如果成立，那么 q<sub>1</sub>=t<sub>k</sub>，q<sub>2</sub>=s<sub>k</sub>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N1 = <span class="number">3289746385054724131365721020639496300945479666755005407239362220435929471663971559131973068094267242759747682915202602265269024546168034070348080432976135403371083936361236868186476392365554734516698695915807318328547349333450125215426536032220967810893464208090339137598724593917266763998037725309967496052803477931961681761135080900299333158097292389350335121611775110493009954911832572636099153354952171029044016319029661601727739828271424563980850243898202779669776639104067478441675153857040164775196713586656673764171877161326751846236980454659960530174960321852298270258312146241360929350418220172331956030775384681767932014061291168620965347842124549316096247113770711834360498936747471888481237404034471246978342020816271785925362208839937490625070051801028223342083281773366267363149243726101075926327550718757413133631119649782144511080448476370411156544146278468602957599519708203511203435394861053372096309444985117323976240925612725880016576029876493825989064619463226166401883310383733295274652092903872304933657343307118616812213637906513530016004460475073291823916649597185291734261926576108675712303422832460766980003743958182130150811173621769221262799069912858162405156365709344847558244669016188305691537672753134766406649385330682157984720023661279153645005631349488537261911860571171672813544726579872640486753312665928030263533489558821140031095492111373847722540582741061909831250761476687</span></span><br><span class="line">N2 = <span class="number">2292263744571677490370198515319050673022350367021940229132415885393214523108231545410288799524823682686607005535541881885794949322622162858593875970155712564868530006799557973311000615581843236548539733075504282834631939435260232339940338468890310925405870533590386398071667718507612723307978025099102004513584485422609923041107028535400446355591432930994813185411831860201820145983435091523773691560011687528125877698679841462745728326159525372061320952493949821495222248383893254880735838359120880431072244214361010867779059178282739912365087421904643477215607290679708352033106358356290644004853543174075195107627794359272018100648168661860452919746052205404895413998960327066611970768862624073581670828267510841602161728589913841163473811894218339948715205301321356774629578043062238684103507006315521103670400509643518854842374093509082331379305822049420033746124157212615698602544129110388591266923967512746018551734391176602223771675279723873630468099034521371667295520830509224068753383327420799595674898227670628881521095495898465890256628288779785408613688721508315026743250146090703141554141208186588758560579281631449476819201739513661261100456398775274335050320480934180632543242116316388750179657345282978014879818574111951053767465935985181195234991374892341383106554664200986728169474150302232887629401491764905429656980077385228539526682528035467486946883267941678859904770170914569949948781798383</span></span><br><span class="line">c1 = <span class="number">758346536265430423952822486066685295768780904671958564513706915003627653309986327906604310025557676880130150973194443591153899441660221125085406078577489990064034099758898680250346992154199616929381594288918352701155172644054184374384778201304104144436102359709180739955762513436889301607686277088230852661148556440251553059814853050711377102806879036793210874472411397851504602916797481132018776755416068149801594219844674499351889997208649442043923826505239289470153001663639688739092310857881616013610569511757767780350165048282465256454770748877584119349207769812826840607665168961680724232789109312681055375411182858820698025923104994832566402422884359019460479145829812817446509615552819113705033128233093081687704471007797878802184788802106948491309583791881593217988561342681568377126606055476508381741342859362339824940846336741346126512500348868154174463810299929429409815515908136711497765026252563374327541491024303290989175383501994515761077240391195396083766760326143468930305986070405962303571534654392917816088220966950447926277802817335097304148972911332832248113849846752219065263639980629213197260594242031101803801865240157341309018859709063723920616432168289755151080828619642932516426139982777613526680161145782566883722320235485389839997229666979487071672091138823743231576011381309205283462045931376953038071401274899229258796970036565931730655471667545203734032609058125128632555918726761</span></span><br><span class="line">c2 = <span class="number">2281163375114595112593683220870779643793045914138930809669934728297504812745368657964524831965320392164027435706363680996214578180045485041532876049868691323690200562004954003143194397255512951717400899604307009993030792644670830602941543918898535970779253703220162651022293286208338299826844988619345629892007235258389532666376623514170628541968337364745860334903754371727427376399211310359996960626733244649671665175464666807399652951289553389561033148215888827057495743582318390507639029065358587166019110069479019692411629179363742708597061223484237748437654542910240974030049076975739481960903748359283570086571360417832776823264202688497555419017227144724790205424467059280453940666789219388347170532415234759731375390229140544207931837445265744016932142504371200121886182154284965893665022781184321216382767703694597553489507371271887593799060901908513758134472760311502510753557029741715193386673389466599068008750012915225818076301655694045130332321314233483042503950958442501013310465239137942770667655164906193219286435485452257047415797293472629254376873962168035382262951696816840667369861437088409243033239980128747965838367176274122593955221422537124546203553941387134587884149412499272660959871746858550851448840531698152805786123875121854564754397297726121984646669253047201515221545545683432754661774694401343486893270795112334494874407955432598253951220055000392855162417030953645428808146502304</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transform</span>(<span class="params">x,y</span>):   <span class="comment">#使用辗转相除将分数x/y转为连分数的形式</span></span><br><span class="line">res=[]</span><br><span class="line"><span class="keyword">while</span> y:</span><br><span class="line">res.append(x//y)</span><br><span class="line">x,y=y,x%y</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">continued_fraction</span>(<span class="params">sub_res</span>):</span><br><span class="line">numerator,denominator=<span class="number">1</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sub_res[::-<span class="number">1</span>]:  <span class="comment">#从sublist的后面往前循环</span></span><br><span class="line">denominator,numerator=numerator,i*numerator+denominator</span><br><span class="line"><span class="keyword">return</span> denominator,numerator   <span class="comment">#得到渐进分数的分母和分子，并返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#求解每个渐进分数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub_fraction</span>(<span class="params">x,y</span>):</span><br><span class="line">res=transform(x,y)</span><br><span class="line">res=<span class="built_in">list</span>(<span class="built_in">map</span>(continued_fraction,(res[<span class="number">0</span>:i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(res)))))  <span class="comment">#将连分数的结果逐一截取以求渐进分数</span></span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wienerAttack</span>(<span class="params">n1,n2</span>):</span><br><span class="line"><span class="keyword">for</span> (q2,q1) <span class="keyword">in</span> sub_fraction(n1,n2):  <span class="comment">#用一个for循环来注意试探n1/n2的连续函数的渐进分数，直到找到一个满足条件的渐进分数</span></span><br><span class="line"><span class="keyword">if</span> q1==<span class="number">0</span>: <span class="comment">#可能会出现连分数的第一个为0的情况，排除</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">if</span> n1%q1==<span class="number">0</span> <span class="keyword">and</span> q1!=<span class="number">1</span>: <span class="comment">#成立条件</span></span><br><span class="line"><span class="keyword">return</span> (q1,q2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;该方法不适用&quot;</span>)</span><br><span class="line"></span><br><span class="line">q1,q2 = wienerAttack(N1,N2)</span><br><span class="line">p1 = gmpy2.iroot(N1//q1,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">p2 = gmpy2.iroot(N1//q2,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">d1 = gmpy2.invert(e,p1*(p1-<span class="number">1</span>)*(q1-<span class="number">1</span>))</span><br><span class="line">d2 = gmpy2.invert(e,p2*(p2-<span class="number">1</span>)*(q2-<span class="number">1</span>))</span><br><span class="line">m1 = <span class="built_in">pow</span>(c1,d1,N1)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c2,d2,N2)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m1),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m2))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="swpuctf-2023-秋季新生赛polynomial"><a class="markdownIt-Anchor" href="#swpuctf-2023-秋季新生赛polynomial"></a> [SWPUCTF 2023 秋季新生赛]polynomial</h2><p>主要是利用sympy库解多项式方程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = <span class="number">158805288384650271811274620112885426807134870587281058486409657841571541118874370262125616758392586636436387032461169543181918821693975663497124408432536495676514953509756505781488235396628730376794651046582155886825258656047349260441547239700695773934518441411466809921946609164932234396841476405798428700843</span></span><br><span class="line">a = <span class="number">6782997653971692606019358747667066963688636909392719204001155907616272998599567932030340899158310591583056298423803386927289244122405887173827359025095219</span></span><br><span class="line">b = <span class="number">7373784501270128110088353737302182289453185058537147667058852830178883492374394182313086562761123093282613985656842374554466162992585768060168515936322837</span></span><br><span class="line">c = <span class="number">12604317328077074383094898759023155531982085126299017370476099122695860476733267706510100804874716354025394150676456477445303955715981977583036765619931291</span></span><br><span class="line">d = <span class="number">8651550199315105291497863570314512750737000678752642987669418859342691686702373116147125246177399639155277789016646392989483699799276013474039473014389069</span></span><br><span class="line">e = <span class="number">6819653219987864110332165353640553980353581969662542365282269257622467162685937603557862048653003559950780009596692439320585574228684924030626160305559221</span></span><br><span class="line">y = <span class="number">187626421635118933741196210961559541641107643327742932086152135660947241144749750951157691964883138108211067837818748515766812840026814947057023367814232867155997328882540000727585104081833734697954005690818776434169815240704563337</span></span><br><span class="line">h = <span class="number">36198427687223295973782557044383345640934859884880641150183916728479006412929786917944908958646498915497129126843345300628359</span></span><br><span class="line"></span><br><span class="line">x = symbols(<span class="string">&#x27;x&#x27;</span>) <span class="comment">#定义变量x</span></span><br><span class="line"></span><br><span class="line">equation = Eq(a*x**<span class="number">4</span> + b*x**<span class="number">3</span> + c*x**<span class="number">2</span> + d*x + e, y) <span class="comment">#构造方程</span></span><br><span class="line"></span><br><span class="line">solution = solve(equation, x) <span class="comment">#解方程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> solution: <span class="comment">#打印可能的x的值</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">x = <span class="number">12896387745855437651</span></span><br><span class="line">m = h//x</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="swpuctf-2022-新生赛discetediscrete"><a class="markdownIt-Anchor" href="#swpuctf-2022-新生赛discetediscrete"></a> [SWPUCTF 2022 新生赛]DisceteDiscrete!</h2><ul><li><p>附件中可见的并非RSA加密，因为<code>c=x^m mod n</code>，明文m在指数位置，且同时还存在模运算，</p></li><li><p>为了求得m，则会进行基于同余运算和原根的一种对数运算，也就是**<code>离散对数</code>**</p></li></ul><p>本题很简单，只需直接利用sage中的内置函数<code>discrete_log()</code>即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084096</span></span><br><span class="line">x = <span class="number">9795065994886226384204904966849239623474055462495495755216573935495433269421238891934740481621010281153676351284936882958509364458306524174275663183354347</span></span><br><span class="line">c = <span class="number">12124630419477800996787439916074125902945359931344392715324003381817849996550355767138542576383623513820157574593640624060741986552381770011023574637567067</span></span><br><span class="line"></span><br><span class="line">m = discrete_log(c,mod(x,n))</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># print(long_to_bytes(m))</span></span><br></pre></td></tr></table></figure><h2 id="hgame-2022-week2rsa-attack2"><a class="markdownIt-Anchor" href="#hgame-2022-week2rsa-attack2"></a> [HGAME 2022 week2]RSA Attack2:</h2><p>task1 : 公像素数，task2:直接开根，task3:共模攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># task1</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n1 = <span class="number">14611545605107950827581005165327694782823188603151768169731431418361306231114985037775917461433925308054396970809690804073985835376464629860609710292181368600618626590498491850404503443414241455487304448344892337877422465715709154238653505141605904184985311873763495761345722155289457889686019746663293720106874227323699288277794292208957172446523420596391114891559537811029473150123641624108103676516754449492805126642552751278309634846777636042114135990516245907517377320190091400729277307636724890592155256437996566160995456743018225013851937593886086129131351582958811003596445806061492952513851932238563627194553</span></span><br><span class="line">c1 = <span class="number">965075803554932988664271816439183802328812013694203741320763105376036912584995031647672348468111310423680858101990670067065306237596121664884353679987689532305437801346923070145524106271337770666947677115752724993307387122132705797012726237073550669419110046308257408484535063515678066777681017211510981429273346928022971149411064556225001287399141306136081722471075032423079692908380267160214143720516748000734987068685104675254411687005690312116824966036851568223828884335112144637268090397158532937141122654075952730052331573980701136378212002956719295192733955673315234274064519957670199895100508623561838510479</span></span><br><span class="line">n2 = <span class="number">20937478725109983803079185450449616567464596961348727453817249035110047585580142823551289577145958127121586792878509386085178452171112455890429474457797219202827030884262273061334752493496797935346631509806685589179618367453992749753318273834113016237120686880514110415113673431170488958730203963489455418967544128619234394915820392908422974075932751838012185542968842691824203206517795693893863945100661940988455695923511777306566419373394091907349431686646485516325575494902682337518438042711296437513221448397034813099279203955535025939120139680604495486980765910892438284945450733375156933863150808369796830892363</span></span><br><span class="line">c2 = <span class="number">11536506945313747180442473461658912307154460869003392732178457643224057969838224601059836860883718459986003106970375778443725748607085620938787714081321315817144414115589952237492448483438910378865359239575169326116668030463275817609827626048962304593324479546453471881099976644410889657248346038986836461779780183411686260756776711720577053319504691373550107525296560936467435283812493396486678178020292433365898032597027338876045182743492831814175673834198345337514065596396477709839868387265840430322983945906464646824470437783271607499089791869398590557314713094674208261761299894705772513440948139429011425948090</span></span><br><span class="line"></span><br><span class="line">q = GCD(n1,n2)</span><br><span class="line">p = n1//q</span><br><span class="line">Phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = invert(e,Phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c1,d,n1)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># task2</span></span><br><span class="line">e = <span class="number">7</span></span><br><span class="line">n = <span class="number">14157878492255346300993349653813018105991884577529909522555551468374307942096214964604172734381913051273745228293930832314483466922529240958994897697475939867025561348042725919663546949015024693952641936481841552751484604123097148071800416608762258562797116583678332832015617217745966495992049762530373531163821979627361200921544223578170718741348242012164115593777700903954409103110092921578821048933346893212805071682235575813724113978341592885957767377587492202740185970828629767501662195356276862585025913615910839679860669917255271734413865211340126544199760628445054131661484184876679626946360753009512634349537</span></span><br><span class="line">c = <span class="number">10262871020519116406312674685238364023536657841034751572844570983750295909492149101500869806418603732181350082576447594766587572350246675445508931577670158295558641219582729345581697448231116318080456112516700717984731655900726388185866905989088504004805024490513718243036445638662260558477697146032055765285263446084259814560197549018044099935158351931885157616527235283229066145390964094929007056946332051364474528453970904251050605631514869007890625</span></span><br><span class="line"></span><br><span class="line">m = iroot(c,e)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment"># task3</span></span><br><span class="line">n = <span class="number">18819509188106230363444813350468162056164434642729404632983082518225388069544777374544142317612858448345344137372222988033366528086236635213756227816610865045924357232188768913642158448603346330462535696121739622702200540344105464126695432011739181531217582949804939555720700457350512898322376591813135311921904580338340203569582681889243452495363849558955947124975293736509426400460083981078846138740050634906824438689712748324336878791622676974341814691041262280604277357889892211717124319329666052810029131172229930723477981468761369516771720250571713027972064974999802168017946274736383148001865929719248159075729</span></span><br><span class="line">e1 = <span class="number">2519901323</span></span><br><span class="line">c1 = <span class="number">3230779726225544872531441169009307072073754578761888387983403206364548451496736513905460381907928107310030086346589351105809028599650303539607581407627819797944337398601400510560992462455048451326593993595089800150342999021874734748066692962362650540036002073748766509347649818139304363914083879918929873577706323599628031618641793074018304521243460487551364823299685052518852685706687800209505277426869140051056996242882132616256695188870782634310362973153766698286258946896866396670872451803114280846709572779780558482223393759475999103607704510618332253710503857561025613632592682931552228150171423846203875344870</span></span><br><span class="line">e2 = <span class="number">3676335737</span></span><br><span class="line">c2 = <span class="number">940818595622279161439836719641707846790294650888799822335007385854166736459283129434769062995122371073636785371800857633841379139761091890426137981113087519934854663776695944489430385663011713917022574342380155718317794204988626116362865144125136624722782309455452257758808172415884403909840651554485364309237853885251876941477098008690389600544398998669635962495989736021020715396415375890720335697504837045188626103142204474942751410819466379437091569610294575687793060945525108986660851277475079994466474859114092643797418927645726430175928247476884879817034346652560116597965191204061051401916282814886688467861</span></span><br><span class="line"></span><br><span class="line">gcd,r,s = gcdext(e1,e2)</span><br><span class="line">m = <span class="built_in">pow</span>(c1,r,n)*<span class="built_in">pow</span>(c2,s,n)%n</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="hgame-2022-week3rsa-attack-3"><a class="markdownIt-Anchor" href="#hgame-2022-week3rsa-attack-3"></a> [HGAME 2022 week3]RSA attack 3:</h2><p>连分数攻击</p><p>n和e的位数差不多</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">n = ...</span><br><span class="line">e = ...</span><br><span class="line">c = ...</span><br><span class="line"></span><br><span class="line">cf = continued_fraction(Integer(e)/Integer(n))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="built_in">len</span>(cf))):</span><br><span class="line">    d = cf.denominator(i)</span><br><span class="line">    k = cf.numerator(i)</span><br><span class="line">    <span class="keyword">if</span> d.bit_length() == <span class="number">64</span> <span class="keyword">and</span> isPrime(d):</span><br><span class="line">        <span class="built_in">print</span>(d)</span><br><span class="line">       </span><br><span class="line">d = <span class="number">13094612077654083919</span></span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="黑盾杯-2020factor"><a class="markdownIt-Anchor" href="#黑盾杯-2020factor"></a> [黑盾杯 2020]Factor:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#yafu分解得到三个质因数</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">3454083680130687060405946528826790951695785465926614724373</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c = <span class="number">1347530713288996422676156069761604101177635382955634367208</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">17100682436035561357</span></span><br><span class="line">q = <span class="number">11761833764528579549</span></span><br><span class="line">r = <span class="number">17172929050033177661</span></span><br><span class="line"><span class="comment">#但发现无法求逆元，应该是Phi有因子跟e不互素</span></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line">Phi = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [p,q,r]:</span><br><span class="line">    <span class="keyword">if</span> GCD(e,i-<span class="number">1</span>) == <span class="number">1</span>:</span><br><span class="line">        n *= i</span><br><span class="line">    Phi *= i-<span class="number">1</span></span><br><span class="line">d = invert(e,Phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="fsctf-2023兔帽的奇妙冒险"><a class="markdownIt-Anchor" href="#fsctf-2023兔帽的奇妙冒险"></a> [FSCTF 2023]兔帽的奇妙冒险:</h2><p>base64解密的结果加一个<code>U2FsdGVkX18</code>(rabbit 头)后rabbit解密</p><h2 id="litctf-2023euler"><a class="markdownIt-Anchor" href="#litctf-2023euler"></a> [LitCTF 2023]Euler:</h2><p><strong>c = pow(m,n-p-q+3,n)</strong> 其中， n=p * q, <strong>n-p-q+3=(p-1)*(q-1)+2</strong></p><p>故有： **c = m^( (p-1)*(q-1)+2 )%n **</p><p>根据欧拉定理，<strong>m^( (p-1)*(q-1) ) = m^phi = 1%n</strong> 故有： c = m^2%n 因此，可以直接对c进行开方，爆破求解得到m。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line">n = <span class="number">115140122725890943990475192890188343698762004010330526468754961357872096040956340092062274481843042907652320664917728267982409212988849109825729150839069369465433531269728824368749655421846730162477193420534803525810831025762500375845466064264837531992986534097821734242082950392892529951104643690838773406549</span></span><br><span class="line">c = <span class="number">406480424882876909664869928877322864482740577681292497936198951316587691545267772748204383995815523935005725558478033908575228532559165174398668885819826720515607326399097899572022020453298441</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65537</span>):</span><br><span class="line">    c1 = c+i*n</span><br><span class="line">    m,f = iroot(c1,<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(m).decode())</span><br><span class="line">        exit()</span><br></pre></td></tr></table></figure><h2 id="litctf-2023e的学问"><a class="markdownIt-Anchor" href="#litctf-2023e的学问"></a> [LitCTF 2023]e的学问:</h2><p>e和phi不互素数，所以要先约去公约数t</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">e = <span class="number">74</span></span><br><span class="line">p = <span class="number">86053582917386343422567174764040471033234388106968488834872953625339458483149</span></span><br><span class="line">q = <span class="number">72031998384560188060716696553519973198388628004850270102102972862328770104493</span></span><br><span class="line">c = <span class="number">3939634105073614197573473825268995321781553470182462454724181094897309933627076266632153551522332244941496491385911139566998817961371516587764621395810123</span></span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">p,q,e,c</span>):</span><br><span class="line">    n = p*q</span><br><span class="line">    phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    t = GCD(e,phi)</span><br><span class="line">    d = gmpy2.invert(e//t,phi)</span><br><span class="line">    m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">    msg = gmpy2.iroot(m,t) <span class="comment">#由于约去了公约数t，此处要进一步处理</span></span><br><span class="line">    <span class="keyword">if</span> msg[<span class="number">1</span>] == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(msg[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">decrypt(p,q,e,c)</span><br></pre></td></tr></table></figure><h2 id="litctf-2023virginia"><a class="markdownIt-Anchor" href="#litctf-2023virginia"></a> [LitCTF 2023]Virginia:</h2><p>两段不同密钥的维吉尼亚，但密钥未知，利用<code>Vigenere Solver</code>爆破</p><p><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240901093439447.png" alt="image-20240901093439447" / loading="lazy"></p><p>但发现最后还有一段是乱码，再次爆破<img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240901093529276.png" alt="image-20240901093529276" / loading="lazy"></p><p><code>My password is not a regular Caesar password,and the enc flag=[86, 116, 128, 80, 98, 85, 139, 122, 134, 114, 125, 136, 117, 123, 129, 127, 128, 128, 142, 130, 140, 147, 127, 132, 131, 136, 151, 134, 152, 164] -Caesar</code></p><p>参考ASCII码表：</p><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240901094025392.png" alt="image-20240901094025392" style="zoom: 50%;" / loading="lazy"><p>根据比赛的flag头为<code>LitCTF</code>，</p><p>发现第一个字符偏移为10，第二个为11，第三个为12……<code>属于变异凯撒</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">enc=[<span class="number">86</span>, <span class="number">116</span>, <span class="number">128</span>, <span class="number">80</span>, <span class="number">98</span>, <span class="number">85</span>, <span class="number">139</span>, <span class="number">122</span>, <span class="number">134</span>, <span class="number">114</span>, <span class="number">125</span>, <span class="number">136</span>, <span class="number">117</span>, <span class="number">123</span>, <span class="number">129</span>, <span class="number">127</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">142</span>, <span class="number">130</span>, <span class="number">140</span>, <span class="number">147</span>, <span class="number">127</span>, <span class="number">132</span>, <span class="number">131</span>, <span class="number">136</span>, <span class="number">151</span>, <span class="number">134</span>, <span class="number">152</span>, <span class="number">164</span>]</span><br><span class="line">b = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">b+=<span class="built_in">chr</span>(enc[i]-<span class="number">10</span>-i)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><h2 id="litctf-2023the-same-common-divisor-高级"><a class="markdownIt-Anchor" href="#litctf-2023the-same-common-divisor-高级"></a> [LitCTF 2023]The same common divisor (高级):</h2><p>n3 = n1 ^ n2 ,则 n2= n3 ^ n1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n1= <span class="number">9852079772293301283705208653824307027320071498525390578148444258198605733768947108049676831872672654449631852459503049139275329796717506126689710613873813880735666507857022786447784753088176997374711523987152412069255685005264853118880922539048290400078105858759506186417678959028622484823376958194324034590514104266608644398160457382895380141070373685334979803658172378382884352616985632157233900719194944197689860219335238499593658894630966428723660931647038577670614850305719449893199713589368780231046895222526070730152875112477675102652862254926169713030701937231206405968412044029177246460558028793385980934233</span></span><br><span class="line">n3= <span class="number">4940268030889181135441311597961813780480775970170156650560367030148383674257975796516865571557828263935532335958510269356443566533284856608454193676600884849913964971291145182724888816164723930966472329604608512023988191536173112847915884014445539739070437180314205284883149421228744714989392788108329929896637182055266508625177260492776962915873036873839946591259443753924970795669864031580632650140641456386202636466624658715315856453572441182758855085077441336516178544978457053552156714181607801760605521338788424464551796638531143900048375037218585999440622490119344971822707261432953755569507740550277088437182</span></span><br><span class="line">c1= <span class="number">7066425618980522033304943700150361912772559890076173881522840300333719222157667104461410726444725540513601550570478331917063911791020088865705346188662290524599499769112250751103647749860198318955619903728724860941709527724500004142950768744200491448875522031555564384426372047270359602780292587644737898593450148108629904854675417943165292922990980758572264063039172969633878015560735737699147707712154627358077477591293746136250207139049702201052305840453700782016480965369600667516646007546442708862429431724013679189842300429421340122052682391471347471758814138218632022564279296594279507382548264409296929401260</span></span><br><span class="line">c2= <span class="number">854668035897095127498890630660344701894030345838998465420605524714323454298819946231147930930739944351187708040037822108105697983018529921300277486094149269105712677374751164879455815185393395371001495146490416978221501351569800028842842393448555836910486037183218754013655794027528039329299851644787006463456162952383099752894635657833907958930587328480492546831654755627949756658554724024525108575961076341962292900510328611128404001877137799465932130220386963518903892403159969133882215092783063943679288192557384595152566356483424061922742307738886179947575613661171671781544283180451958232826666741028590085269</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">n2 = n1^n3</span><br><span class="line">p = GCD(n1,n2)</span><br><span class="line">q1 = n1//p</span><br><span class="line">Phi = (p-<span class="number">1</span>)*(q1-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,Phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c1,d,n1)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="litctf-2023where-is-p"><a class="markdownIt-Anchor" href="#litctf-2023where-is-p"></a> [LitCTF 2023]Where is P?:</h2><p>CopperSmith攻击：<code>p高位泄露</code></p><p>pbits=1024 , kbits=340,</p><p>P<sup>3</sup>的大小跟n很接近，可以通过爆破得出P,</p><p>然后就是常规的CopperSmith攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n= <span class="number">24479907029118467064460793139240403258697681144532146836881997837526487637306591893357774423547391867013441147680031968367449693796015901951120514250935018725570026327610524687128709707340727799633444550317834481416507364804274266363478822257132586592232042108076935945436358397787891169163821061005102693505011197453089873909085170776511350713452580692963748763166981047023704528272230392479728897831538235554137129584665886878574314566549330671483636900134584707867654841021494106881794644469229030140144595938886437242375435914268001721437309283611088568191856208951867342004280893021653793820874747638264412653721</span></span><br><span class="line">c= <span class="number">6566517934961780069851397787369134601399136324586682773286046135297104713708615112015588908759927424841719937322574766875308296258325687730658550956691921018605724308665345526807393669538103819281108643141723589363068859617542807984954436567078438099854340705208503317269397632214274507740533638883597409138972287275965697689862321166613821995226000320597560745749780942467497435742492468670016480112957715214640939272457886646483560443432985954141177463448896521810457886108311082101521263110578485768091003174683555938678346359150123350656418123918738868598042533211541966786594006129134087145798672161268647536724</span></span><br><span class="line">a= <span class="number">22184346235325197613876257964606959796734210361241668065837491428527234174610482874427139453643569493268653377061231169173874401139203757698022691973395609028489121048788465356158531144787135876251872262389742175830840373281181905217510352227396545981674450409488394636498629147806808635157820030290630290808150235068140864601098322473572121965126109735529553247807211711005936042322910065304489093415276688746634951081501428768318098925390576594162098506572668709475140964400043947851427774550253257759990959997691631511262768785787474750441024242552456956598974533625095249106992723798354594261566983135394923063605</span></span><br><span class="line">e= <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    P_3 = a+k*n</span><br><span class="line">    <span class="keyword">if</span> iroot(P_3, <span class="number">3</span>)[<span class="number">1</span>] == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    k += <span class="number">1</span></span><br><span class="line">P = iroot(P_3, <span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">P = <span class="number">66302204855869216148926460265779698576660998574555407124043768605865908069722142097621926304390549253688814246272903647124801382742681337653915017783954290069842646020090511605930590064443141710086879668946</span></span><br><span class="line">p_high = P&lt;&lt;<span class="number">340</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = p_high + x</span><br><span class="line">p_low = f.small_roots(X = <span class="number">2</span>^<span class="number">340</span>, beta = <span class="number">0.4</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(p_low+p_high)</span><br><span class="line"></span><br><span class="line">p = <span class="number">148500014720728755901835170447203030242113125689825190413979909224639701026120883281188694701625473553602289432755479244507504340127322979884849883842306663453018960250560834067472479033116264539127330613635903666209920113813160301513820286874124210921593865507657148933555053341577090100101684021531775022459</span></span><br><span class="line">q = n//p</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = invert(e, phi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, d, n)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="litctf-2023babylcg"><a class="markdownIt-Anchor" href="#litctf-2023babylcg"></a> [LitCTF 2023]babyLCG:</h2><p>LCG板子题：</p><p><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240916194856818.png" alt="image-20240916194856818" / loading="lazy"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">result = [<span class="number">699175025435513913222265085178805479192132631113784770123757454808149151697608216361550466652878</span>, <span class="number">193316257467202036043918706856603526262215679149886976392930192639917920593706895122296071643390</span>, <span class="number">1624937780477561769577140419364339298985292198464188802403816662221142156714021229977403603922943</span>, <span class="number">659236391930254891621938248429619132720452597526316230221895367798170380093631947248925278766506</span>, <span class="number">111407194162820942281872438978366964960570302720229611594374532025973998885554449685055172110829</span>, <span class="number">1415787594624585063605356859393351333923892058922987749824214311091742328340293435914830175796909</span>, <span class="number">655057648553921580727111809001898496375489870757705297406250204329094679858718932270475755075698</span>, <span class="number">1683427135823894785654993254138434580152093609545092045940376086714124324274044014654085676620851</span>, <span class="number">492953986125248558013838257810313149490245209968714980288031443714890115686764222999717055064509</span>, <span class="number">70048773361068060773257074705619791938224397526269544533030294499007242937089146507674570192265</span>]</span><br><span class="line"></span><br><span class="line">t = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(result)-<span class="number">1</span>):</span><br><span class="line">    t.append(result[i]-result[i-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(result)-<span class="number">3</span>):</span><br><span class="line">    p = GCD(t[i+<span class="number">1</span>]*t[i-<span class="number">1</span>]-t[i]**<span class="number">2</span>, t[i-<span class="number">2</span>]*t[i]-t[i-<span class="number">1</span>]**<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a = invert(t[-<span class="number">2</span>]-t[-<span class="number">3</span>],p)*(t[-<span class="number">1</span>]-t[-<span class="number">2</span>]) % p</span><br><span class="line">        b = (result[-<span class="number">1</span>]-a*result[-<span class="number">2</span>]) % p</span><br><span class="line">        seed = (result[<span class="number">0</span>]-b)*invert(a,p) % p</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(seed))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="afctf-2018single"><a class="markdownIt-Anchor" href="#afctf-2018single"></a> [AFCTF 2018]Single:</h2><p>quipquip一把梭</p><h2 id="柏鹭杯-2021试试大数据分解"><a class="markdownIt-Anchor" href="#柏鹭杯-2021试试大数据分解"></a> [柏鹭杯 2021]试试大数据分解?:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> xenny.ctf.crypto.modern.asymmetric.rsa.factor <span class="keyword">import</span> attack</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode  </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey.RSA <span class="keyword">import</span> importKey</span><br><span class="line"></span><br><span class="line">rsa = importKey(<span class="built_in">open</span>(<span class="string">&#x27;public.pem&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read())</span><br><span class="line"></span><br><span class="line">p, q = attack(rsa.n)</span><br><span class="line"><span class="keyword">assert</span> p*q == rsa.n</span><br><span class="line">d = gmpy2.invert(rsa.e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">enc1 = b64decode(<span class="built_in">open</span>(<span class="string">&#x27;flag.enc1&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read())</span><br><span class="line">m1 = long_to_bytes(<span class="built_in">pow</span>(bytes_to_long(enc1), d, rsa.n))</span><br><span class="line">enc2 = b64decode(<span class="built_in">open</span>(<span class="string">&#x27;flag.enc2&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read())</span><br><span class="line">m2 = long_to_bytes(<span class="built_in">pow</span>(bytes_to_long(enc2), d, rsa.n))</span><br><span class="line">enc3 = b64decode(<span class="built_in">open</span>(<span class="string">&#x27;flag.enc3&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read())</span><br><span class="line">m3 = long_to_bytes(<span class="built_in">pow</span>(bytes_to_long(enc3), d, rsa.n))</span><br><span class="line">enc4 = b64decode(<span class="built_in">open</span>(<span class="string">&#x27;flag.enc4&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read())</span><br><span class="line">m4 = long_to_bytes(<span class="built_in">pow</span>(bytes_to_long(enc4), d, rsa.n))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex((m1[-<span class="number">22</span>:]+m2[-<span class="number">22</span>:]+m3[-<span class="number">22</span>:]+m4[-<span class="number">20</span>:]).decode()))</span><br></pre></td></tr></table></figure><h2 id="红明谷ctf-2022easy_ya"><a class="markdownIt-Anchor" href="#红明谷ctf-2022easy_ya"></a> [红明谷CTF 2022]easy_ya:</h2><p>coppersmith:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = <span class="number">7996728164495259362822258548434922741290100998149465194487628664864256950051236186227986990712837371289585870678059397413537714250530572338774305952904473</span></span><br><span class="line">M = <span class="number">4159518144549137412048572485195536187606187833861349516326031843059872501654790226936115271091120509781872925030241137272462161485445491493686121954785558</span></span><br><span class="line">n = <span class="number">131552964273731742744001439326470035414270864348139594004117959631286500198956302913377947920677525319260242121507196043323292374736595943942956194902814842206268870941485429339132421676367167621812260482624743821671183297023718573293452354284932348802548838847981916748951828826237112194142035380559020560287</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c = <span class="number">46794664006708417132147941918719938365671485176293172014575392203162005813544444720181151046818648417346292288656741056411780813044749520725718927535262618317679844671500204720286218754536643881483749892207516758305694529993542296670281548111692443639662220578293714396224325591697834572209746048616144307282</span></span><br><span class="line"></span><br><span class="line">c2 = powmod(M,<span class="number">3</span>,n)</span><br><span class="line">a = <span class="built_in">int</span>((c-c2)*invert(r,n)%n)</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = (M+x*r)^e -c </span><br><span class="line">f = f.monic()</span><br><span class="line">roots = f.small_roots()</span><br><span class="line"></span><br><span class="line">m = M+roots[<span class="number">0</span>]*r</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><h2 id="hitctf-2021baby-ecc"><a class="markdownIt-Anchor" href="#hitctf-2021baby-ecc"></a> [HITCTF 2021]Baby ECC:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Sage</span></span><br><span class="line">N = <span class="number">2</span>**<span class="number">256</span>-<span class="number">2</span>**<span class="number">32</span>-<span class="number">2</span>**<span class="number">9</span>-<span class="number">2</span>**<span class="number">8</span>-<span class="number">2</span>**<span class="number">7</span>-<span class="number">2</span>**<span class="number">6</span>-<span class="number">2</span>**<span class="number">4</span>-<span class="number">1</span></span><br><span class="line">E = EllipticCurve(GF(N), [<span class="number">0</span>, <span class="number">7</span>])</span><br><span class="line">xG = <span class="number">0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798</span></span><br><span class="line">yG = <span class="number">0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8</span></span><br><span class="line">G = (xG,yG)</span><br><span class="line">cipher0 = (<span class="number">76950424233905085841024245566087362444302867365333079406072251240614685819574</span> , <span class="number">85411751544372518735487392020328074286181156955764536032224435533596344295845</span>)</span><br><span class="line">cipher1 = (<span class="number">42965775717446397624794967106656352716523975639425128723916600655527177888618</span> , <span class="number">32441185377964242317381212165164045554672930373070033784896067179784273837186</span>)</span><br><span class="line">cipher2 = (<span class="number">26540437977825986616280918476305280126789402372613847626897144336866973077426</span> , <span class="number">1098483412130402123611878473773066229139054475941277138170271010492372383833</span>)</span><br><span class="line"></span><br><span class="line">c0 = E([cipher0[<span class="number">0</span>],cipher0[<span class="number">1</span>]])</span><br><span class="line">c1 = E([cipher1[<span class="number">0</span>],cipher1[<span class="number">1</span>]])</span><br><span class="line">c2 = E([cipher2[<span class="number">0</span>],cipher2[<span class="number">1</span>]])</span><br><span class="line">c = E([xG,yG])</span><br><span class="line">secret0 = c.discrete_log(c0)</span><br><span class="line">secret1 = c.discrete_log(c1)</span><br><span class="line">secret2 = c.discrete_log(c2)</span><br><span class="line">n = [secret0,secret1,secret2]</span><br><span class="line">flag = <span class="string">&quot;NSSCTF&#123;&quot;</span> + <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">hex</span>(i)[<span class="number">2</span>:] <span class="keyword">for</span> i <span class="keyword">in</span> n])+<span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="鹤城杯-2021babyrsa"><a class="markdownIt-Anchor" href="#鹤城杯-2021babyrsa"></a> [鹤城杯 2021]BabyRSA：</h2><p><strong>coppersmith攻击:</strong></p><p>题目给出了**<code>p的高300位</code><strong>和</strong><code>q的低265位</code>**:</p><p>​<strong>n = p<sub>l</sub> * q<sub>l</sub> (mod 2<sup>265</sup>)</strong></p><p>​<strong>pl = n*q<sub>l</sub><sup>-1</sup> (mod 2<sup>265</sup>)</strong></p><p>==&gt;<strong>q<sub>l</sub> = q % (2<sup>265</sup>) = hint2</strong></p><p>==&gt; <strong>q<sub>l</sub><sup>-1</sup> = invert(hint2 , 2<sup>265</sup>)</strong></p><p>则p的高300位和低265位之和为：</p><p>​**pbar = p<sub>h</sub> +p<sub>l</sub>  =  (hint1&lt;&lt;724) + n * invert(hint2 , 2<sup>265</sup>) **</p><p><code>中间459位接下来通过coppersmith求解：</code></p><p>低265位为p<sub>l</sub>，由于直接构造 **f = pbar + x * 2<sup>265</sup> **会导致无解</p><p><strong>所以尝试相对于2<sup>265</sup>抬高2<sup>6</sup> 以进行爆破（未知：459==&gt;453）</strong></p><p>因此，在<code>coppersmith</code>中，构造f的表达式中间项为<strong>x * 64 + 2<sup>265</sup></strong>,</p><p>对应small_roots系数为<strong>X = 2<sup>453</sup></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">hint1 = ...</span><br><span class="line">hint2 = ...</span><br><span class="line">n = ...</span><br><span class="line">c = ...</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">mod = <span class="number">1</span>&lt;&lt;<span class="number">265</span></span><br><span class="line">pl = n*gmpy2.invert(hint2, mod) % mod</span><br><span class="line">pbar = (hint1&lt;&lt;<span class="number">724</span>) + pl</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">    f = pbar + (x*mod*<span class="number">64</span>) + (i&lt;&lt;<span class="number">265</span>)</span><br><span class="line">    f = f.monic()</span><br><span class="line">    pp = f.small_roots(X = <span class="number">2</span>^<span class="number">453</span>,beta = <span class="number">0.4</span>)</span><br><span class="line">    <span class="keyword">if</span> pp: </span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">p = <span class="built_in">int</span>(pbar + (pp[<span class="number">0</span>]&lt;&lt;<span class="number">271</span>) + (i&lt;&lt;<span class="number">265</span>))</span><br><span class="line">q = n//p</span><br><span class="line">Phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, Phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="广东强网杯-2021-团队组rsa-and-base"><a class="markdownIt-Anchor" href="#广东强网杯-2021-团队组rsa-and-base"></a> [广东强网杯 2021 团队组]RSA and BASE?:</h2><p>e很大，跟n接近，先用<code>wiener攻击</code>得到base32加密后的结果</p><p>注意到此处的BASE都是不重复的，猜测是换表<code>base32</code>加密，但有四位未知，爆破</p><p><strong>注意：加密字符表单的作用只是根据下标来映射而已</strong>，所以我们一一对应用题目新的表单来对应原生的base32加密下标。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> RSAwienerHacker <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">n=<span class="number">56661243519426563299920058134092862370737397949947210394843021856477420959615132553610830104961645574615005956183703191006421508461009698780382360943562001485153455401650697532951591191737164547520951628336941289873198979641173541232117518791706826699650307105202062429672725308809988269372149027026719779368169</span></span><br><span class="line">e=<span class="number">36269788044703267426177340992826172140174404390577736281478891381612294207666891529019937732720246602062358244751177942289155662197410594434293004130952671354973700999803850153697545606312859272554835232089533366743867361181786472126124169787094837977468259794816050397735724313560434944684790818009385459207329</span></span><br><span class="line">c=<span class="number">137954301101369152742229874240507191901061563449586247819350394387527789763579249250710679911626270895090455502283455665178389917777053863730286065809459077858674885530015624798882224173066151402222862023045940035652321621761390317038440821354117827990307003831352154618952447402389360183594248381165728338233</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d=hack_RSA(e,n)</span><br><span class="line">flag=long_to_bytes(<span class="built_in">pow</span>(c,d,n))</span><br><span class="line"><span class="comment">#print(flag)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">base32 = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ234567&#x27;</span> <span class="comment">#传统表单</span></span><br><span class="line">flag = <span class="string">&#x27;TCMDIEOH2MJFBLKHT2J7BLYZ2WUE5NYR2HNG&#x27;</span><span class="comment">#先去除&#x27;=&#x27;</span></span><br><span class="line">secret = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;Z&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>]</span><br><span class="line">tryr = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">        <span class="keyword">if</span> i!=j:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">                <span class="keyword">if</span> k!=i <span class="keyword">and</span> k!=j:</span><br><span class="line">                    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">                        <span class="keyword">if</span> l!=i <span class="keyword">and</span> l!=j <span class="keyword">and</span> l!=k:</span><br><span class="line">                            tryr.append(i+j+k+l)</span><br><span class="line"><span class="built_in">print</span>(tryr)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tryr:</span><br><span class="line">    cipherlist=<span class="string">&#x27;GHI45FQRSCX&#x27;</span>+i+<span class="string">&#x27;UVWJK67DELMNOPAB3&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(cipherlist)</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> flag:</span><br><span class="line">        g = cipherlist.index(m)</span><br><span class="line">        secret += base32[g]</span><br><span class="line">    secret += <span class="string">&#x27;====&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(base64.b32decode(secret))</span><br><span class="line">    secret = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="安洵杯-2020easyaes"><a class="markdownIt-Anchor" href="#安洵杯-2020easyaes"></a> [安洵杯 2020]easyaes：</h2><p>首先根据<code>len(key) == 16</code>可以知道key是128位的，而<code>len(hint) == 32</code>,所以在异或过程中会有一半的hint没有被异或，</p><p>而且根据<code>hint = os.urandom(4)*8</code> 则hint是4字节重复的，</p><p>==》通过<code>hint ^ key</code>可以泄露出key</p><p><code>aes = AES.new(key,AES.MODE_CBC,iv)</code></p><p>解释一下：</p><ul><li><code>AES.new()</code>创建一个新的AES实例</li><li><code>key</code>是加解密过程中的密钥，应是一个字节数组，长度取决于所选的AES密钥长度</li><li><code>AES.MODE_CBC</code>表示使用CBC模式,为一种加密迭代过程</li><li><code>iv</code>为初始化向量，在CBC模式下用于加密第一个数据块</li></ul><p>测试得到<code>len(msg) == 64</code> ，根据key我们要每16个字节分一组，然后反转让低字节的放在前面</p><p><code>CBC模式</code>下，每次的明文会先和前一个密文异或然后在根据密钥加密，所以解密过程也是一样，</p><p>每次密文要先和前一个得到的明文异或然后在根据密钥解密，而跟第一个密文异或的就是初始化向量，也就是我们的flag</p><p>在解密时我们采用最简单的一对一的<code>ECB模式</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> binascii, sys</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------get key---------</span></span><br><span class="line">tmp = <span class="number">56631233292325412205528754798133970783633216936302049893130220461139160682777</span></span><br><span class="line">hint = <span class="built_in">int</span>(<span class="built_in">str</span>(<span class="built_in">hex</span>(tmp))[<span class="number">2</span>:<span class="number">10</span>] * <span class="number">8</span>,<span class="number">16</span>)</span><br><span class="line">key = long_to_bytes(tmp ^ hint)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------get iv-----------</span></span><br><span class="line">msg = <span class="string">b&#x27;Welcome to this competition, I hope you can have fun today!!!!!!&#x27;</span></span><br><span class="line">msgs = [msg[ii:(ii+<span class="number">16</span>)] <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(msg),<span class="number">16</span>)]</span><br><span class="line">msgs.reverse()</span><br><span class="line">IV = binascii.unhexlify(<span class="string">&#x27;3c976c92aff4095a23e885b195077b66&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypto</span>(<span class="params">key,IV,ms</span>):</span><br><span class="line">    aes=AES.new(key,AES.MODE_ECB)</span><br><span class="line">    <span class="keyword">return</span> strxor(aes.decrypt(IV),ms)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ms <span class="keyword">in</span> msgs:</span><br><span class="line">    IV=decrypto(key,IV,ms)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">b&#x27;d0g3&#123;&#x27;</span> + IV+ <span class="string">b&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="hdctf-2023math_rsa"><a class="markdownIt-Anchor" href="#hdctf-2023math_rsa"></a> [HDCTF 2023]Math_Rsa:</h2><h3 id="解法一"><a class="markdownIt-Anchor" href="#解法一"></a> 解法一：</h3><p>利用<code>a = pow(p,2,r)</code>，Sagemath<code>已知a,r ==&gt; p</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n = ...</span><br><span class="line">r = ...</span><br><span class="line">a = ...</span><br><span class="line">c = ...</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">PR.&lt;p&gt; = PolynomialRing(Zmod(r))</span><br><span class="line">f = (p^<span class="number">2</span>) - a</span><br><span class="line">ans = f.roots()</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">    <span class="keyword">if</span> isPrime(<span class="built_in">int</span>(n//i)):</span><br><span class="line">        p = i</span><br><span class="line">        q = n//i</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">Phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, Phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>其中，<code>PR.&lt;p&gt; = PolynomialRing(Zmod(r))</code></p><ol><li><code>Zmod(r)</code>:指定模，定义界限为r的环；Z表示整数；Zmod代表这是一个整数域中的r模环</li><li><code>ZZ</code>：整数环；<code>QQ</code>：有理数环；<code>RR</code>：实数环；<code>CC</code>：复数环</li><li><code>PR</code>：只是一个指针，指向PolynomialRing指定的那个环(可以使用任意字符)</li><li><code>PolynomialRing</code>:这个是说建立多项式环</li><li><code>&lt;p&gt;</code>: 指定一个变量，可以是任意字符</li><li><code>f = (p^2) - a</code> 则是定义一个函数f</li><li><code>ans = f.roots()</code>是求解f中所有满足函数的自变量</li></ol><h3 id="解法二"><a class="markdownIt-Anchor" href="#解法二"></a> 解法二：</h3><p>根据<code>a = pow(p,2,r)</code>可知<strong>a是模r的二次剩余</strong>，且提示了<code>r%4==3</code></p><p><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240902162642631.png" alt="image-20240902162642631" / loading="lazy"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = ...</span><br><span class="line">r = ...</span><br><span class="line">a = ...</span><br><span class="line">c = ...</span><br><span class="line"></span><br><span class="line">p = gmpy2.powmod(a, (r+<span class="number">1</span>)//<span class="number">4</span>, r)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line">q = n//p</span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(<span class="number">65537</span>,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = gmpy2.powmod(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="羊城杯-2021"><a class="markdownIt-Anchor" href="#羊城杯-2021"></a> 羊城杯 2021:</h2><h3 id="羊城杯-2021bigrsa"><a class="markdownIt-Anchor" href="#羊城杯-2021bigrsa"></a> [羊城杯 2021]Bigrsa:</h3><p>发现n1和n2共享素数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n1 = ...</span><br><span class="line">n2 = ...</span><br><span class="line">e = ...</span><br><span class="line">c = ...</span><br><span class="line"></span><br><span class="line">gcd = GCD(n1, n2)</span><br><span class="line">p = gcd</span><br><span class="line">q1 = n1//gcd</span><br><span class="line">q2 = n2//gcd</span><br><span class="line"></span><br><span class="line">Phi1 = (p-<span class="number">1</span>)*(q1-<span class="number">1</span>)</span><br><span class="line">Phi2 = (p-<span class="number">1</span>)*(q2-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d1 = gmpy2.invert(e, Phi1)</span><br><span class="line">d2 = gmpy2.invert(e, Phi2)</span><br><span class="line"></span><br><span class="line">c1 = <span class="built_in">pow</span>(c, d2, n2)</span><br><span class="line">m = <span class="built_in">pow</span>(c1, d1, n1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h3 id="羊城杯-2021easy_rsa"><a class="markdownIt-Anchor" href="#羊城杯-2021easy_rsa"></a> [羊城杯 2021]Easy_Rsa:</h3><p><strong>Common Prime RSA</strong>  ，攻击方式是一种修改的<code>phllard_rho</code></p><p>参考论文：</p><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240901173134716.png" alt="image-20240901173134716" style="zoom: 50%;" / loading="lazy"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n = ...</span><br><span class="line">e = ...</span><br><span class="line">c = ...</span><br><span class="line"></span><br><span class="line">f = <span class="keyword">lambda</span> x,n: (<span class="built_in">pow</span>(x,n-<span class="number">1</span>,n) + <span class="number">3</span>) % n</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">phllard_rho</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a = getRandomRange(<span class="number">2</span>, n)</span><br><span class="line">        b = f(a, n)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            p = GCD(<span class="built_in">abs</span>(a-b),n)</span><br><span class="line">            <span class="keyword">if</span> p == n:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> p &gt; <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> (p,n//p)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                a = f(a, n)</span><br><span class="line">                b = f(f(b, n), n)</span><br><span class="line"></span><br><span class="line">p,q = phllard_rho(n)</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="litctf-2024"><a class="markdownIt-Anchor" href="#litctf-2024"></a> LitCTF 2024:</h2><h3 id="litctf-2024small_e"><a class="markdownIt-Anchor" href="#litctf-2024small_e"></a> [LitCTF 2024]small_e：</h3><p>小明文爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">19041138093915757361446596917618836424321232810490087445558083446664894622882726613154205435993358657711781275735559409274819618824173042980556986038895407758062549819608054613307399838408867855623647751322414190174111523595370113664729594420259754806834656490417292174994337683676504327493103018506242963063671315605427867054873507720342850038307517016687659435974562024973531717274759193577450556292821410388268243304996720337394829726453680432751092955575512372582624694709289019402908986429709116441544332327738968785428501665254894444651547623008530708343210644814773933974042816703834571427534684321229977525229</span></span><br><span class="line">c_list = [<span class="number">438976</span>, <span class="number">1157625</span>, <span class="number">1560896</span>, <span class="number">300763</span>, <span class="number">592704</span>, <span class="number">343000</span>, <span class="number">1860867</span>, <span class="number">1771561</span>, <span class="number">1367631</span>, <span class="number">1601613</span>, <span class="number">857375</span>, <span class="number">1225043</span>, <span class="number">1331000</span>, <span class="number">1367631</span>, <span class="number">1685159</span>, <span class="number">857375</span>, <span class="number">1295029</span>, <span class="number">857375</span>, <span class="number">1030301</span>, <span class="number">1442897</span>, <span class="number">1601613</span>, <span class="number">140608</span>, <span class="number">1259712</span>, <span class="number">857375</span>, <span class="number">970299</span>, <span class="number">1601613</span>, <span class="number">941192</span>, <span class="number">132651</span>, <span class="number">857375</span>, <span class="number">1481544</span>, <span class="number">1367631</span>, <span class="number">1367631</span>, <span class="number">1560896</span>, <span class="number">857375</span>, <span class="number">110592</span>, <span class="number">1061208</span>, <span class="number">857375</span>, <span class="number">1331000</span>, <span class="number">1953125</span>]</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deco</span>(<span class="params">c,e,n</span>):</span><br><span class="line">    k=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        m=c+n*k</span><br><span class="line">        result,flag=gmpy2.iroot(m,e)</span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        k+=<span class="number">1</span></span><br><span class="line">flagg = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> c_list:</span><br><span class="line">    flagg += long_to_bytes(deco(c,e,n))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flagg) </span><br></pre></td></tr></table></figure><h3 id="litctf-2024common_primes_plus"><a class="markdownIt-Anchor" href="#litctf-2024common_primes_plus"></a> [LitCTF 2024]common_primes_plus:</h3><p>已知条件：</p><ul><li><p><code>hint1 = a * n1+b * n2</code>，<code>hint2 = c * n1 + d * n2</code></p></li><li><p>已知 hint1,hint2,c,n1，且abcd均为素数</p></li><li><p>==&gt; 可知 <strong><code>p = gcd(hint1,hint2) = gcd(n,hint1) = gcd(n,hint2)</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">72619153900682160072296441595808393095979917106156741746523649725579328293061366133340736822282117284050717527134297532031234706715551253283030119063143935874516054785948327252045453986903379262257406260016876625891582923191913450785482873961282498295762698500898694660964018533698142756095427829906473038053</span></span><br><span class="line">hint1 = <span class="number">115150932086321440397498980975794957800400136337062771258224890596200580556053305338941267789684878816176014493153795643655219028833232337281425177163963414534998897852644398384446019097451620742463880027107068960452304016955877225140421899265978792650445328111566277376529454404089066088845864500514742797060500618255170627</span></span><br><span class="line">hint2 = <span class="number">166820160267525807953634213157298160399912450930658918773153592459310847514047652216110562360456335336533080444219104489314586122760398361430693763814336759476811490524054588094610387417965626546375189720748660483054863693527537614055954695966458622029711055735399842018236940424665041143785192280089418185085532002136215976</span></span><br><span class="line">c = <span class="number">28378912671104261862184597375842174085651209464660064937481961814538145807266472966765374317717522401362019901110151858589886717440587644003368826809403188935808872400614919296641885383025657934630410406898092262104442977722339379234085663757182028529198392480656965957860644395092769333414671609962801212632</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">p = gcd(hint1, hint2)</span><br><span class="line">q = n1//p</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = invert(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n1)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="litctf-2024common_primes"><a class="markdownIt-Anchor" href="#litctf-2024common_primes"></a> [LitCTF 2024]common_primes:</h3><p>p = gcd(n1,n2)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">63306931765261881888912008095340470978772999620205174857271016152744820165330787864800482852578992473814976781143226630412780924144266471891939661312715157811674817013479316983665960087664430205713509995750877665395721635625035356901765881750073584848176491668327836527294900831898083545883834181689919776769</span></span><br><span class="line">n2 = <span class="number">73890412251808619164803968217212494551414786402702497903464017254263780569629065810640215252722102084753519255771619560056118922616964068426636691565703046691711267156442562144139650728482437040380743352597966331370286795249123105338283013032779352474246753386108510685224781299865560425114568893879804036573</span></span><br><span class="line">c1 = <span class="number">11273036722994861938281568979042367628277071611591846129102291159440871997302324919023708593105900105417528793646809809850626919594099479505740175853342947734943586940152981298688146019253712344529086852083823837309492466840942593843720630113494974454498664328412122979195932862028821524725158358036734514252</span></span><br><span class="line">c2 = <span class="number">42478690444030101869094906005321968598060849172551382502632480617775125215522908666432583017311390935937075283150967678500354031213909256982757457592610576392121713817693171520657833496635639026791597219755461854281419207606460025156812307819350960182028395013278964809309982264879773316952047848608898562420</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">p = gcd(n1, n2)</span><br><span class="line">q = n1 // p</span><br><span class="line">Phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = invert(e, Phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c1, d, n1)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h3 id="litctf-2024真easyrsa"><a class="markdownIt-Anchor" href="#litctf-2024真easyrsa"></a> [LitCTF 2024]真·EasyRSA:</h3><p>史</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c1= <span class="number">78995097464505692833175221336110444691706720784642201874318792576886638370795877665241433503242322048462220941850261103929220636367258375223629313880314757819288233877871049903331061261182932603536690216472460424869498053787147893179733302705430645181983825884645791816106080546937178721898460776392249707560</span></span><br><span class="line">c2= <span class="number">3784701757181065428915597927276042180461070890549646164035543821266506371502690247347168340234933318004928718562990468281285421981157783991138077081303219</span></span><br><span class="line">n = <span class="number">111880903302112599361822243412777826052651261464069603671228695119729911614927471127031113870129416452329155262786735889603893196627646342615137280714187446627292465966881136599942375394018828846001863354234047074224843640145067337664994314496776439054625605421747689126816804916163793264559188427704647589521</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">p = gmpy2.iroot(n,<span class="number">4</span>)[<span class="number">0</span>]</span><br><span class="line">Phi = p**<span class="number">4</span> - p**<span class="number">3</span></span><br><span class="line">d = inverse(e,Phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c1,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line">x = <span class="number">93492332457019255141294502555555489582661562346262162342211605562996217352449</span></span><br><span class="line"><span class="built_in">print</span>(is_prime(x))</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">d = <span class="built_in">pow</span>(<span class="number">0x10001</span>,-<span class="number">1</span>,x-<span class="number">1</span>)</span><br><span class="line">m = <span class="built_in">pow</span>(c2,d,x)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="litctf-2024small_e_plus"><a class="markdownIt-Anchor" href="#litctf-2024small_e_plus"></a> [LitCTF 2024]small_e_plus:</h3><p>先爆破出e，然后爆破flag</p><ul><li>此时如果采取小明文爆破的话，效率很低</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> printable</span><br><span class="line"></span><br><span class="line">n = <span class="number">26287684934288536371438030224508784042871268975402791015134838900290249602701092702492594931306572692868654436714501196060619149020850402317982203575250568283872182497606239389480186694649979877566740647822434500023605871516831662099415987589808614777313595453727243531121031390104059097782466650186291076316486240197369759537327997880644540629964227584070506981319936888159712058406052247256554081989035415864476278146328967410452695134756792942103209740186339835071828587981271027235499355298543650516643100665039796305276163706693873611519506528344413021878980171629732211592839945004800782325172828561339662590291</span></span><br><span class="line">c_list = [<span class="number">2206795524649235905421691489826312664535869158473992241382107452229902627430789178221234450699214518235612692491501082306158268745610575202210170312762929300421312081998256557805289595256913161318967687803957784191522197708618872099119883772100567610799038030170491575261415069363292331223848994909959222662307903914818692008641789258455591462146141825906954662346647872459477376830019604449386735009274664469596162731339288162705222622464022019805917855614180415135305122287341306358535204977475464107550060171378721195970927993762052901722822033817371589592984818877687488499315074761849162622037910992107211284008</span>, <span class="number">5772355660578786193365289788142204471140300880779240030922539554921206850801450259027942229717816557629121843824901435845363716561820657469786680232585256790197665053482436914240306106895783671092825614792775018452789907242936725194811142759000550943111242261233418906869936542409260521957109457093880078265172230140113023756025958760162033801341277275818552619176398362323345440943751030254826411167403369778520042425875280132329006784704419423985932863729258308660619215866531848636409929423223281439774682034891288220844217705947244646337813999934326056219959633197870528867256797102445018262011480153115939973120</span>, <span class="number">1207753724090260852409848530096938494041869666191344850580616117902540004602216282128000198616910613629758228599152405146528856830526069167686468063404160733191610918533887137790198044549066176847699828584104335658872479915611835658770230456040566481519133420435691429577114944632254145293686212844875236028065213764327990843553209848826790721557229795796629116716323389485143635207391322758673224679570474982769025868784848121296090448593104527159728316178638031965733210974157123951201010132807247490252051791615388655934783546925682929869630639426022317978556708362738999927581494799492081969707506643799602026519</span>, <span class="number">23349127335265499093449067069020992112353295858939476460071138364566485897994252926437380788575729410533824920877221793075557803246884503318707565286465780619451837755333889863647223503631040527885884507188543322662521167319750343131600891690509665461069767205371629056201897374077580748284228605137071513643680112231720015635177198512671008206911131037246521082139072649111758853436401697265407050360284081221903913252963538698624243925508340434415847360772868692706825954252596535393923195017520961377182762938864807222401006410940590209478399415565644283710492027537832649211992078485373823473694670510027091811150</span>, <span class="number">10226019140134038624377317848115153109426202728030240919051914421470768415604166541259309040981729429302658204608838639560323294519400489855382683083386777345356043308705897287912341523315760693349431629528606884165134456829229982105748229536220053836967234793460400007088552230829556977946642054006994624346182400713981635617380105674142096166299590924644975504927529440869894823989816288037184537810548374154159131078285611810236360387224739364737369218239938401877019353452254541733135847328578198473654682547864026753170978019586975399474768379227943763421295905943744276512487256848753432567851910082922927470490</span>, <span class="number">23740354509167079065405461731971916754037420716194453557110579966491604804762436810357240604414289616234875179623546843181969909941655688193848922121025497722570206788206574369953117810580405098086613804927789389379000011120646581696237263731340862157598831413772589626428552355215317461446703978266643741459189148155110184955643416482312525932611502239696070143649593393180531208682271982848368078201739398938285094875058820959849311021066738043111703290623367049523633339597166603017770974672021851132978175318897057265294143015585933755643775222343716729295329665381969705644856166297065958733244549838186512052385</span>, <span class="number">449014525939717636067736015209424784219819246781576119976763479723069921555975991244061404426209241205491628463587064147168107292515973015167075933513053376730612977909688147192509972914228546673914859512456020534607548288441547681099206879988569397951304088877152364775649300942230940480095891405872756559515878791481146087187792174110744462062133353030045674834570611547897985227875674282106272664164460098105513231986703990634100117091825872525928884988567006942035220750862383326774903397508340077320163638705664083267751275414767422570459999305221215356075828860083175263731374754412655619766335149006888723996</span>, <span class="number">16724794744491727600425925395927244417134995504796613762545001848691858676855371900138882794396073589851705829977971925497098298081053830365847044742295241579270222074264270766160828536659842604404241318349399345391073018854800119637771843569778469196738774691245194283589151708822054754891860887285845079956055960799325451486703248118285066709862851457478898785928241590593187351807366412037409877885725182051826065860998104380663508501993855389845296242673609538795480745163836240239734138130049347272635936034792561725248889899428632572191869130319297765786132841511245497565771732921602763273993266122615935214603</span>, <span class="number">8335009241673468873253675068463589266426701056401774737990647304778993560605655347351631416630769577522424783603153098182609522990968188535194397812386924076809847791156568504352196579970447867606517135531565802449373639411293098029825159629692422202058452950834073234658264013415977347155192720165418683784735863643368164054960138519912292186928345518922656777075501616408802833213759105274620228201695472893761054437789976692657170111413189445894590722931833376629118468092175170858255694444972297979072766528207056455924414294930988285253186403605383727454401973318032223978796412991222953728595468797201373820622</span>, <span class="number">1717028738196915227260339129573501065417757436024070728399837662683474643676720266190852688571851260086024584528234004503770202991702828738603236485267929860326697228640681326889845794391744206929580676537615769150484083242039924741303807364343064097449659558370778499818290907827480001580408520014110979083082316647497828342236619136282585160822630608240519352654269080203964531142386474415714079196749108940162898716817139452352062000261548631825989143362746715121123292436275957550673873937398160148303975715603319819731258894296533494152025775404106195174909015831441339509280028585399046169513149752204461930349</span>, <span class="number">6253489839553538192995294139816446969824750751774728963617638345595670445770677500921617837218605680169746240573789832579137206230177143500699620111070145585461358354523003959756713830108697398762585026303196668650471722612722372863973566811324151291707208671745892059398682725808801715988328719567890446420981480784833951835550433358928430667547317456646990287369723084794020241264506154652275756123282486762023979426752588250225435784747977075518696454125522814567504866613306081720330538332436897331017796420408357014130003339073229042803329670944110125353218213811432346818713964878168764790792105206633440354005</span>, <span class="number">1207753724090260852409848530096938494041869666191344850580616117902540004602216282128000198616910613629758228599152405146528856830526069167686468063404160733191610918533887137790198044549066176847699828584104335658872479915611835658770230456040566481519133420435691429577114944632254145293686212844875236028065213764327990843553209848826790721557229795796629116716323389485143635207391322758673224679570474982769025868784848121296090448593104527159728316178638031965733210974157123951201010132807247490252051791615388655934783546925682929869630639426022317978556708362738999927581494799492081969707506643799602026519</span>, <span class="number">5772355660578786193365289788142204471140300880779240030922539554921206850801450259027942229717816557629121843824901435845363716561820657469786680232585256790197665053482436914240306106895783671092825614792775018452789907242936725194811142759000550943111242261233418906869936542409260521957109457093880078265172230140113023756025958760162033801341277275818552619176398362323345440943751030254826411167403369778520042425875280132329006784704419423985932863729258308660619215866531848636409929423223281439774682034891288220844217705947244646337813999934326056219959633197870528867256797102445018262011480153115939973120</span>, <span class="number">1717028738196915227260339129573501065417757436024070728399837662683474643676720266190852688571851260086024584528234004503770202991702828738603236485267929860326697228640681326889845794391744206929580676537615769150484083242039924741303807364343064097449659558370778499818290907827480001580408520014110979083082316647497828342236619136282585160822630608240519352654269080203964531142386474415714079196749108940162898716817139452352062000261548631825989143362746715121123292436275957550673873937398160148303975715603319819731258894296533494152025775404106195174909015831441339509280028585399046169513149752204461930349</span>, <span class="number">16954257214609715453949449319699339161494232855569310228933510507504171504126469206091874371244790265592761015613256403517471291015511338346765442554575984841436537843152588028133877350821930031082920487532579036233128796943768462075658517963544351576867080570835108123172127678561307490005618742426940555485915573421790050723171701483141269800431262504278004147886695150170337842904413809555649193394856219267444671017423976317095448634183238063104910602376968654113825856753568856181455666796555652402905808458114516561773417952991326953537750434218624122318995368477991659040481704212571743288062208854477599259233</span>, <span class="number">16724794744491727600425925395927244417134995504796613762545001848691858676855371900138882794396073589851705829977971925497098298081053830365847044742295241579270222074264270766160828536659842604404241318349399345391073018854800119637771843569778469196738774691245194283589151708822054754891860887285845079956055960799325451486703248118285066709862851457478898785928241590593187351807366412037409877885725182051826065860998104380663508501993855389845296242673609538795480745163836240239734138130049347272635936034792561725248889899428632572191869130319297765786132841511245497565771732921602763273993266122615935214603</span>, <span class="number">5185490165247175755074805103840625687511977590976733896967715184223982955725681935365096951517529730737911572507779959945930556296503873230438433692310842981978848881986205067999307067785730415524359447947414935770806603135319166013408164683315806218163318125978230966989985398051513033616788512784230934142137906332152151059584574222941527730647262944250765844919176013002939308197949589859844618414360065768222159786067710805154244111569645546199262226746460081578671653615283375596665960708242700241780342523448742861815380568359092813225600016747957517992666799497302478221946509254852979437130583539850985247422</span>, <span class="number">1748234508408435343229319253644625402817707176509451594647354284826288727338735967235360246609210161049023834307132290872525340273117113455850690260255921823613621383639409134488848519959372177408937889998552431530493839856756914185531673290249084408278489645057787655359507244021027375565961471003583528932265312366403288884176948556324167675395562225956088863571715251876674710333918813480215719798596428736037441464450389735436535142133977551778467378533427938402690627170065561491269748888688911598444983102702261665208037447965537895418969759387684448834920453303484908559802952752182953165141625674023904414158</span>, <span class="number">11012890581084315425095922547777050020962029248110211263311188736825161568336991045243917700829742195694068118244042803336244383422040087972310576680130493039066637029837297205028290343840934744140990838248421706520572790950203052596858612764294640351774272157943334862976359969574219205290501939867352064476895317015572786888474774760071718201404856802312145427767679849647981118814029138127523521157700904020659839293447586228220702194369342121785362851205183676546931393764208787501487430625010774845511515509394872334800320955439381971987176625826068199951062429360895302585774691509075464492623725384467268825285</span>, <span class="number">5976772453334984518311442738240004799220403662435440872185530863193424233037367952925902243175234771035939695813307154967530503941081645934538688267920825967077726208002575899575371222695901346361307413004351281869655229087644917183767240951265807406293078230174759543645470570834782744332808979716142354429389228605592485271438778026468985249730030159932637979600514791593524263931036554765213297195922837236962842381131840868115187459577702023810124989825582700575011520568245435377833934768593346195065831458857440454704013911127816011037625063876159283174160162690848395114549568308205531592017492613772445173774</span>, <span class="number">5185490165247175755074805103840625687511977590976733896967715184223982955725681935365096951517529730737911572507779959945930556296503873230438433692310842981978848881986205067999307067785730415524359447947414935770806603135319166013408164683315806218163318125978230966989985398051513033616788512784230934142137906332152151059584574222941527730647262944250765844919176013002939308197949589859844618414360065768222159786067710805154244111569645546199262226746460081578671653615283375596665960708242700241780342523448742861815380568359092813225600016747957517992666799497302478221946509254852979437130583539850985247422</span>, <span class="number">6452875340997852295275020218749378916760411126851936571996259386760459856313309845592392640856504175949234216794963908475913037761993360407125952607943943083700382006783091443756617877566422165299422992987336811474980284131306966940424642139162441283769172531199959298540627795873212152702317440453079566096174835647147665695679094943137671532124636863128457006714211465119286776747310503452130041649279123753848522079886216732719572247000481047269505214596261386534160935834909921155351371984109147724730932926711831690752003577272018655013647352055561080857579522667684581123594159788011149227192380455462896729962</span>, <span class="number">6253489839553538192995294139816446969824750751774728963617638345595670445770677500921617837218605680169746240573789832579137206230177143500699620111070145585461358354523003959756713830108697398762585026303196668650471722612722372863973566811324151291707208671745892059398682725808801715988328719567890446420981480784833951835550433358928430667547317456646990287369723084794020241264506154652275756123282486762023979426752588250225435784747977075518696454125522814567504866613306081720330538332436897331017796420408357014130003339073229042803329670944110125353218213811432346818713964878168764790792105206633440354005</span>, <span class="number">6253489839553538192995294139816446969824750751774728963617638345595670445770677500921617837218605680169746240573789832579137206230177143500699620111070145585461358354523003959756713830108697398762585026303196668650471722612722372863973566811324151291707208671745892059398682725808801715988328719567890446420981480784833951835550433358928430667547317456646990287369723084794020241264506154652275756123282486762023979426752588250225435784747977075518696454125522814567504866613306081720330538332436897331017796420408357014130003339073229042803329670944110125353218213811432346818713964878168764790792105206633440354005</span>, <span class="number">20897947836932076779964827384680266669444872541242595584853544810847660781809255811902379402727265984145972717558208216627868351476262475424181241317707734298108218231636329375895362429626917095073694210812814494087830535014117884013936787285440467171742761631884901929078488856204289738449061959822388725333274257861099169377435400465998662612618115681519773625182456433449001773543437767201553703283209697249003117284877232666946456539017194397166088957330100388776645543342462188483091150441369824235427061443229429025534194618806460187812446633057673388068141804189503074739767911838028579099128625845793341901127</span>, <span class="number">5185490165247175755074805103840625687511977590976733896967715184223982955725681935365096951517529730737911572507779959945930556296503873230438433692310842981978848881986205067999307067785730415524359447947414935770806603135319166013408164683315806218163318125978230966989985398051513033616788512784230934142137906332152151059584574222941527730647262944250765844919176013002939308197949589859844618414360065768222159786067710805154244111569645546199262226746460081578671653615283375596665960708242700241780342523448742861815380568359092813225600016747957517992666799497302478221946509254852979437130583539850985247422</span>, <span class="number">1207753724090260852409848530096938494041869666191344850580616117902540004602216282128000198616910613629758228599152405146528856830526069167686468063404160733191610918533887137790198044549066176847699828584104335658872479915611835658770230456040566481519133420435691429577114944632254145293686212844875236028065213764327990843553209848826790721557229795796629116716323389485143635207391322758673224679570474982769025868784848121296090448593104527159728316178638031965733210974157123951201010132807247490252051791615388655934783546925682929869630639426022317978556708362738999927581494799492081969707506643799602026519</span>, <span class="number">8335009241673468873253675068463589266426701056401774737990647304778993560605655347351631416630769577522424783603153098182609522990968188535194397812386924076809847791156568504352196579970447867606517135531565802449373639411293098029825159629692422202058452950834073234658264013415977347155192720165418683784735863643368164054960138519912292186928345518922656777075501616408802833213759105274620228201695472893761054437789976692657170111413189445894590722931833376629118468092175170858255694444972297979072766528207056455924414294930988285253186403605383727454401973318032223978796412991222953728595468797201373820622</span>, <span class="number">5185490165247175755074805103840625687511977590976733896967715184223982955725681935365096951517529730737911572507779959945930556296503873230438433692310842981978848881986205067999307067785730415524359447947414935770806603135319166013408164683315806218163318125978230966989985398051513033616788512784230934142137906332152151059584574222941527730647262944250765844919176013002939308197949589859844618414360065768222159786067710805154244111569645546199262226746460081578671653615283375596665960708242700241780342523448742861815380568359092813225600016747957517992666799497302478221946509254852979437130583539850985247422</span>, <span class="number">25920961707523393202281300218444176129734572566815781137488940145677301500180714145402663962373623882683655757546713176923316428191765157386415468883815905581966232659296756935108128028157735278704173240867754374892767863985119564774915890766313799183822643494869775607043330683224121234927784433937849569120283272329925062133702698267726766476110289877776286080853490841837897993369872640809289989540435112046742658888426704252633322563361442888492873827942589957261396606340845665522400646771232316872444568013520651608356878655632725425106340256031308528158877727958784150436116095788759918507442721063497464001672</span>, <span class="number">6253489839553538192995294139816446969824750751774728963617638345595670445770677500921617837218605680169746240573789832579137206230177143500699620111070145585461358354523003959756713830108697398762585026303196668650471722612722372863973566811324151291707208671745892059398682725808801715988328719567890446420981480784833951835550433358928430667547317456646990287369723084794020241264506154652275756123282486762023979426752588250225435784747977075518696454125522814567504866613306081720330538332436897331017796420408357014130003339073229042803329670944110125353218213811432346818713964878168764790792105206633440354005</span>, <span class="number">25663191423484921175412364224530127146643925340004154726702279647143356157592854508759921404410754752035271117262826349048515204905598320781277358442584209773238813165864338686191131303650343111109522647292342262318312191154828123703005048694144581658454332596649591143235675787721964930836353194643708891591880016775053451232129740204331045326847472524157097116402350309528683224670236144960836423799755065339099128269152330465141709080678776263364496603148723855163217962603724059472220503607467867433663538613289855157923304803789694579660594681244121347757234971567712156039920653800971260669403951884026752686998</span>, <span class="number">6253489839553538192995294139816446969824750751774728963617638345595670445770677500921617837218605680169746240573789832579137206230177143500699620111070145585461358354523003959756713830108697398762585026303196668650471722612722372863973566811324151291707208671745892059398682725808801715988328719567890446420981480784833951835550433358928430667547317456646990287369723084794020241264506154652275756123282486762023979426752588250225435784747977075518696454125522814567504866613306081720330538332436897331017796420408357014130003339073229042803329670944110125353218213811432346818713964878168764790792105206633440354005</span>, <span class="number">25920961707523393202281300218444176129734572566815781137488940145677301500180714145402663962373623882683655757546713176923316428191765157386415468883815905581966232659296756935108128028157735278704173240867754374892767863985119564774915890766313799183822643494869775607043330683224121234927784433937849569120283272329925062133702698267726766476110289877776286080853490841837897993369872640809289989540435112046742658888426704252633322563361442888492873827942589957261396606340845665522400646771232316872444568013520651608356878655632725425106340256031308528158877727958784150436116095788759918507442721063497464001672</span>, <span class="number">13263786466446190163016008769836220535269357696454674792666135258902640846903309780108315355392508130227345512883180524670260067683978830659316889987124447343297390324463103766540103214985414999778290407008190424180154779235834484101584174703692738403343419550940166812669376385233441159764013001794070232476009158915966454070958519878855933028785291151945528736387913371707135653596226023268592330842008453104190134667308270525900634583278545983101946869551676698088147890541479096323734726116488316329827416755818060204664181280485697259466218350842103872751987842240867163996948996727825810630964777385967911053901</span>, <span class="number">6253489839553538192995294139816446969824750751774728963617638345595670445770677500921617837218605680169746240573789832579137206230177143500699620111070145585461358354523003959756713830108697398762585026303196668650471722612722372863973566811324151291707208671745892059398682725808801715988328719567890446420981480784833951835550433358928430667547317456646990287369723084794020241264506154652275756123282486762023979426752588250225435784747977075518696454125522814567504866613306081720330538332436897331017796420408357014130003339073229042803329670944110125353218213811432346818713964878168764790792105206633440354005</span>, <span class="number">5185490165247175755074805103840625687511977590976733896967715184223982955725681935365096951517529730737911572507779959945930556296503873230438433692310842981978848881986205067999307067785730415524359447947414935770806603135319166013408164683315806218163318125978230966989985398051513033616788512784230934142137906332152151059584574222941527730647262944250765844919176013002939308197949589859844618414360065768222159786067710805154244111569645546199262226746460081578671653615283375596665960708242700241780342523448742861815380568359092813225600016747957517992666799497302478221946509254852979437130583539850985247422</span>, <span class="number">1748234508408435343229319253644625402817707176509451594647354284826288727338735967235360246609210161049023834307132290872525340273117113455850690260255921823613621383639409134488848519959372177408937889998552431530493839856756914185531673290249084408278489645057787655359507244021027375565961471003583528932265312366403288884176948556324167675395562225956088863571715251876674710333918813480215719798596428736037441464450389735436535142133977551778467378533427938402690627170065561491269748888688911598444983102702261665208037447965537895418969759387684448834920453303484908559802952752182953165141625674023904414158</span>, <span class="number">8335009241673468873253675068463589266426701056401774737990647304778993560605655347351631416630769577522424783603153098182609522990968188535194397812386924076809847791156568504352196579970447867606517135531565802449373639411293098029825159629692422202058452950834073234658264013415977347155192720165418683784735863643368164054960138519912292186928345518922656777075501616408802833213759105274620228201695472893761054437789976692657170111413189445894590722931833376629118468092175170858255694444972297979072766528207056455924414294930988285253186403605383727454401973318032223978796412991222953728595468797201373820622</span>, <span class="number">5976772453334984518311442738240004799220403662435440872185530863193424233037367952925902243175234771035939695813307154967530503941081645934538688267920825967077726208002575899575371222695901346361307413004351281869655229087644917183767240951265807406293078230174759543645470570834782744332808979716142354429389228605592485271438778026468985249730030159932637979600514791593524263931036554765213297195922837236962842381131840868115187459577702023810124989825582700575011520568245435377833934768593346195065831458857440454704013911127816011037625063876159283174160162690848395114549568308205531592017492613772445173774</span>, <span class="number">25920961707523393202281300218444176129734572566815781137488940145677301500180714145402663962373623882683655757546713176923316428191765157386415468883815905581966232659296756935108128028157735278704173240867754374892767863985119564774915890766313799183822643494869775607043330683224121234927784433937849569120283272329925062133702698267726766476110289877776286080853490841837897993369872640809289989540435112046742658888426704252633322563361442888492873827942589957261396606340845665522400646771232316872444568013520651608356878655632725425106340256031308528158877727958784150436116095788759918507442721063497464001672</span>, <span class="number">5185490165247175755074805103840625687511977590976733896967715184223982955725681935365096951517529730737911572507779959945930556296503873230438433692310842981978848881986205067999307067785730415524359447947414935770806603135319166013408164683315806218163318125978230966989985398051513033616788512784230934142137906332152151059584574222941527730647262944250765844919176013002939308197949589859844618414360065768222159786067710805154244111569645546199262226746460081578671653615283375596665960708242700241780342523448742861815380568359092813225600016747957517992666799497302478221946509254852979437130583539850985247422</span>, <span class="number">1717028738196915227260339129573501065417757436024070728399837662683474643676720266190852688571851260086024584528234004503770202991702828738603236485267929860326697228640681326889845794391744206929580676537615769150484083242039924741303807364343064097449659558370778499818290907827480001580408520014110979083082316647497828342236619136282585160822630608240519352654269080203964531142386474415714079196749108940162898716817139452352062000261548631825989143362746715121123292436275957550673873937398160148303975715603319819731258894296533494152025775404106195174909015831441339509280028585399046169513149752204461930349</span>, <span class="number">25139940794218635348197118071301083238188918027193611763525774422502805824030159181810808048312828586310375271390658874846166941305171889519472685469675087274773157307133820213186080599249106104274031234797703970573904818411381605617364965926619916397551349237481884885723093798237875561681274880161116978250140685000915537069110074814807782361116104719639226963741990834724296742064451257526339309855861251778350642631845345431897638639307184086434344778694684043943923041302280417162444914203825532942834207262516015206535412006876830590028421616204643350943277314562927607754616803756985741638210493640875844891960</span>, <span class="number">6452875340997852295275020218749378916760411126851936571996259386760459856313309845592392640856504175949234216794963908475913037761993360407125952607943943083700382006783091443756617877566422165299422992987336811474980284131306966940424642139162441283769172531199959298540627795873212152702317440453079566096174835647147665695679094943137671532124636863128457006714211465119286776747310503452130041649279123753848522079886216732719572247000481047269505214596261386534160935834909921155351371984109147724730932926711831690752003577272018655013647352055561080857579522667684581123594159788011149227192380455462896729962</span>, <span class="number">20897947836932076779964827384680266669444872541242595584853544810847660781809255811902379402727265984145972717558208216627868351476262475424181241317707734298108218231636329375895362429626917095073694210812814494087830535014117884013936787285440467171742761631884901929078488856204289738449061959822388725333274257861099169377435400465998662612618115681519773625182456433449001773543437767201553703283209697249003117284877232666946456539017194397166088957330100388776645543342462188483091150441369824235427061443229429025534194618806460187812446633057673388068141804189503074739767911838028579099128625845793341901127</span>, <span class="number">11585318389310082289634538436928729260761907754954731989483654384251165000197213645281370351397028539366128403662173911562239143321895246754339672995138654604980948825905276968754585440593530502031072587489418651687027546522269634035791996102885960686969316226732356317109881863779734224468395519503131972389118986368190443032576070941428487054450651328773394985517568216579647364967614926730248841713741600286001390136757473284393174512577204042060290369663604703262495330209924328523120390710228628984130500686686583318088441875055416917520119056403841430529851364998090755804939747123419334984081027473820456086396</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>,<span class="number">2000</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">pow</span>(<span class="built_in">ord</span>(<span class="string">&#x27;L&#x27;</span>),e,n) == c_list[<span class="number">0</span>]:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c_list:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> printable:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">pow</span>(<span class="built_in">ord</span>(j),e,n) == i:</span><br><span class="line">            <span class="built_in">print</span>(j,end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="litctf-2024真签到"><a class="markdownIt-Anchor" href="#litctf-2024真签到"></a> [LitCTF 2024]真·签到！！！</h3><p>先爆破出e，然后爆破出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> printable</span><br><span class="line"></span><br><span class="line">n = <span class="number">53779688736203933047434881701980151653423802317221115318252054349550528639605402386823698507644560099402835048990108944258111185574422278737617624691459404487383205558495742477348096557609903091073482529108655721238870718736876917084894146112572318162754496404262394399247602930119945411919174294508800616891</span></span><br><span class="line">c = [<span class="number">4124398080749553074619843072966405052653858760437326718059791703345965920503569739252697039258403095781261373084359291436131778873009458422798167842256401087702314540530419434366776728534830888673974354635857270349385440098865230210094489169761588857916363734220665484295067349289289937219722492065728599463</span>, <span class="number">15481644643922585500945090000695562756282558733694376113993997188985665803568510535190119480845091520658885447822873846242168965970319826752836201669345271783173616567609933032017344851978404496594310266471195858958401298265505190354107704046599872108795281982693695588930911349202457222578310220886622884416</span>, <span class="number">40974022330897595185593668062654482156370823359835540803640174599026663839070218063991563668507393666219642637135525638990455137020424754595250945054931120081475828089632764945575780326199183117119567719177117261011813697975685625263935820428233393538013872760001414320682062909650622706212810667501741354873</span>, <span class="number">33981786848660496333961506517187714554193615584845878232210394944336780137112027320577548034903832074752598242250089070169817297717880683657379700922708752551349470039462849959879736868560539774248532790598446587204581950938279079907176227710483120279719588731010982317536907131989435797059221285174093962908</span>, <span class="number">1285910717903203084975787538616625852434321550159180500468441407891029771447865370135113417284148880935400895099397662772912500923680415544536692392496640999237766173745842517211118889788913178800742948591271387743915400252547483363390245549270543581643322229638652142265779266726517677852583628198266108421</span>, <span class="number">23789203781845502389604138554793333517773526003503743390692470103394090787030629083975882919256262588645554701048271917571850719220017173479370286653555316337255808129285505861937546032314431989480012931420093894536654994001056137216516437854011401289717520452295524972795366753274063468895803833424426506331</span>, <span class="number">20940208240413900181251095272480030757105866339312310157480925947687648156412725814283553668029566232713480333831122495321031459080649522184580652548367762322620272746907156287431288132170924230190580437501883293037927765862049006329498758245604100845556492302312391684439016854521845339622400243037514523867</span>, <span class="number">41340655699032850811922590703534124397137469314819785476566566093858629648044627482514797174972386035722096563024583525376236045453451526570126890987183821072119586387364708099135124115856050119661380924186837677285512927400295146789034172166107474252827192261267643468495553148849468493009241668471083048430</span>, <span class="number">22966360367971968504676737450654736559784526278126249100481690257360113645735823869174095070763996461165850039977914727245980242307319409983699793511352248209423007808171107239738771728438094641440444300596228692729277266556257088686585351869961921410859567001968798590921194402863219621666507877820378827092</span>, <span class="number">41340655699032850811922590703534124397137469314819785476566566093858629648044627482514797174972386035722096563024583525376236045453451526570126890987183821072119586387364708099135124115856050119661380924186837677285512927400295146789034172166107474252827192261267643468495553148849468493009241668471083048430</span>, <span class="number">52202475140977838262155766391763349770007617219731559882124842701306589259283233719727463105485402530682922793511867820592726412692298060420804847173813733441078903812811823520344962843237246635665635279928926476628971734748164894875272506105775963532397945641093931037074645811860105881221105902306255621181</span>, <span class="number">43686732822375527268166781780704145014463398236959129237259540820318050928142217382482854923592727143517945840145245021402367171624497223470640246895897992745217804594441620139099576901221773322604374681094586004810027213343123533228000473640015954168594863999625384697827658129618656763377267113765657637761</span>, <span class="number">14880134921930262144875287284818967110251827510945998306349834095556559727134453367023956672529927521400098332845397865476485851088348289863395304436600667602897364946074198944367059280853856523321854848231173098875824362694147164421785094924944589659224105370845089374193840009119763660625714201229551202464</span>, <span class="number">38013516229906731040770728995532120131491416592495253746823605701526767788760134027460299370090486775327164899231056232048607749748639052414737842983659937901990208411978548025212907210373477389757182408450834322391767748006090559771843058148102090701817180898022507797050605846546948706282805015074193093273</span>, <span class="number">20524906300041996892262239459527462404196257551590250259857365607007677670540302221668693379920161363521285920275466639018409401155313360025405024607708054080526222596947953326605977964045680445269338000371617360892920017917084671528868044975804331654166128752309192614142872384593861258628748764936855953220</span>, <span class="number">20524906300041996892262239459527462404196257551590250259857365607007677670540302221668693379920161363521285920275466639018409401155313360025405024607708054080526222596947953326605977964045680445269338000371617360892920017917084671528868044975804331654166128752309192614142872384593861258628748764936855953220</span>, <span class="number">20524906300041996892262239459527462404196257551590250259857365607007677670540302221668693379920161363521285920275466639018409401155313360025405024607708054080526222596947953326605977964045680445269338000371617360892920017917084671528868044975804331654166128752309192614142872384593861258628748764936855953220</span>, <span class="number">38013516229906731040770728995532120131491416592495253746823605701526767788760134027460299370090486775327164899231056232048607749748639052414737842983659937901990208411978548025212907210373477389757182408450834322391767748006090559771843058148102090701817180898022507797050605846546948706282805015074193093273</span>, <span class="number">16822859827241912092903301050602204948222809037868347721306013629185546078070142612905867911365364682095817701589155688149474870521437581822944710801232554186762524645518382246152771387652373860849924256464746937608068511622557828364043958392814895625329426982855829366086732912276996321034036018819408951193</span>, <span class="number">34150153608686108981107806839997156875358767651869050480811448846242725270615327530663889984779854553092120823194108656627949475159285700946138204912775266363022036292515155178325852957375486496328282381365286611916449049601323101141237331480034977207188953388238873934117345088291003788988627587000440491067</span>, <span class="number">1080077289768974224514697428506714010850637431783677450886962480094680409598510781459495187524547891405762403065728309492525472661717864381505770334364496408759066160232404275108402127205833678508044742271255268139834900230068167627203821637533356900402299478531941413138234500208157822130575455493383047567</span>, <span class="number">1080077289768974224514697428506714010850637431783677450886962480094680409598510781459495187524547891405762403065728309492525472661717864381505770334364496408759066160232404275108402127205833678508044742271255268139834900230068167627203821637533356900402299478531941413138234500208157822130575455493383047567</span>, <span class="number">43686732822375527268166781780704145014463398236959129237259540820318050928142217382482854923592727143517945840145245021402367171624497223470640246895897992745217804594441620139099576901221773322604374681094586004810027213343123533228000473640015954168594863999625384697827658129618656763377267113765657637761</span>, <span class="number">1080077289768974224514697428506714010850637431783677450886962480094680409598510781459495187524547891405762403065728309492525472661717864381505770334364496408759066160232404275108402127205833678508044742271255268139834900230068167627203821637533356900402299478531941413138234500208157822130575455493383047567</span>, <span class="number">2261213433462723419446068536636649771187144868712624195878985258332075459437123191546644392841202030016957753759317962427017329871785225346154355535823733243490439256337121075737014302820285880854932463336983215343814901470468271086180806826828758278636642722717746069806141466423669570629896086040252059811</span>, <span class="number">2261213433462723419446068536636649771187144868712624195878985258332075459437123191546644392841202030016957753759317962427017329871785225346154355535823733243490439256337121075737014302820285880854932463336983215343814901470468271086180806826828758278636642722717746069806141466423669570629896086040252059811</span>, <span class="number">20524906300041996892262239459527462404196257551590250259857365607007677670540302221668693379920161363521285920275466639018409401155313360025405024607708054080526222596947953326605977964045680445269338000371617360892920017917084671528868044975804331654166128752309192614142872384593861258628748764936855953220</span>, <span class="number">1080077289768974224514697428506714010850637431783677450886962480094680409598510781459495187524547891405762403065728309492525472661717864381505770334364496408759066160232404275108402127205833678508044742271255268139834900230068167627203821637533356900402299478531941413138234500208157822130575455493383047567</span>, <span class="number">34150153608686108981107806839997156875358767651869050480811448846242725270615327530663889984779854553092120823194108656627949475159285700946138204912775266363022036292515155178325852957375486496328282381365286611916449049601323101141237331480034977207188953388238873934117345088291003788988627587000440491067</span>, <span class="number">22966360367971968504676737450654736559784526278126249100481690257360113645735823869174095070763996461165850039977914727245980242307319409983699793511352248209423007808171107239738771728438094641440444300596228692729277266556257088686585351869961921410859567001968798590921194402863219621666507877820378827092</span>, <span class="number">16264894348259769136675550067824857283471919750028043029657185995447205515644739721442713128709898468504029150415861841382906641476195752925950909219618894837821015850329001463680764039265007095540240515692665160125015606879662459432975652875535648068534926380848491577719631224890161757880802939228883185592</span>, <span class="number">1080077289768974224514697428506714010850637431783677450886962480094680409598510781459495187524547891405762403065728309492525472661717864381505770334364496408759066160232404275108402127205833678508044742271255268139834900230068167627203821637533356900402299478531941413138234500208157822130575455493383047567</span>, <span class="number">48082751893707411443030173186335305790867819509239136633531599952276619514671134605545456992422479102909480454270136006149473478156585782252929384235054442854349205489546634520955838888639404324251978615664175676633161271815457282615312198983401493084973690137353747061078161134872098033066383487860152411239</span>, <span class="number">21327622441108572162106669889096334171915319598231314927862632695081879818457106233577588661109578343720589743198154707810708496736138963401446774648179328773413409171869828838434037907816132436438314483017142493175451372700989061258496056410836951234155583628787251073520843683698565432474522538486905480145</span>, <span class="number">2261213433462723419446068536636649771187144868712624195878985258332075459437123191546644392841202030016957753759317962427017329871785225346154355535823733243490439256337121075737014302820285880854932463336983215343814901470468271086180806826828758278636642722717746069806141466423669570629896086040252059811</span>, <span class="number">21327622441108572162106669889096334171915319598231314927862632695081879818457106233577588661109578343720589743198154707810708496736138963401446774648179328773413409171869828838434037907816132436438314483017142493175451372700989061258496056410836951234155583628787251073520843683698565432474522538486905480145</span>, <span class="number">16264894348259769136675550067824857283471919750028043029657185995447205515644739721442713128709898468504029150415861841382906641476195752925950909219618894837821015850329001463680764039265007095540240515692665160125015606879662459432975652875535648068534926380848491577719631224890161757880802939228883185592</span>, <span class="number">43686732822375527268166781780704145014463398236959129237259540820318050928142217382482854923592727143517945840145245021402367171624497223470640246895897992745217804594441620139099576901221773322604374681094586004810027213343123533228000473640015954168594863999625384697827658129618656763377267113765657637761</span>, <span class="number">52202475140977838262155766391763349770007617219731559882124842701306589259283233719727463105485402530682922793511867820592726412692298060420804847173813733441078903812811823520344962843237246635665635279928926476628971734748164894875272506105775963532397945641093931037074645811860105881221105902306255621181</span>, <span class="number">6095619509559019908019352298785640301209234881314970774184941172547625244370412202107112133779358742353812823865176363562807708451451147505179327450732451736668872375390442553984797239930526165727742801338607942940231944774202087146668342653834800543503935286187760190753179319613671205950833349955049912928</span>]</span><br><span class="line"></span><br><span class="line">m1 = <span class="string">b&#x27;L&#x27;</span></span><br><span class="line">m1 = bytes_to_long(m1)</span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">10</span>**<span class="number">8</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">pow</span>(m1,e,n) == c[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> printable:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">pow</span>(<span class="built_in">ord</span>(j),e,n) == i:</span><br><span class="line">            flag+=j</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="litctf-2024little_fermat"><a class="markdownIt-Anchor" href="#litctf-2024little_fermat"></a> [LitCTF 2024]little_fermat：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> printable</span><br><span class="line"></span><br><span class="line">n = <span class="number">122719648746679660211272134136414102389555796575857405114496972248651220892565781331814993584484991300852578490929023084395318478514528533234617759712503439058334479192297581245539902950267201362675602085964421659147977335779128546965068649265419736053467523009673037723382969371523663674759921589944204926693</span></span><br><span class="line">c = <span class="number">109215817118156917306151535199288935588358410885541150319309172366532983941498151858496142368333375769194040807735053625645757204569614999883828047720427480384683375435683833780686557341909400842874816853528007258975117265789241663068590445878241153205106444357554372566670436865722966668420239234530554168928</span></span><br><span class="line"></span><br><span class="line">n_2=gmpy2.iroot(n,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">q = gmpy2.next_prime(n_2)</span><br><span class="line">p = n//q</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">Phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = invert(e, Phi)</span><br><span class="line"><span class="comment"># 666666^x = 1 (mod p) ,根据费马小定理 a^(p-1) = 1 (mod p) ,则 x = p-1</span></span><br><span class="line">x = p-<span class="number">1</span></span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">m = m ^ x</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m)) </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="litctf-2024little_fermat_plus"><a class="markdownIt-Anchor" href="#litctf-2024little_fermat_plus"></a> [LitCTF 2024]little_fermat_plus：</h3><p>这里其实用到了费马小定理的扩展，由费马小定理得</p><p><strong>666666<sup>p−1</sup>≡1 (mod  p)</strong></p><p>如果我们给两边同时乘上y次方，就有</p><p><strong>666666<sup>y(p−1)</sup>≡1<sup>y</sup>(mod  p)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> printable</span><br><span class="line"></span><br><span class="line">n = <span class="number">169522900072954416356051647146585827691225327527086797334523482640452305793443986277933900273961829438217255938808371865341750200444086653241610669340348513884285892043530862971785487294831341653909852543469963032532560079879299447677636753647721541724969084825510405349373420839032990681851700075554428485967</span></span><br><span class="line">c = <span class="number">105943762023156641770119141175498496686312095002592803768522760959533958364969985856505466722378959991757667341747887520146437729810252085791886309974903778546814812093444837674447485802109225767800488527376777153844313243366001288246744190001997192598159277512188417272938455513900277907186067996704043274199</span></span><br><span class="line"></span><br><span class="line">n_2=gmpy2.iroot(n,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">q = gmpy2.next_prime(n_2)</span><br><span class="line">p = n//q</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">Phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = invert(e, Phi)</span><br><span class="line">x = <span class="number">1024</span>*(p-<span class="number">1</span>)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">m = m ^ x</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m)) </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="litctf-2024polynomial_plus"><a class="markdownIt-Anchor" href="#litctf-2024polynomial_plus"></a> [LitCTF 2024]Polynomial_plus:</h3><p>多项式利用<code>roots()</code>，找到多项式的根，进而求解出k</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line">n = <span class="number">343424787688946710828788193478518340184635630498236346907606509763011890082198311173501834898393322176325060349656021994088578448585570427399686920253145504431065451412326430233084073651599248661762036671841142048573051549474182586297565046285161375600990596119448538118327240405957845178956427810835797220204485242640945891970398041508724313442375608608662117158013</span></span><br><span class="line">c = <span class="number">300097152084696274516003269451037367405899874736667089358316145472977115856239312841307278390995620995063953407731245808077915106161525019835875978698148238617148929170257141762407514139479267867121064342168993486529889088067645866930029787500052390195406519896658384623575160091828173111087120708969655686251340535134778177193882787257773427670338018428731395437974</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">PR= PolynomialRing(ZZ,<span class="string">&#x27;k&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = k**<span class="number">10</span> + <span class="number">22</span>*k**<span class="number">8</span> + <span class="number">53</span>*k**<span class="number">6</span> - <span class="number">22</span>*k**<span class="number">4</span> - <span class="number">39</span>*k**<span class="number">2</span> + <span class="number">114514</span></span><br><span class="line">q = k**<span class="number">9</span> + <span class="number">10</span>*k**<span class="number">7</span> - <span class="number">13</span>*k**<span class="number">6</span> - <span class="number">2</span>*k**<span class="number">4</span> + <span class="number">111</span>*k**<span class="number">2</span> + <span class="number">1919810</span></span><br><span class="line"></span><br><span class="line">n0 = p*q</span><br><span class="line">f = n-n0</span><br><span class="line">sol = f.roots()</span><br><span class="line">x = sol[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">p = p(x)</span><br><span class="line">q = q(x)</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h3 id="litctf-2024polynomial"><a class="markdownIt-Anchor" href="#litctf-2024polynomial"></a> [LitCTF 2024]Polynomial：</h3><p>solve解方程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">Polynomial1 = <span class="number">58154360680755769340954893572401748667033313354117942223258370092578635555451803701875246040822675770820625484823955325325376503299610647282074512182673844099014723538935840345806279326671621834884174315042653272845859393720044076731894387316020043030549656441366838837625687203481896972821231596403741150142</span></span><br><span class="line">Polynomial2 = <span class="number">171692903673150731426296312524549271861303258108708311216496913475394189393793697817800098242049692305164782587880637516028827647505093628717337292578359337044168928317124830023051015272429945829345733688929892412065424786481363731277240073380880692592385413767327833405744609781605297684139130460468105300760</span></span><br><span class="line">Polynomial3 = <span class="number">97986346322515909710602796387982657630408165005623501811821116195049269186902123564611531712164389221482586560334051304898550068155631792198375385506099765648724724155022839470830188199666501947166597094066238209936082936786792764398576045555400742489416583987159603174056183635543796238419852007348207068832</span></span><br><span class="line">c = <span class="number">690029769225186609779381701643778761457138553080920444396078012690121613426213828722870549564971078807093600149349998980667982840018011505754141625901220546541212773327617562979660059608220851878701195162259632365509731746682263484332327620436394912873346114451271145412882158989824703847237437871480757404551113620810392782422053869083938928788602100916785471462523020232714027448069442708638323048761035121752395570167604059421559260760645061567883338223699900</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">p,r,q = symbols(<span class="string">&#x27;p r q&#x27;</span>)</span><br><span class="line">eq1 = Eq(p**<span class="number">2</span>+q, Polynomial1)</span><br><span class="line">eq3 = Eq(r**<span class="number">2</span>+p, Polynomial3)</span><br><span class="line">eq2 = Eq(q**<span class="number">2</span>+r, Polynomial2)</span><br><span class="line"></span><br><span class="line">sol = solve([eq1,eq2,eq3], [p,q,r])</span><br><span class="line">p,q,r = <span class="built_in">int</span>(sol[<span class="number">0</span>][<span class="number">0</span>]),<span class="built_in">int</span>(sol[<span class="number">0</span>][<span class="number">1</span>]),<span class="built_in">int</span>(sol[<span class="number">0</span>][<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">n = p*q*r</span><br><span class="line">Phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, Phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h3 id="litctf-2024crt"><a class="markdownIt-Anchor" href="#litctf-2024crt"></a> [LitCTF 2024]CRT：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">n_list = [<span class="number">16284549467215459860410219597024063610473673936290355100056351270928590364613988243842136274404316005691228851657707321037165033870804113001550943722154728825877813376691406849932899693973387282799799300076386870984605589385666352824740622229871992727011987847056429850720207816048044538068625281977059392365698031140268787802886018698622326103590834314940280191560618753408741810842189500991556860816195814550884416201667771827582907240044216817705876129993030771943110090291383205720587816820335839616491257078918258839986942101986011761809815192713499542329037877195448381127272183807358011340669666067708631770629</span>, <span class="number">18874449316683637715798227591079994715220250787784886038879393543606786017564740000007881151950098752600868917271951840433212429335449734520464340460962870875528399394278620757114832553403790578599857545045548782264680469899469733610229824411943119032419052885845035690046611519195843721184869834557481917675133504256150187042147269721516549831707784660343957497462516302534697915170087780048689613921549811073805796084838801677337285061667687328043565589734203160196445644144798845303226939960633632967262794622796927905511547760465906600293964201276584199569541295613430382495278352554280248372584117917520373403063</span>, <span class="number">13076908038170870040678205430512292701702182383746502395067907294908791921755288520053025319156015431312084703402938465525746196078114225446604200656116848235842943713613538425047483331236843707852400888407037547782069810250229035895403347555287877301409523248658733500963325361631821388259137561613536275954710848967383282290486421290937700396986650186236373076267188846407623991396459884128392118502565707689494271484411270172764553747426536404781904379621870642658609027074757591034785814602602669666257742808888301912575857074138613714693225934811254682687014167022418837710552784925328161453554291397460324648009</span>, <span class="number">16378397749449315054623854181248970586445531404081850673625192835136416152712968780451149412408644689393643801969477034418829482292894114547339155149570026460766659623960243723741437212596779580161767297321149670682427000047000712397718946486472118638780090056091542235702825736985864963592363421943353726975184567975451918105247987573044010599149673027905021130138957885113596669923366241161695565837122963976988635649640547443201925034845002113548522307980664206158188711548845245115694530280375848933481227411503982144621846732228815377656607983358898296200251680387871097014543693213877074718748683243193584032307</span>, <span class="number">16561385664507310659703460597815131331175620854125898893505075859155749890511144622913872488783791188180242785479319865960633526830814389031162024199864660323116594980719331106368397062852472114748955889862650270563487466194545102072373606964935390400328607060427961354290055443710114639781630071832997101380097322119243847190066266823291236828718017385537809056374392924015081117151158033309950857254309859691442649968222489177513517837849318096762149934959873646750864750378500351560253453052870424424427631414365680967482680769587570457938750679258205430151223470761518748987038822469422647137405393267829437115661</span>, <span class="number">27046459277694602448592524332290812177367631061914086306537115904955610821120392893033090428641088790759783810505225125618182431554899875183961418066959811832057748013953098277804562621152445358481976221983179988257658622392669474721482514871569548645762057681213193026792187879687736985533503283192537252904253565317763028483404018596514523171644666753183517320602643087213777450193062371986178076259168860180486748722567326484282893069173271762518110920685267104269429407229859993484209639764440874444582271870147714648808732931399985199947422716048582921727875237459841962093669408116061538502016560235135864203187</span>, <span class="number">26656304012303785684433399162699704691814095671158676770279115782799819097401667611247727555104978633884125246262630572285699884039990597392442760154412046297340436752418017863089245998557221143069544231044947583991838381529081774245290065442299808728542273138931461712874414662570197142795674160946728850452526786804787060582942714635903943088540232346797109678405554499677459722287119125623191067780196726820726456507802067342186435679967664032334075189916733352409403602499298544374351405005339596410771187606377781063995755795494682971576602822244457151090982442689870155439418641987576796032975032982289138437523</span>, <span class="number">15430339362720939092241771692575439580654810089653970198317149114896596238037181680990393763581287618371554846982066535980062263001619707606585504112155505335852802431392213092366756058196440934454810685146101829974548748060332228708229146991380736668433937967747468330692411917426038703359064546899782163287526256750039064809093426968389929333819191207284079703677535201724530391246890003928025687520199553868464322185815354591044585221486768114570373992719977614232251764409893171263639718616620216630797031237033969290978218328767317279717825174597882707772846934097838694418308236053838800414834627456689940059791</span>, <span class="number">18567217334857361786819913577261265078968886790989901098066320191741355103505838160569648197557648144402318678198622602821398215265062903833980611331991924162821902705417905758829862021425828310098183855605162264362860669298956185657733562472361876121183146316333113433547558152618165933865808900552444816088227098441082165477634812598644531670232452276788291537671779564658425789722419032860803991282640262179618723470437500425645011269733791887608702964571393657348573277992781115199432229176320688981128912052074722348557580462855962547978505669490105804175211061178124988260957275350940324541120102820024607088877</span>, <span class="number">10779265483116424102513175333888918968735912126282080716409998310381429332303237383487628664073567555863832134055945636657550074126628975203541323090803941066893475056319351674995896497450955897099614503220268400135112031310669044989879413178359759130908036871112663414065113664951350386824618325532532761206110118269005313068956882540007289422776225718534047101012876346009269097785027585782628699252006893938086064139042361425306202870627629615292450559291783382487842611805623198422252868756644595549320868144393828052610953995595915294930701560599016888539448223935199483656756326744914184772404419968728372785709</span>]</span><br><span class="line">c_list = [<span class="number">644471004204038587358576160407417490938643306027967868486894032686145771114614076076527690366372762614045209015175209880518279715723521182568975220993976451106760236390912778371250746699463366097164369672789316408520079193370191810477580463635224092686607896863852671881543817329521589324466628227730589108339783619357530316049670209743367574983963078106666377633552745384690084183804939047320711873053569717432670155045869610477526046503868585690544254566603491357805849009447674789480061139157433156989123228768899846183291164697221164452100037658563026884070301188916984245139290761779580443049</span>, <span class="number">644471004204038587358576160407417490938643306027967868486894032686145771114614076076527690366372762614045209015175209880518279715723521182568975220993976451106760236390912778371250746699463366097164369672789316408520079193370191810477580463635224092686607896863852671881543817329521589324466628227730589108339783619357530316049670209743367574983963078106666377633552745384690084183804939047320711873053569717432670155045869610477526046503868585690544254566603491357805849009447674789480061139157433156989123228768899846183291164697221164452100037658563026884070301188916984245139290761779580443049</span>, <span class="number">644471004204038587358576160407417490938643306027967868486894032686145771114614076076527690366372762614045209015175209880518279715723521182568975220993976451106760236390912778371250746699463366097164369672789316408520079193370191810477580463635224092686607896863852671881543817329521589324466628227730589108339783619357530316049670209743367574983963078106666377633552745384690084183804939047320711873053569717432670155045869610477526046503868585690544254566603491357805849009447674789480061139157433156989123228768899846183291164697221164452100037658563026884070301188916984245139290761779580443049</span>, <span class="number">644471004204038587358576160407417490938643306027967868486894032686145771114614076076527690366372762614045209015175209880518279715723521182568975220993976451106760236390912778371250746699463366097164369672789316408520079193370191810477580463635224092686607896863852671881543817329521589324466628227730589108339783619357530316049670209743367574983963078106666377633552745384690084183804939047320711873053569717432670155045869610477526046503868585690544254566603491357805849009447674789480061139157433156989123228768899846183291164697221164452100037658563026884070301188916984245139290761779580443049</span>, <span class="number">644471004204038587358576160407417490938643306027967868486894032686145771114614076076527690366372762614045209015175209880518279715723521182568975220993976451106760236390912778371250746699463366097164369672789316408520079193370191810477580463635224092686607896863852671881543817329521589324466628227730589108339783619357530316049670209743367574983963078106666377633552745384690084183804939047320711873053569717432670155045869610477526046503868585690544254566603491357805849009447674789480061139157433156989123228768899846183291164697221164452100037658563026884070301188916984245139290761779580443049</span>, <span class="number">644471004204038587358576160407417490938643306027967868486894032686145771114614076076527690366372762614045209015175209880518279715723521182568975220993976451106760236390912778371250746699463366097164369672789316408520079193370191810477580463635224092686607896863852671881543817329521589324466628227730589108339783619357530316049670209743367574983963078106666377633552745384690084183804939047320711873053569717432670155045869610477526046503868585690544254566603491357805849009447674789480061139157433156989123228768899846183291164697221164452100037658563026884070301188916984245139290761779580443049</span>, <span class="number">644471004204038587358576160407417490938643306027967868486894032686145771114614076076527690366372762614045209015175209880518279715723521182568975220993976451106760236390912778371250746699463366097164369672789316408520079193370191810477580463635224092686607896863852671881543817329521589324466628227730589108339783619357530316049670209743367574983963078106666377633552745384690084183804939047320711873053569717432670155045869610477526046503868585690544254566603491357805849009447674789480061139157433156989123228768899846183291164697221164452100037658563026884070301188916984245139290761779580443049</span>, <span class="number">644471004204038587358576160407417490938643306027967868486894032686145771114614076076527690366372762614045209015175209880518279715723521182568975220993976451106760236390912778371250746699463366097164369672789316408520079193370191810477580463635224092686607896863852671881543817329521589324466628227730589108339783619357530316049670209743367574983963078106666377633552745384690084183804939047320711873053569717432670155045869610477526046503868585690544254566603491357805849009447674789480061139157433156989123228768899846183291164697221164452100037658563026884070301188916984245139290761779580443049</span>, <span class="number">644471004204038587358576160407417490938643306027967868486894032686145771114614076076527690366372762614045209015175209880518279715723521182568975220993976451106760236390912778371250746699463366097164369672789316408520079193370191810477580463635224092686607896863852671881543817329521589324466628227730589108339783619357530316049670209743367574983963078106666377633552745384690084183804939047320711873053569717432670155045869610477526046503868585690544254566603491357805849009447674789480061139157433156989123228768899846183291164697221164452100037658563026884070301188916984245139290761779580443049</span>, <span class="number">644471004204038587358576160407417490938643306027967868486894032686145771114614076076527690366372762614045209015175209880518279715723521182568975220993976451106760236390912778371250746699463366097164369672789316408520079193370191810477580463635224092686607896863852671881543817329521589324466628227730589108339783619357530316049670209743367574983963078106666377633552745384690084183804939047320711873053569717432670155045869610477526046503868585690544254566603491357805849009447674789480061139157433156989123228768899846183291164697221164452100037658563026884070301188916984245139290761779580443049</span>]</span><br><span class="line">e = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CRT</span>(<span class="params">items</span>):</span><br><span class="line">    N =  reduce(<span class="keyword">lambda</span> x,y:x*y,(i[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> items))</span><br><span class="line">    result=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> a, n <span class="keyword">in</span> items:</span><br><span class="line">        m = N//n</span><br><span class="line">        d,r,t=gmpy2.gcdext(n,m)</span><br><span class="line">        <span class="keyword">if</span> d!=<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&#x27;Input not pairwise co-prime&#x27;</span>)</span><br><span class="line">        result += a*m*t</span><br><span class="line">    <span class="keyword">return</span> result % N, N</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data=<span class="built_in">list</span>(<span class="built_in">zip</span>(c_list,n_list))</span><br><span class="line">x,n = CRT(data)</span><br><span class="line">m=gmpy2.iroot(gmpy2.mpz(x),e)[<span class="number">0</span>].digits()</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><h3 id="litctf-2024crt_plus"><a class="markdownIt-Anchor" href="#litctf-2024crt_plus"></a> [LitCTF 2024]CRT_plus：</h3><p>低加密指数广播</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="comment">#fpylll</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">A = [<span class="number">126</span>, <span class="number">48</span>, <span class="number">16</span>, <span class="number">72</span>, <span class="number">118</span>]</span><br><span class="line">B = [<span class="number">1015</span>, <span class="number">838</span>, <span class="number">454</span>, <span class="number">322</span>, <span class="number">287</span>]</span><br><span class="line">N = [<span class="number">14928238039315040991308196203361315232720657103650133916768377003541186379974554794073142343542962199646167766317056723028716081533473830944328192280890558488982087259502304749351712886702680690273779927046689225691188145463409018705371701817782500722503682956161406169576545370923150575960593215241955617811801884711743303725010992704344613814422803869554915295599263200818169122460109761202619658976615539515461554999589496432809489233653847835884852838383631155057809145366161488972716470542997257824927235683738259840332405831579098429903716774910463581929154318403690419160948134710111693142307975784807557693379</span>, <span class="number">17942112047893516394059758069789896767008729052700255916941606468451353356755128052549675888464470730751071560385587733542652063605624887715486701968268746511130513891808360080569152819964870126967139166330069938033479674849483747008363844616001579775106124746396822730393977795887093285171120310391388533993105150552272708636765519928941755740285542436495225661570621438914992974707276930502069303295274628661481998308554649392508786793750053053121122238628064635273635766848165401929854140867543074809148318281653184460226317939677515071700168976030351545593059026392022012671316065525702115657483566938137244340943</span>, <span class="number">13019064216900979539288062154033407362873923068007793252861690841339799064052996489313924024470974905381895275618151217852919855409876807710907317767656306172828545362002202523070939278046699936212402230630256584670423362708987878505483680635512219997968954116231217398227993622065902156246475702094095500711503286622519913896122591961739665723628435538946933843825335162611709476594363043466396457232612767777259192378480905334359054208794766852953721503794850664015006289392327541583330272689875846792533484323373077869253786846989723423921359499060297185946499178827913630078855649725924366889102773642897486126623</span>, <span class="number">13912864686675639249288437589107116555604805004189183711379789929568272769079461241751272015747660238880020581115276925307650817840052731478197935494922776778456671398757225456564763063323400586339819575338030773839261766332062362334879207190483699972215128979606986002814161594101693635881349015199185085412611407662604627479103847204950489715963432100704956918420774156334247252954925845191282729254577898318969430816941295140050362250629162902319950857410371021670404067789437944207703037460999816188314289887032825758140831028148890807643175098513541476223379383684271681907330269037209677032315558402937931625967</span>, <span class="number">20697281700165158060712321641266488711894944770894967058614284974230824937584669196933970375321828545024565840884072714039625672397255154291241299830226044184343634190191714207346083253113281433886226024581215292220163243496877738571331530557698633431609877271753876915587472086166892247529345031622448967841394311132707519133169502656041602524428786054667737910711240877755895057344274733837936106880244101397045580919605270516952216181028018300911277852780391514223551138578229868751099931303779985263212375714318776700627534091244790507276964260243653855487575165560179621639549449819991732450911014479975009486773</span>]</span><br><span class="line">C = [<span class="number">1722078835760061914922188136968375167560877120158977673683182787526616054111469302309902289765296385972742778009222122528552899918863724377732557219671176645494150005867610261347026235782564913243945601412744385129580128250927608122522809099383488427292064494983097644976239331574095708707385594044914760001270147206289650087166888037423932397555572816680601347885645487184528254070549733484985825517047949</span>, <span class="number">13816768804244975535171696506080461156723308623701857620869448033158865282990045039961844920570143914665135883585879971811381020721992222246426401777511507400191713087571687956741206708710177012785421375718708189812774837594504418965920334982224317114403682678639035989628947049770826058014589194158740309041792753136519168749545398774774914316098342278282514631042388857128856143795589244785052399900000</span>, <span class="number">56859130881666565988360890971524531509149418204534393501520362276373931205720700726887545491289205478830425585724997174504028201171321308151273876050431857688549262391131233843813896378551007208009894797843649952348922113315189777325469148719163919686766128489229222919487894298991061288984198998019515140204032611992635303660051083035992783953034672470253917987745130941338091497821670180651626339168</span>, <span class="number">104921088107235282970210070343048501908867624861235981308477371001800133242704884555685815497516836051050046856653001827861416954490565731163497396533369953441870506739608750779206146960512840685327369132438186520936819912160558465866281258814185277348673235724471278843834900077063632942847769939844998491486539844971328759014099887125592504524703425638600458022082133169071492523661735192162844062500000</span>, <span class="number">1240538766092673389922062748316424702468324581791216732649676526936727204257919336267729115874238837779394913573904392250443112978081341477867371036538324777176210745189240390306682663050771398816977024467405187435749941354366210128964797433232968555682642062707794521268832699429918162047270351881018092211816812850558073282348521389449478019560248801682472510717226707312809024869529183888321461953350349</span>]</span><br><span class="line">e = <span class="number">5</span></span><br><span class="line">F = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(e):</span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(N[i]))</span><br><span class="line">    f = (A[i] * x + B[i]) ^ e - C[i]</span><br><span class="line">    f = f.monic()</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line">    F.append(f)</span><br><span class="line"></span><br><span class="line">F = crt(F, N)</span><br><span class="line">M = reduce(<span class="keyword">lambda</span> x, y: x * y, N)</span><br><span class="line">FF = F.change_ring(Zmod(M))</span><br><span class="line">m = FF.small_roots()[<span class="number">0</span>]</span><br><span class="line">flag = long_to_bytes(<span class="built_in">int</span>(m))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="litctf-2024midrsa"><a class="markdownIt-Anchor" href="#litctf-2024midrsa"></a> [LitCTF 2024]midRSA:</h3><p>已知p的高位和低位，找到中位即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">10912724749357317040117295175340915836309117326481842971911576002816136982982366412133127436929465794389631046998036509363047557873155846920275327196471118680559431161116535588318645353317739214770132790445807395653916337747136630775427171105596048281228718048314706544665819996610453587925745842345926654572410324847927833437471701176403031302117052425160845583678182335391697596801106017558494065612842298945201720733418994561321697012416704574891516720606917736854915347853341353358814869449590841870866128113400765492223847582506991200050368263722438854522124807397499067048911261448546634778788867555039834459211</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">6991017300002465473760665517672638980904771950587963320768028786572848880002446111427309844155944419991711131609525886799710433964716773503883581910737560542905952516670539044167012461107915291519628081744473505479068712979401023972013124089857993361492602682730769445826818873805246777789559501477084603991595919524098203387452563401306823917989080019788620521432596833764004972429814705900915782768111621466120683534147560628509733828773006451505153520893053368254310905682981931980175859011116643271531341395883753605992130701423800808678200033639094180802506618083869818685981234182334150817211223363755511509799</span></span><br><span class="line">leak1 = <span class="number">749278395841748263310980933893</span></span><br><span class="line">leak2 = <span class="number">2675756732628494397256285826768672620995252274010849868485475743575097846941007603037228233621038664628877573057336866559545388148568450491606789423985</span></span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = (leak1&lt;&lt;<span class="number">924</span>)+x*<span class="number">2</span>^<span class="number">500</span>+leak2</span><br><span class="line">f = f.monic()</span><br><span class="line">p_mid = f.small_roots(<span class="number">2</span>^<span class="number">454</span>,<span class="number">0.4</span>)  <span class="comment"># 找到中位</span></span><br><span class="line"></span><br><span class="line">p = <span class="built_in">int</span>((leak1&lt;&lt;<span class="number">924</span>))+(p_mid[<span class="number">0</span>])*<span class="number">2</span>^<span class="number">500</span>+leak2</span><br><span class="line">q = n//p</span><br><span class="line">Phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e, Phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h3 id="roarctf2019babyrsa"><a class="markdownIt-Anchor" href="#roarctf2019babyrsa"></a> [RoarCTF2019]babyRSA:</h3><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240901091858161.png" alt="image-20240901091858161" style="zoom: 67%;" / loading="lazy"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_p_q</span>(<span class="params">A,B</span>):</span><br><span class="line">    tmp = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(B+<span class="number">1</span>,A-<span class="number">1</span>):</span><br><span class="line">        tmp*=i</span><br><span class="line">        tmp%=A</span><br><span class="line">    tmp_inv = invert(tmp,A)</span><br><span class="line">    result = nextprime(tmp_inv)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">A1 = ...</span><br><span class="line">B1 = ...</span><br><span class="line">A2 = ...</span><br><span class="line">B2 = ...</span><br><span class="line">n = ...</span><br><span class="line">e = <span class="number">0x1001</span></span><br><span class="line">c = ...</span><br><span class="line"></span><br><span class="line">p = get_p_q(A1,B1)</span><br><span class="line">q = get_p_q(A2,B2)</span><br><span class="line">r = n // p // q</span><br><span class="line"></span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>) * (r - <span class="number">1</span>)</span><br><span class="line">d = invert(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="湖湘杯-2021signin"><a class="markdownIt-Anchor" href="#湖湘杯-2021signin"></a> [湖湘杯 2021]signin:</h2><h3 id="解法一-2"><a class="markdownIt-Anchor" href="#解法一-2"></a> 解法一：</h3><p>**n<sub>1</sub>= p<sub>1</sub><sup>4</sup>*q<sub>1</sub> <strong>和</strong>n<sub>2</sub>= p<sub>2</sub><sup>4</sup>*q<sub>2</sub> **</p><p>看到这种多因子+大数都可以考虑连分数分解</p><p>由题可知 <code>p2 &gt; p1</code>,</p><p>则 n1/n2 = (p1/p2)<sup>4</sup> * (q1/q2) ＜ q1/q2</p><p><code>q1/q2 ∈ (n1/n2,1)</code></p><p>对 <code>n1/n2</code>进行连分数展开并求其各项渐进分数，进而求解 q1、q2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">pk = (<span class="number">1150398070565459492080597718626032792435556703413923483458704675295997646493249759818468321328556510074044954676615760446708253531839417036997811506222349194302791943489195718713797322878586379546657275419261647635859989280700191441312691274285176619391539387875252135478424580680264554294179123254566796890998243909286508189826458854346825493157697201495100628216832191035903848391447704849808577310612723700318670466035077202673373956324725108350230357879374234418393233</span>, <span class="number">1242678737076048096780023147702514112272319497423818488193557934695583793070332178723043194823444815153743889740338870676093799728875725651036060313223096288606947708155579060628807516053981975820338028456770109640111153719903207363617099371353910243497871090334898522942934052035102902892149792570965804205461900841595290667647854346905445201396273291648968142608158533514391348407631818144116768794595226974831093526512117505486679153727123796834305088741279455621586989</span>)</span><br><span class="line">c1, c2 = (<span class="number">361624030197288323178211941746074961985876772079713896964822566468795093475887773853629454653096485450671233584616088768705417987527877166166213574572987732852155320225332020636386698169212072312758052524652761304795529199864805108000796457423822443871436659548626629448170698048984709740274043050729249408577243328282313593461300703078854044587993248807613713896590402657788194264718603549894361488507629356532718775278399264279359256975688280723740017979438505001819438</span>, <span class="number">33322989148902718763644384246610630825314206644879155585369541624158380990667828419255828083639294898100922608833810585530801931417726134558845725168047585271855248605561256531342703212030641555260907310067120102069499927711242804407691706542428236208695153618955781372741765233319988193384708525251620506966304554054884590718068210659709406626033891748214407992041364462525367373648910810036622684929049996166651416565651803952838857960054689875755131784246099270581394</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n1 = pk[<span class="number">0</span>]</span><br><span class="line">n2 = pk[<span class="number">1</span>]</span><br><span class="line">cf = continued_fraction(Integer(n1)/Integer(n2))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="built_in">len</span>(cf))):</span><br><span class="line">    q2 = cf.denominator(i)</span><br><span class="line">    q1 = cf.numerator(i)</span><br><span class="line">    <span class="keyword">if</span> q1.bit_length() == <span class="number">128</span> <span class="keyword">and</span> q2.bit_length() == <span class="number">128</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Found q1: &#123;&#125;, q2: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(q1, q2))</span><br><span class="line"></span><br><span class="line">q2 = <span class="number">196443958511498599913330690975430421229</span></span><br><span class="line">q1 = <span class="number">181856133933383097933223133658050179553</span></span><br><span class="line">p1 = n1//q1</span><br><span class="line">p2 = n2//q2</span><br><span class="line">phi1 = p1**<span class="number">3</span>*(p1-<span class="number">1</span>)*(q1-<span class="number">1</span>)</span><br><span class="line">phi2 = p2**<span class="number">3</span>*(p2-<span class="number">1</span>)*(q2-<span class="number">1</span>)</span><br><span class="line">d1 = invert(e,phi1)</span><br><span class="line">d2 = invert(e,phi2)</span><br><span class="line">m1 = <span class="built_in">pow</span>(c1,d1,n1)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c2,d2,n2)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m1))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m2))</span><br></pre></td></tr></table></figure><h3 id="解法二-2"><a class="markdownIt-Anchor" href="#解法二-2"></a> 解法二：</h3><p>wiener能解的题目一般<code>格</code>都能解</p><p>n = p<sup>4</sup>q，pbits = 360，qbits = 128</p><p>根据连分数渐进得到的公式**|n1/n2 -q1/q2| **,</p><p>我们令<strong>s = n2 * q1 - n1 * q2</strong></p><p>再补充一个恒等式<strong>q2 = q2</strong></p><p>但考虑到<code>(s,q2)</code>的配平，</p><p>引入一个平衡矩阵的项<code>D = (n2//q2).bit_length()-q2.bit.length()</code></p><p><sub>(再减去2留出安全余量)</sub></p><p>这样我们就能构造一个格<code>[[n2,0],[-n1,D]]</code></p><p>最终的式子就是：<code>(q1,q2)[[n2,0],[-n1,D]] = (s,q2)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">pk = (<span class="number">1150398070565459492080597718626032792435556703413923483458704675295997646493249759818468321328556510074044954676615760446708253531839417036997811506222349194302791943489195718713797322878586379546657275419261647635859989280700191441312691274285176619391539387875252135478424580680264554294179123254566796890998243909286508189826458854346825493157697201495100628216832191035903848391447704849808577310612723700318670466035077202673373956324725108350230357879374234418393233</span>, <span class="number">1242678737076048096780023147702514112272319497423818488193557934695583793070332178723043194823444815153743889740338870676093799728875725651036060313223096288606947708155579060628807516053981975820338028456770109640111153719903207363617099371353910243497871090334898522942934052035102902892149792570965804205461900841595290667647854346905445201396273291648968142608158533514391348407631818144116768794595226974831093526512117505486679153727123796834305088741279455621586989</span>)</span><br><span class="line">c1, c2 = (<span class="number">361624030197288323178211941746074961985876772079713896964822566468795093475887773853629454653096485450671233584616088768705417987527877166166213574572987732852155320225332020636386698169212072312758052524652761304795529199864805108000796457423822443871436659548626629448170698048984709740274043050729249408577243328282313593461300703078854044587993248807613713896590402657788194264718603549894361488507629356532718775278399264279359256975688280723740017979438505001819438</span>, <span class="number">33322989148902718763644384246610630825314206644879155585369541624158380990667828419255828083639294898100922608833810585530801931417726134558845725168047585271855248605561256531342703212030641555260907310067120102069499927711242804407691706542428236208695153618955781372741765233319988193384708525251620506966304554054884590718068210659709406626033891748214407992041364462525367373648910810036622684929049996166651416565651803952838857960054689875755131784246099270581394</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n1,n2 = pk</span><br><span class="line"></span><br><span class="line">D = <span class="number">2</span>^(<span class="number">4</span>*<span class="number">360</span>-<span class="number">128</span>-<span class="number">2</span>)</span><br><span class="line">B = matrix(ZZ,[[n2,<span class="number">0</span>],[-n1,D]])</span><br><span class="line">L = B.LLL()</span><br><span class="line">q2 = <span class="built_in">abs</span>(L[<span class="number">0</span>][<span class="number">1</span>] // D)</span><br><span class="line">p2 = Integer(<span class="built_in">pow</span>(n2//q2,<span class="number">1</span>/<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">s = <span class="built_in">abs</span>(L[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">q1 = (q2*n1+s)//n2</span><br><span class="line">p1 = Integer(<span class="built_in">pow</span>(n1//q1,<span class="number">1</span>/<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">d1 = invert(e,p1**<span class="number">3</span>*(p1-<span class="number">1</span>)*(q1-<span class="number">1</span>))</span><br><span class="line">d2 = invert(e,p2**<span class="number">3</span>*(p2-<span class="number">1</span>)*(q2-<span class="number">1</span>))</span><br><span class="line">m1 = <span class="built_in">pow</span>(c1,d1,n1)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c2,d2,n2)</span><br><span class="line">flag1 = long_to_bytes(m1)</span><br><span class="line">flag2 = long_to_bytes(m2)</span><br><span class="line"><span class="built_in">print</span>(flag1+flag2)</span><br></pre></td></tr></table></figure><h2 id="强网杯-2022asr"><a class="markdownIt-Anchor" href="#强网杯-2022asr"></a> [强网杯 2022]ASR:</h2><p><strong>n = p<sup>2</sup> × q<sup>2</sup> × r<sup>2</sup> × t<sup>2</sup> = (p × q × r × t)<sup>2</sup></strong>  开方后分解更容易，借助yafu或者factordb得到了<code>p,q,r,t</code></p><p><code>e与phi不互质</code>，而且e很小，<strong>结合中国剩余定理(CRT)求解</strong>：</p><ul><li><p>将同余方程 m<sup>e</sup> ≡ c mod n 化为</p><ul><li>m<sup>e</sup> ≡ c mod p</li><li>m<sup>e</sup> ≡ c mod q</li><li>m<sup>e</sup> ≡ c mod r</li><li>m<sup>e</sup> ≡ c mod t</li></ul></li><li><p>分别求解以上剩余类环(Zmod())得到了</p><ul><li>m ≡ m<sub>1</sub> mod p</li><li>m ≡ m<sub>2</sub> mod q</li><li>m ≡ m<sub>3</sub> mod r</li><li>m ≡ m<sub>4</sub> mod t</li></ul></li><li><p>利用中国剩余定理结合以上m<sub>1</sub> ~ m<sub>4</sub>得到若干m值,</p><ul><li>根据条件筛选</li><li>或者全部转字符观察可见明文</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">n = <span class="number">8250871280281573979365095715711359115372504458973444367083195431861307534563246537364248104106494598081988216584432003199198805753721448450911308558041115465900179230798939615583517756265557814710419157462721793864532239042758808298575522666358352726060578194045804198551989679722201244547561044646931280001</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c = <span class="number">945272793717722090962030960824180726576357481511799904903841312265308706852971155205003971821843069272938250385935597609059700446530436381124650731751982419593070224310399320617914955227288662661442416421725698368791013785074809691867988444306279231013360024747585261790352627234450209996422862329513284149</span></span><br><span class="line">p = <span class="number">225933944608558304529179430753170813347</span></span><br><span class="line">q = <span class="number">260594583349478633632570848336184053653</span></span><br><span class="line">r = <span class="number">218566259296037866647273372633238739089</span></span><br><span class="line">t = <span class="number">223213222467584072959434495118689164399</span></span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = Zmod(p)[]</span><br><span class="line">f = x^e - c </span><br><span class="line">f = f.monic()</span><br><span class="line">result1 = f.roots()</span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = Zmod(q)[]</span><br><span class="line">f = x^e - c </span><br><span class="line">f = f.monic()</span><br><span class="line">result2 = f.roots()</span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = Zmod(r)[]</span><br><span class="line">f = x^e - c </span><br><span class="line">f = f.monic()</span><br><span class="line">result3 = f.roots()</span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = Zmod(t)[]</span><br><span class="line">f = x^e - c </span><br><span class="line">f = f.monic()</span><br><span class="line">result4 = f.roots()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result1:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> result2:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> result3:</span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> result4:</span><br><span class="line">                param1 = [<span class="built_in">int</span>(i[<span class="number">0</span>]), <span class="built_in">int</span>(j[<span class="number">0</span>]), <span class="built_in">int</span>(k[<span class="number">0</span>]), <span class="built_in">int</span>(l[<span class="number">0</span>])]</span><br><span class="line">                param2 = [p,q,r,t]</span><br><span class="line">                m = CRT_list(param1, param2)</span><br><span class="line">                flag = libnum.n2s(<span class="built_in">int</span>(m))</span><br><span class="line">                <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="moectf-2024"><a class="markdownIt-Anchor" href="#moectf-2024"></a> moectf-2024:</h1><h2 id="week1"><a class="markdownIt-Anchor" href="#week1"></a> week1</h2><h3 id="1现代密码学入门指北"><a class="markdownIt-Anchor" href="#1现代密码学入门指北"></a> <strong>1.现代密码学入门指北:</strong></h3><p>RSA解密（有n,p,q,c,e)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">40600296529065757616876034307502386207424439675894291036278463517602256790833</span></span><br><span class="line">p = <span class="number">197380555956482914197022424175976066223</span></span><br><span class="line">q = <span class="number">205695522197318297682903544013139543071</span></span><br><span class="line">c = <span class="number">36450632910287169149899281952743051320560762944710752155402435752196566406306</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">Phi= (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, Phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h3 id="2signin"><a class="markdownIt-Anchor" href="#2signin"></a> <strong>2.Signin:</strong></h3><p>用已知信息表示Phi即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="number">5654386228732582062836480859915557858019553457231956237167652323191768422394980061906028416785155458721240012614551996577092521454960121688179565370052222983096211611352630963027300416387011219744891121506834201808533675072141450111382372702075488292867077512403293072053681315714857246273046785264966933854754543533442866929316042885151966997466549713023923528666038905359773392516627983694351534177829247262148749867874156066768643169675380054673701641774814655290118723774060082161615682005335103074445205806731112430609256580951996554318845128022415956933291151825345962528562570998777860222407032989708801549746</span></span><br><span class="line">pq = <span class="number">18047017539289114275195019384090026530425758236625347121394903879980914618669633902668100353788910470141976640337675700570573127020693081175961988571621759711122062452192526924744760561788625702044632350319245961013430665853071569777307047934247268954386678746085438134169871118814865536503043639618655569687154230787854196153067547938936776488741864214499155892870610823979739278296501074632962069426593691194105670021035337609896886690049677222778251559566664735419100459953672218523709852732976706321086266274840999100037702428847290063111455101343033924136386513077951516363739936487970952511422443500922412450462</span></span><br><span class="line">qp = <span class="number">18047017539289114275195019384090026530425758236625347121394903879980914618669633902668100353788910470141976640337675700570573127020693081175961988571621759711122062452192526924744760561788625702044632350319245961013430665853071569777307047934247268954386678746085438134169871118814865536503043639618655569687077087914198877794354459669808240133383828356379423767736753506794441545506312066344576298453957064590180141648690226266236642320508613544047037110363523129966437840660693885863331837516125853621802358973786440314619135781324447765480391038912783714312479080029167695447650048419230865326299964671353746764860</span></span><br><span class="line">n = <span class="number">18047017539289114275195019384090026530425758236625347121394903879980914618669633902668100353788910470141976640337675700570573127020693081175961988571621759711122062452192526924744760561788625702044632350319245961013430665853071569777307047934247268954386678746085438134169871118814865536503043639618655569687534959910892789661065614807265825078942931717855566686073463382398417205648946713373617006449901977718981043020664616841303517708207413215548110294271101267236070252015782044263961319221848136717220979435486850254298686692230935985442120369913666939804135884857831857184001072678312992442792825575636200505903</span></span><br><span class="line">p_q = <span class="number">279533706577501791569740668595544511920056954944184570513187478007551195831693428589898548339751066551225424790534556602157835468618845221423643972870671556362200734472399328046960316064864571163851111207448753697980178391430044714097464866523838747053135392202848167518870720149808055682621080992998747265496</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">Phi= n-p_q+<span class="number">1</span></span><br><span class="line">d = gmpy2.invert(e, Phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h3 id="3ez_hash"><a class="markdownIt-Anchor" href="#3ez_hash"></a> 3.ez_hash:</h3><p>题目介绍中说是联系方式，则应是<code>纯数字</code>，利用hashcat爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -m <span class="number">1400</span> -a <span class="number">3</span> 3a5137149f705e4da1bf6742e62c018e3f7a1784ceebcb0030656a2b42f50b6a  <span class="number">2100</span>?d?d?d?d?d?d</span><br></pre></td></tr></table></figure><p>1400表示sha256的编码，?d为数字</p><h3 id="4big-and-small"><a class="markdownIt-Anchor" href="#4big-and-small"></a> <strong>4.Big and small:</strong></h3><p>小明文爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="number">150409620528288093947185249913242033500530715593845912018225648212915478065982806112747164334970339684262757</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">n = <span class="number">20279309983698966932589436610174513524888616098014944133902125993694471293062261713076591251054086174169670848598415548609375570643330808663804049384020949389856831520202461767497906977295453545771698220639545101966866003886108320987081153619862170206953817850993602202650467676163476075276351519648193219850062278314841385459627485588891326899019745457679891867632849975694274064320723175687748633644074614068978098629566677125696150343248924059801632081514235975357906763251498042129457546586971828204136347260818828746304688911632041538714834683709493303900837361850396599138626509382069186433843547745480160634787</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deco</span>(<span class="params">c,e,n</span>):</span><br><span class="line">    k=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        m=c+n*k</span><br><span class="line">        result,flag=gmpy2.iroot(m,e)</span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        k+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">m = deco(c,e,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h3 id="5baby_equation"><a class="markdownIt-Anchor" href="#5baby_equation"></a> <strong>5.baby_equation:</strong></h3><p>k已知，(a<sup>2</sup> + 1)<em>(b<sup>2</sup> + 1) - 2</em>(a - b)<em>(a</em>b - 1) = 4*(k + a*b)</p><p>化简得到 (a+1)<sup>2</sup>(b-1)<sup>2</sup>=4k</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">k = <span class="string">&#x27;2227e398fc6ffcf5159863a345df85ba50d6845f8c06747769fee78f598e7cb1bcf875fb9e5a69ddd39da950f21cb49581c3487c29b7c61da0f584c32ea21ce1edda7f09a6e4c3ae3b4c8c12002bb2dfd0951037d3773a216e209900e51c7d78a0066aa9a387b068acbd4fb3168e915f306ba40&#x27;</span></span><br><span class="line">k = <span class="built_in">int</span>(k, <span class="number">16</span>)</span><br><span class="line">k *= <span class="number">4</span></span><br><span class="line">product = iroot(k,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(product)</span><br><span class="line"><span class="comment"># product = (a+1)(b-1) ,yafu分解</span></span><br></pre></td></tr></table></figure><p><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240811075934188.png" alt="image-20240811075934188" / loading="lazy"></p><p>接下来要爆破对应a,b的因子组合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"></span><br><span class="line">factors = [</span><br><span class="line">    <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">31</span>, <span class="number">61</span>, <span class="number">223</span>, <span class="number">4013</span>, <span class="number">281317</span>, <span class="number">4151351</span>,</span><br><span class="line">    <span class="number">339386329</span>, <span class="number">370523737</span>, <span class="number">26798471753993</span>, <span class="number">5404604441993</span>,</span><br><span class="line">    <span class="number">25866088332911027256931479223</span>, <span class="number">64889106213996537255229963986303510188999911</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">target_prefix = <span class="string">b&quot;moectf&quot;</span></span><br><span class="line"></span><br><span class="line">found = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(factors) + <span class="number">1</span>): </span><br><span class="line">    <span class="keyword">for</span> combo <span class="keyword">in</span> combinations(factors, r):</span><br><span class="line">        product = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> factor <span class="keyword">in</span> combo:</span><br><span class="line">            product *= factor</span><br><span class="line">        </span><br><span class="line">        product_str = long_to_bytes(product)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> product_str.startswith(target_prefix):</span><br><span class="line">            found.append((combo, product))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Found&quot;</span>, combo)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Product:&quot;</span>, product_str)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240811080154896.png" alt="image-20240811080154896" / loading="lazy"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">factors = [</span><br><span class="line">    <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">31</span>, <span class="number">61</span>, <span class="number">223</span>, <span class="number">4013</span>, <span class="number">281317</span>, <span class="number">4151351</span>,</span><br><span class="line">    <span class="number">339386329</span>, <span class="number">370523737</span>, <span class="number">26798471753993</span>, <span class="number">5404604441993</span>,</span><br><span class="line">    <span class="number">25866088332911027256931479223</span>, <span class="number">64889106213996537255229963986303510188999911</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">a=<span class="number">2</span>*<span class="number">2</span>*<span class="number">3</span>*<span class="number">223</span>*<span class="number">4013</span>*<span class="number">281317</span>*<span class="number">4151351</span>*<span class="number">339386329</span>*<span class="number">26798471753993</span>*<span class="number">25866088332911027256931479223</span>-<span class="number">1</span></span><br><span class="line">b=<span class="number">2</span>*<span class="number">2</span>*<span class="number">3</span>*<span class="number">31</span>*<span class="number">61</span>*<span class="number">370523737</span>*<span class="number">5404604441993</span>*<span class="number">64889106213996537255229963986303510188999911</span>+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(a))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(b))</span><br></pre></td></tr></table></figure><h2 id="week2"><a class="markdownIt-Anchor" href="#week2"></a> week2:</h2><h3 id="1大白兔"><a class="markdownIt-Anchor" href="#1大白兔"></a> 1.大白兔：</h3><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240819103844535.png" alt="image-20240819103844535" style="zoom: 33%;" / loading="lazy"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e1 = <span class="number">12886657667389660800780796462970504910193928992888518978200029826975978624718627799215564700096007849924866627154987365059524315097631111242449314835868137</span></span><br><span class="line">e2 = <span class="number">12110586673991788415780355139635579057920926864887110308343229256046868242179445444897790171351302575188607117081580121488253540215781625598048021161675697</span></span><br><span class="line">N = <span class="number">107840121617107284699019090755767399009554361670188656102287857367092313896799727185137951450003247965287300048132826912467422962758914809476564079425779097585271563973653308788065070590668934509937791637166407147571226702362485442679293305752947015356987589781998813882776841558543311396327103000285832158267</span></span><br><span class="line">c1 = <span class="number">15278844009298149463236710060119404122281203585460351155794211733716186259289419248721909282013233358914974167205731639272302971369075321450669419689268407608888816060862821686659088366316321953682936422067632021137937376646898475874811704685412676289281874194427175778134400538795937306359483779509843470045</span></span><br><span class="line">c2 = <span class="number">21094604591001258468822028459854756976693597859353651781642590543104398882448014423389799438692388258400734914492082531343013931478752601777032815369293749155925484130072691903725072096643826915317436719353858305966176758359761523170683475946913692317028587403027415142211886317152812178943344234591487108474</span></span><br><span class="line">c = <span class="number">21770231043448943684137443679409353766384859347908158264676803189707943062309013723698099073818477179441395009450511276043831958306355425252049047563947202180509717848175083113955255931885159933086221453965914552773593606054520151827862155643433544585058451821992566091775233163599161774796561236063625305050</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">x = <span class="built_in">pow</span>(<span class="number">5</span>,e1*e2,N)*<span class="built_in">pow</span>(c1,e2,N)  </span><br><span class="line">y = <span class="built_in">pow</span>(<span class="number">7</span>,e1*e2,N)*<span class="built_in">pow</span>(c2,e1,N)</span><br><span class="line">p = gmpy2.gcd(y-x, N)</span><br><span class="line">q = N//p</span><br><span class="line">Phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, Phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, N)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h3 id="2more_secure_rsa"><a class="markdownIt-Anchor" href="#2more_secure_rsa"></a> 2.More_secure_RSA：</h3><p><strong>C = m<sup>e</sup> mod (n*r)</strong>  ,又n,r互素</p><p>==&gt;  <code> C = m^e mod r</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="number">12992001402636687796268040906463852467529970619872166160007439409443075922491126428847990768804065656732371491774347799153093983118784555645908829567829548859716413703103209412482479508343241998746249393768508777622820076455330613128741381912099938105655018512573026861940845244466234378454245880629342180767100764598827416092526417994583641312226881576127632370028945947135323079587274787414572359073029332698851987672702157745794918609888672070493920551556186777642058518490585668611348975669471428437362746100320309846155934102756433753034162932191229328675448044938003423750406476228868496511462133634606503693079</span></span><br><span class="line">n = <span class="number">16760451201391024696418913179234861888113832949815649025201341186309388740780898642590379902259593220641452627925947802309781199156988046583854929589247527084026680464342103254634748964055033978328252761138909542146887482496813497896976832003216423447393810177016885992747522928136591835072195940398326424124029565251687167288485208146954678847038593953469848332815562187712001459140478020493313651426887636649268670397448218362549694265319848881027371779537447178555467759075683890711378208297971106626715743420508210599451447691532788685271412002723151323393995544873109062325826624960729007816102008198301645376867</span></span><br><span class="line">C = <span class="number">1227033973455439811038965425016278272592822512256148222404772464092642222302372689559402052996223110030680007093325025949747279355588869610656002059632685923872583886766517117583919384724629204452792737574445503481745695471566288752636639781636328540996436873887919128841538555313423836184797745537334236330889208413647074397092468650216303253820651869085588312638684722811238160039030594617522353067149762052873350299600889103069287265886917090425220904041840138118263873905802974197870859876987498993203027783705816687972808545961406313020500064095748870911561417904189058228917692021384088878397661756664374001122513267695267328164638124063984860445614300596622724681078873949436838102653185753255893379061574117715898417467680511056057317389854185497208849779847977169612242457941087161796645858881075586042016211743804958051233958262543770583176092221108309442538853893897999632683991081144231262128099816782478630830512</span></span><br><span class="line">N = <span class="number">1582486998399823540384313363363200260039711250093373548450892400684356890467422451159815746483347199068277830442685312502502514973605405506156013209395631708510855837597653498237290013890476973370263029834010665311042146273467094659451409034794827522542915103958741659248650774670557720668659089460310790788084368196624348469099001192897822358856214600885522908210687134137858300443670196386746010492684253036113022895437366747816728740885167967611021884779088402351311559013670949736441410139393856449468509407623330301946032314939458008738468741010360957434872591481558393042769373898724673597908686260890901656655294366875485821714239821243979564573095617073080807533166477233759321906588148907331569823186970816432053078415316559827307902239918504432915818595223579467402557885923581022810437311450172587275470923899187494633883841322542969792396699601487817033616266657366148353065324836976610554682254923012474470450197</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">r = N//n</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line">Phi = r-<span class="number">1</span></span><br><span class="line">d = invert(e, Phi)</span><br><span class="line">m = <span class="built_in">pow</span>(C, d, r)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h3 id="3new_system"><a class="markdownIt-Anchor" href="#3new_system"></a> 3.new_system:</h3><p>由条件可得到  <code>c1+c2-c3 = (a1+a2-a3) mod q</code></p><p>令 <code>C = c1+c2+c3</code> , <code>A = a1+a2+a3</code></p><p>即 <code>C = Ax mod q</code></p><p>则 **CA<sup>-1</sup>  mod q =  x **</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">g1=[<span class="number">48152794364522745851371693618734308982941622286593286738834529420565211572487</span>, <span class="number">21052760152946883017126800753094180159601684210961525956716021776156447417961</span>]</span><br><span class="line">g2=[<span class="number">48649737427609115586886970515713274413023152700099032993736004585718157300141</span>, <span class="number">6060718815088072976566240336428486321776540407635735983986746493811330309844</span>]</span><br><span class="line">g3=[<span class="number">30099883325957937700435284907440664781247503171217717818782838808179889651361</span>, <span class="number">85333708281128255260940125642017184300901184334842582132090488518099650581761</span>]</span><br><span class="line">q = <span class="number">105482865285555225519947662900872028851795846950902311343782163147659668129411</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># c1 = (a1*x + gift1) mod q</span></span><br><span class="line"><span class="comment"># c2 = (a2*x + gift2) mod q</span></span><br><span class="line"><span class="comment"># c3 = (a3*x + gift) mod q</span></span><br><span class="line"><span class="comment"># gift = (gift1+gift2) mod q</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c1+c2-c3 = x(a1+a2-a3) mod q</span></span><br><span class="line"><span class="built_in">print</span>(gcd(g1[<span class="number">0</span>]+g2[<span class="number">0</span>]-g3[<span class="number">0</span>], q))</span><br><span class="line">x = invert(g1[<span class="number">0</span>]+g2[<span class="number">0</span>]-g3[<span class="number">0</span>], q)*(g1[<span class="number">1</span>]+g2[<span class="number">1</span>]-g3[<span class="number">1</span>]) % q</span><br><span class="line">gift = (g3[<span class="number">1</span>]-x*g3[<span class="number">0</span>]) % q</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(gift))</span><br></pre></td></tr></table></figure><h3 id="4ezlengrede"><a class="markdownIt-Anchor" href="#4ezlengrede"></a> 4.ezlengrede:</h3><p>通过判断二次剩余</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = ...</span><br><span class="line">a = ...</span><br><span class="line">cipher=[...]</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cipher:</span><br><span class="line">    <span class="keyword">if</span> jacobi(c,p)==-<span class="number">1</span>:</span><br><span class="line">        flag+=<span class="string">&#x27;0&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag+=<span class="string">&#x27;1&#x27;</span></span><br><span class="line"></span><br><span class="line">flag=<span class="built_in">int</span>(flag,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag))</span><br><span class="line"><span class="comment"># moectf&#123;minus_one_1s_n0t_qu4dr4tic_r4sidu4_when_p_mod_f0ur_equ41_to_thr33&#125;</span></span><br></pre></td></tr></table></figure><h3 id="5rsa_revenge"><a class="markdownIt-Anchor" href="#5rsa_revenge"></a> 5.rsa_revenge:</h3><h4 id="rsa剪枝问题"><a class="markdownIt-Anchor" href="#rsa剪枝问题"></a> <strong><code>RSA剪枝问题：</code></strong></h4><ul><li>已知条件：n = p*q ，p和q的二进制序列相反</li><li>搜索方式：<ul><li>从低位向高位搜索</li><li>p的低位bits位已知，与xor的高bits位同</li></ul></li><li>剪枝条件：<ul><li>将p和q剩下位全部填充为1,需要满足p*q&gt;n</li><li>将p和q剩下位全部填充为0,需要满足p*q&lt;n</li><li>这里注意要把p的已知的高bits位加上</li><li>确保p*q的已知高位与n相同</li></ul></li><li>结束条件：<ul><li>bits = 256</li><li>n = p*q</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">141326884939079067429645084585831428717383389026212274986490638181168709713585245213459139281395768330637635670530286514361666351728405851224861268366256203851725349214834643460959210675733248662738509224865058748116797242931605149244469367508052164539306170883496415576116236739853057847265650027628600443901</span></span><br><span class="line">c = <span class="number">47886145637416465474967586561554275347396273686722042112754589742652411190694422563845157055397690806283389102421131949492150512820301748529122456307491407924640312270962219946993529007414812671985960186335307490596107298906467618684990500775058344576523751336171093010950665199612378376864378029545530793597</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">p,q,bits,c</span>):</span><br><span class="line">    <span class="keyword">if</span> bits==<span class="number">256</span>:</span><br><span class="line">        <span class="keyword">if</span> p*q==n:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Find!&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(p)</span><br><span class="line">            q=n//p</span><br><span class="line">            <span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, inverse(<span class="number">65537</span>, (p-<span class="number">1</span>)*(q-<span class="number">1</span>)),n)))</span><br><span class="line">    <span class="keyword">for</span> pp <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> qq <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">            tmp_p=p+pp*<span class="number">2</span>**(<span class="number">511</span>-bits)+qq*<span class="number">2</span>**bits</span><br><span class="line">            tmp_q=q+qq*<span class="number">2</span>**(<span class="number">511</span>-bits)+pp*<span class="number">2</span>**bits</span><br><span class="line">            <span class="keyword">if</span> tmp_p*tmp_q&lt;=n <span class="keyword">and</span> (tmp_p+<span class="number">2</span>**(<span class="number">511</span>-bits))*(tmp_q+<span class="number">2</span>**(<span class="number">511</span>-bits))&gt;=n <span class="keyword">and</span> tmp_p*tmp_q%(<span class="number">2</span>**(bits+<span class="number">1</span>))==n%(<span class="number">2</span>**(bits+<span class="number">1</span>)):</span><br><span class="line">                find(tmp_p, tmp_q, bits+<span class="number">1</span>, c)</span><br><span class="line"></span><br><span class="line">find(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, c)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="basectf-2024"><a class="markdownIt-Anchor" href="#basectf-2024"></a> BaseCTF-2024:</h1><h2 id="week1-2"><a class="markdownIt-Anchor" href="#week1-2"></a> week1:</h2><h3 id="1你会算md5吗"><a class="markdownIt-Anchor" href="#1你会算md5吗"></a> 1.你会算md5吗：</h3><p>md5碰撞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> printable</span><br><span class="line"></span><br><span class="line">md5_hash = [</span><br><span class="line">    <span class="string">&#x27;9d5ed678fe57bcca610140957afab571&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;03c7c0ace395d80182db07ae2c30f034&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;e1671797c52e15f763380b45e841ec32&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;0d61f8370cad1d412f80b84d143e1257&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b9ece18c950afbfa6b0fdbfa4ff731d3&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;800618943025315f869e4e1f09471012&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;f95b70fdc3088560732a5ac135644506&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;92eb5ffee6ae2fec3ad71c777531578f&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;eccbc87e4b5ce2fe28308fd9f2a7baf3&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;e4da3b7fbbce2345d7772b0674a318d5&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;336d5ebc5436534e61d16e63ddfca327&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;eccbc87e4b5ce2fe28308fd9f2a7baf3&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;45c48cce2e2d7fbdea1afc51c7c6ad26&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;336d5ebc5436534e61d16e63ddfca327&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;8f14e45fceea167a5a36dedd4bea2543&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1679091c5a880faf6fb5e6087eb1b2dc&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;336d5ebc5436534e61d16e63ddfca327&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;92eb5ffee6ae2fec3ad71c777531578f&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;8277e0910d750195b448797616e091ad&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;c81e728d9d4c2f636f067f89cc14862c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;336d5ebc5436534e61d16e63ddfca327&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;c9f0f895fb98ab9159f51fd0297e236d&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;e1671797c52e15f763380b45e841ec32&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;e1671797c52e15f763380b45e841ec32&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a87ff679a2f3e71d9181a67b7542122c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;8277e0910d750195b448797616e091ad&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;92eb5ffee6ae2fec3ad71c777531578f&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;45c48cce2e2d7fbdea1afc51c7c6ad26&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;c9f0f895fb98ab9159f51fd0297e236d&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cbb184dd8e05c9709e5dcaedaa0495cf&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mm=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> h <span class="keyword">in</span> md5_hash:</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> printable:</span><br><span class="line">        <span class="keyword">if</span> md5(p.encode()).hexdigest()==h:</span><br><span class="line">            mm+=p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mm)</span><br></pre></td></tr></table></figure><h3 id="2hellocrypto"><a class="markdownIt-Anchor" href="#2hellocrypto"></a> 2.helloCrypto:</h3><p>AES解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">key_long = <span class="number">208797759953288399620324890930572736628</span></span><br><span class="line">ciphertext = <span class="string">b&#x27;U\xcd\xf3\xb1 r\xa1\x8e\x88\x92Sf\x8a`Sk],\xa3(i\xcd\x11\xd0D\x1edd\x16[&amp;\x92@^\xfc\xa9(\xee\xfd\xfb\x07\x7f:\x9b\x88\xfe&#123;\xae&#x27;</span></span><br><span class="line"></span><br><span class="line">key = long_to_bytes(key_long)</span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line"></span><br><span class="line">plaintext_padded = cipher.decrypt(ciphertext)</span><br><span class="line">plaintext = unpad(plaintext_padded, AES.block_size)</span><br><span class="line"><span class="built_in">print</span>(plaintext.decode())</span><br></pre></td></tr></table></figure><h3 id="3ez_rsa"><a class="markdownIt-Anchor" href="#3ez_rsa"></a> 3.ez_rsa:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> symbols, solve</span><br><span class="line"></span><br><span class="line">n = <span class="number">96557532552764825748472768984579682122986562613246880628804186193992067825769559200526147636851266716823209928173635593695093547063827866240583007222790344897976690691139671461342896437428086142262969360560293350630096355947291129943172939923835317907954465556018515239228081131167407674558849860647237317421</span></span><br><span class="line">not_phi = <span class="number">96557532552764825748472768984579682122986562613246880628804186193992067825769559200526147636851266716823209928173635593695093547063827866240583007222790384900615665394180812810697286554008262030049280213663390855887077502992804805794388166197820395507600028816810471093163466639673142482751115353389655533205</span></span><br><span class="line">c = <span class="number">37077223015399348092851894372646658604740267343644217689655405286963638119001805842457783136228509659145024536105346167019011411567936952592106648947994192469223516127472421779354488529147931251709280386948262922098480060585438392212246591935850115718989480740299246709231437138646467532794139869741318202945</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># not_phi = n + 2(p+q) +4</span></span><br><span class="line"><span class="comment"># p+q = (not_phi - n - 4)/2 = Z</span></span><br><span class="line"><span class="comment"># p*q = n</span></span><br><span class="line"><span class="comment"># q = n/p</span></span><br><span class="line"><span class="comment"># p^2 + n = Zp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Z = (not_phi - n - 4)/2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = symbols(&#x27;p&#x27;)</span></span><br><span class="line"><span class="comment">#q = symbols(&#x27;q&#x27;)</span></span><br><span class="line"><span class="comment">#ans = solve(p**2 + n - Z*p,p)</span></span><br><span class="line"><span class="comment">#print(ans)</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">8141718443899971866435611383307659937822484107070436226370768656806495239448624178566680116128893503281864119780033117546021082236554869984932214653357543</span></span><br><span class="line">q = <span class="number">11859601043451548704239065811750630150121409048356115322381859833767027517389301429046456876409906319499766276197893850146733170630849226147814156555750347</span></span><br><span class="line">Phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, Phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h3 id="4十七倍"><a class="markdownIt-Anchor" href="#4十七倍"></a> 4.十七倍：</h3><p>计算了 17 在模 256 下的逆元（即<code>乘法逆元</code>）。然后，对于 <code>cipher</code> 数组中的每一个元素，我们使用逆元来恢复原始的字符值，并将这些值组合成一个字节串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">cipher=[</span><br><span class="line">         <span class="number">98</span>, <span class="number">113</span>, <span class="number">163</span>, <span class="number">181</span>, <span class="number">115</span>, <span class="number">148</span>, <span class="number">166</span>,  <span class="number">43</span>,   <span class="number">9</span>,  <span class="number">95</span>,</span><br><span class="line">        <span class="number">165</span>, <span class="number">146</span>,  <span class="number">79</span>, <span class="number">115</span>, <span class="number">146</span>, <span class="number">233</span>, <span class="number">112</span>, <span class="number">180</span>,  <span class="number">48</span>,  <span class="number">79</span>,</span><br><span class="line">         <span class="number">65</span>, <span class="number">181</span>, <span class="number">113</span>, <span class="number">146</span>,  <span class="number">46</span>, <span class="number">249</span>,  <span class="number">78</span>, <span class="number">183</span>,  <span class="number">79</span>, <span class="number">133</span>,</span><br><span class="line">        <span class="number">180</span>, <span class="number">113</span>, <span class="number">146</span>, <span class="number">148</span>, <span class="number">163</span>,  <span class="number">79</span>,  <span class="number">78</span>,  <span class="number">48</span>, <span class="number">231</span>,  <span class="number">77</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">inverse_17 = <span class="built_in">pow</span>(<span class="number">17</span>,-<span class="number">1</span>,<span class="number">256</span>)</span><br><span class="line"></span><br><span class="line">original_flag = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> byte <span class="keyword">in</span> cipher:</span><br><span class="line">    original_byte = (byte * inverse_17) % <span class="number">256</span></span><br><span class="line">    original_flag.append(original_byte)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(original_flag).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="5babyrsa"><a class="markdownIt-Anchor" href="#5babyrsa"></a> 5.babyrsa:</h3><p>用sage计算Phi</p><p><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240816011641998.png" alt="image-20240816011641998" / loading="lazy"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">104183228088542215832586853960545770129432455017084922666863784677429101830081296092160577385504119992684465370064078111180392569428724567004127219404823572026223436862745730173139986492602477713885542326870467400963852118869315846751389455454901156056052615838896369328997848311481063843872424140860836988323</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">82196463059676486575535008370915456813185183463924294571176174789532397479953946434034716719910791511862636560490018194366403813871056990901867869218620209108897605739690399997114809024111921392073218916312505618204406951839504667533298180440796183056408632017397568390899568498216649685642586091862054119832</span></span><br><span class="line"></span><br><span class="line">Phi = <span class="number">104183228088542215832586853960545770129432455017084922666863784677429101830081296092160577385504119992684465370064078111180392569428724567004127219404823572026223436862745730173139986492602477713885542326870467400963852118869315846751389455454901156056052615838896369328997848311481063843872424140860836988322</span></span><br><span class="line">d = inverse(e, Phi)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h3 id="6babypack"><a class="markdownIt-Anchor" href="#6babypack"></a> 6.babypack:</h3><p>简单的**<code>背包解密</code>**</p><p>根据加密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">    <span class="keyword">if</span> bin_m[i]==<span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        c=c+a[i]</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_flag</span>(<span class="params">a,c</span>):</span><br><span class="line">    bin_m = [<span class="string">&#x27;0&#x27;</span>] * <span class="built_in">len</span>(a)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">        <span class="keyword">if</span> c &gt;= a[i]:</span><br><span class="line">            bin_m[i] = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">            c -= a[i]</span><br><span class="line"></span><br><span class="line">    m = <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(bin_m),<span class="number">2</span>)</span><br><span class="line">    flag = long_to_bytes(m)</span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a= [<span class="number">2487264674516612702148381262059366937897201508455413114345031288894980789076145147579418259432661232747375904997965581530362268904008339124626472045717075482791021095030019783589425299870946373246221582957232862473515</span>, <span class="number">491733695728183987781854883946776199363545034763223630648303216239781071808983441788738994635864262288104702316190256147614095355462666760091586746521889127102395089946736744234701020777747486645716679961505355358205</span>, <span class="number">110323038758283816811655397189354730775114318542406507944678995133064353922234139010858233544980338693080719766808774615216332973443076471838385315798081800456260331047745824029902641504699030254172864776140503685719</span>, <span class="number">21329601123439484788549839891633989762344638209267595412456647269024794605613697213699096256470155035750114059504925376661660484839061252258268241386676023785213539005867805566800471943519247336183762390966700950019</span>, <span class="number">7146972597944713271040951137457604863561388249875746261956055482229418349264570561740906104126974792505856583850338097727129246644471065603435449813884941071413766137227119139128098345457922432088128969598942863267</span>, <span class="number">1346101131622672931978096423414991055086097907048045187836881598919564312718270178534519827267497280433625574785132174894812908583233359458000469975702103413693480199742325839719191134247009906270778775450756715188</span>, <span class="number">431832097768527518676165198802192386603746291434967601504548859319580699889723090943427634867984592194172569910901514799190511020246917662162535632202054961537707269684557393598823535364874075052250490284484829188</span>, <span class="number">140385263282271996264759155211641776877746297983736897311922733831813190094504225023609340831846735540994403916688230922925129855025970272950216444321463493579227283703118512150491635819942098587286980862817753505</span>, <span class="number">34223371325515207445588748757581712557393912157235932688701226001484995652561037930828670928779595410194265999875772181711329727812185265441887453894003309876654082495957062628413923487565276953961953102939899664</span>, <span class="number">11277905223110088306111589808536546872836546320235997789453098291242971723694602770076671423955063276020078678714571127064308764611705435202479293805661470178917099557275252963592432838615626750886647727435412727</span>, <span class="number">2615533435460831263145388899927800470846179005257762751742107113431800042995970550154282940437470113325491219189765587324789634252029440596113709555932091761129000675863727140738692649309833681187804499985953136</span>, <span class="number">936680841170458882946412959909966575946011948314629933325082014426837165501136249855420901858482634295013806361789689361684904674438042695516337484436348646919308417999556756779144910987756875858573687134864914</span>, <span class="number">240803995584844951172124454225548986410808735949094019867567366838810221297826531921690948148961695516283629928962961745839887826049348862278548294987215333063020792491250359616172365439958324315638641990190536</span>, <span class="number">74980313650452416147684959971591530004150916322659108850519926847892455755211157414650129501071119906261853154503022754482691495645170933619292755026582075009055897885581671027043347130782615603358690889357969</span>, <span class="number">17373734350550516610959609643239951947839958095899981508834140825450716407631617618229082722622331706459216379319570540046133821392793975119423828799726656124807834541043219269949459907314628636546219059231483</span>, <span class="number">4383939698435145446949414991318424065438281430941348230548310095735465803169460840233678696507780083107318568406471009158126616954496458697727524252433591785759305622568557705826283690985480130620325779855269</span>, <span class="number">1070435075033499499988967771003353861621342562651011567215908784740129578236135452228720299864117045007232989018924013752836270314752592099997410344317383430641687448457000377071747633795773722163076615405153</span>, <span class="number">354613024399513291150023928129989293929227226203084151945112636505041432337820329935805740802403361855625313123094613318180050195219366366832494130593248906011113600242755768635094775633827342114020854687801</span>, <span class="number">82597124584081826710375601757684765457467298282386480837692933784824657535317108286212691529276214884031365269733862817274058538453459456296256548913748615606422415053313052283494323168620576805637766138197</span>, <span class="number">26135834190257866104316629323550052649627679758726229473294221139854796563641126471998920211481501156701889782668173105315082084500683017294728437322818254222939692828669475566191154442279318530752996234399</span>, <span class="number">5321914533271631715766698346734309258597941523919808971175049357994196078126479079595401724485236733828962687678778457409546781470810737250537642200901652790857563365204935103019528537962033407161035692676</span>, <span class="number">1401112116815344363602973427355047116358185953451255358550792547953394603648490800732761959337994181037602301212276448178218413428984435465643957862122433848889149559184391769249005008972240636924677483332</span>, <span class="number">340703164964920022751406615239919113589733348338271455697386514814772581315065581482054968704086006813510346859307625729162886049905513425065578320526943584411252201523709613325050800852296078315276309498</span>, <span class="number">87840565476176074750781589683807196881040923233689789764972859007886298300522765664170224177346224637510402223797751637511990096677274023769380478419759017880813713095034065541851821136431753956971681001</span>, <span class="number">19670793194720557916718563116693476958260133378839723765611437953301903581689095646338017322208705125479649557618768892326788688569445543579968049624743997901012938768052637463357937838813048475700143702</span>, <span class="number">4813717864536159278344281889539442680460787707429632446095662166356039450500759565004728794684170823084248242129657936118206321365817871353015182900801593481805141407218121604733002829781487535789180828</span>, <span class="number">1042206069053701098495071546906704343612504895408542932593774355364200288153617940373728364353536406373351075906293793845088075847011440543341941529120830192687505151588415115374221938124244686599669458</span>, <span class="number">194044946903756616103043562433809500007183272927392950867023951726626302681204141127037211903589021504233703959475286805099197368181117710043885464503673129287184477006142067195426098588591382748102539</span>, <span class="number">57242060503628134854797583503415516863794342630010325140908044397602380211468806869876771678223543893631961137313994861319272460663638480876700367769402916003571424012128837346480997355093988632012775</span>, <span class="number">10220201967005002779370447788097151915347020902180766203690278038856770790331091587750957262611786369059831723020056245241984653662463224025520044810966000669665537134571188694822388194379280786606327</span>, <span class="number">3267926212173074655716273983885176036956276231571067023300127600981173234474770474267538130720791055154389260987137327011230845199160118826368874310750622421181065045300794979970673152630315803973451</span>, <span class="number">664310922264744733608679352162235206229153782441085066286192469594499932348386155418089005696350197905438895173077254739918594652439993237866669330317791070351667267902119216464673735535997917820053</span>, <span class="number">157621450510303034999027157498529810254434467859123877137482107910574969124384732028159729373548578204828393076100787322321913754468400698891584836797607004658385107761645961934718993971913922689493</span>, <span class="number">39332477720879659647769207180648194166511069149312182714850691343807294060027257884701895063257342090729165323939249852666973310856943035346466688523098612569329263778095249692454805322913109933451</span>, <span class="number">8981431226314577645818078061310516067058739244501260778838272265495867618491462415652789974290152305589437388668252286740099675804549931870318361834902625342381411139234786285243806607019356580655</span>, <span class="number">2112396066721715241251602227199629841249291526749264633946336472170358658345723532373776051582626845585398413757777914886165302637471620129930025840435283626998895529130832700898103592084193587990</span>, <span class="number">469796330799746978963007177579525242476491475859713462679382870110198758612531699613499280185379426640464846165230615898408348461001941619050157303936273348173453633557613625134687931175489772308</span>, <span class="number">115039894603762374765072518903656214032673578314477265152318302986985809844170481821167559173999270345678822988509361838537021290790266729339932399789571955857561187896624119148469524606927195502</span>, <span class="number">29664847413037439140755929162295500789926130685594096951097063583886105875553862215342779333568726148068998390489061260679772397420854474310952173916283562144502155749545173676547095974974938801</span>, <span class="number">6556839835049647931901086051581445260744766665407776927047263448383041272915616955807464961262297820118065353994454969038345182131864552405100904248845811998006038518360062998811216993218123317</span>, <span class="number">1777902487663062541759851155686901732751487652837314110752529657038468352750515100993079307083868172100714925159868062197729467104948375724637901426300367514987134187716080043905739938236648704</span>, <span class="number">496319028827230065370808145407239788641593404351668605447266421139929451476993248197319730317200648698252327668625409509842367526798038085336803728242097138638139634601057690936621540950362878</span>, <span class="number">91859873982601930765698107766946424315968932113724973875252752520495744658349166435087906664763198237819106317321871232725285852613201351155535304791295392982339051653723048621713854087558299</span>, <span class="number">27416797198170440695880404003135961426335900780086489077063102228234854286849577430053665684665123525576025865136178905344946412182398068100227278108238228179476948006111402146551358956042173</span>, <span class="number">6618792570596090569883178232621713030844697317972184177900266954498675602890666553071207714570183352868264445779550306428622314821163774496224109073830696331713973117656394498431868066547419</span>, <span class="number">2170402078990376080093979069174241330730093169079857263825716044536454255816623476318486713531051261924372354329543376436907081387161693951811518904258013624768207438418761774847657241464116</span>, <span class="number">444068419739995022918617734805868711289130441640491361059833564963918508148289061718666452354434057970227476744547047349557417149242164606932560068546338531971271707670031796603537502372902</span>, <span class="number">116657711114961473575551110004924695540253659208616449841332120251303948007722209463493630964437083428655981974738051994193994806043789586554127478932520376572981058192629163539170482099439</span>, <span class="number">26060438230704097273528583087224964538829526126764669880723211182150736154082956489319587015488424248074673973497150602509972124276820315641896501503925719577821672512750083923483639733416</span>, <span class="number">6312791407424911633066282842976932623335914208291314848182683302453777089215292160945721990083867179076948154652506406356338815828714441906485780965753668277560566183244931348859397184996</span>, <span class="number">1692738421964980687206278894671327723911704272751755954222196367628340111939187266884312772028554097537058570911615150944663230388612366056826914851034642492298594744849153229556190046330</span>, <span class="number">467525048501123667461709936020772038812998605707446973687794928398759672463134111033796530786478727006399722869173671763892936977996495279695995929887621412909042553923445043307978487073</span>, <span class="number">100524774903368088338735495212617525628101069016243368191042349062731422745652851141040067275932170134907320208205726289799197848585810532178559348960204294517902672414604810447030596048</span>, <span class="number">27814678376250636475963101212563090069738325215292874239553841311037561288624279025540601779796471707609056593491462913915467359662214011975515860736192625178250236017806638891058352841</span>, <span class="number">6146583639189016851959336110111529802617165794295583668085087256400497268514196451801697302172354876150306785802188833007655768181472221094475392274540015787948511952367768046413009035</span>, <span class="number">1972647620592074216061102097901025152958921034850117568363055778941629490654706191168761681590445732321415108675787531563680577749629570660705072798303247953275401784690900022657739322</span>, <span class="number">371444236734952267365204917912482218024760669256564601735746557802172061599306636753624221981211002583971063750448869544186339158302695225083644994003958727288476784454648096424712122</span>, <span class="number">122254251587569792335530528509722911970032904171801982862469794399827245263786995733489731913997837358853070479769024383526380208988565918719151600653752397319872277146128837497328015</span>, <span class="number">37286085540618400296289156352820709922577362907484951458689730829327977274283958429361031670068907334172105855310654077662912181145565822690393824208950538512990718744603086462751297</span>, <span class="number">8960386121829638279311227577342777825734976587843199435094340053720338004424184197136819101116475086084110882985205105967675766957208204488229410580925549838579346975088433058825112</span>, <span class="number">2276020215301107373585539745757682715066838555468744061772014192384015274014672056309929648681686089838637957127768944113418121587630588726390948566064269910008396907056486696440621</span>, <span class="number">607349939368134408551415861865227396073824635286316486245465114777775395388058059102705505424561001490318248134384090100571125911216424062773005875309952406284203774537367839133285</span>, <span class="number">119036276576206703263155095063111697848826207711313825926870015597766389307963670003146886377762517538032971265642879985310317695973899218804472784113163457901422724084711780785647</span>, <span class="number">42030777748108550530459203444475857940945563824576240738615672332753050069206966495014628929275783847295884969372071131041457167837216841146848083118096773135990284469263324779443</span>, <span class="number">7801996642301319152692691810553695688255137357013588495692283033031549008190374987427339686278893185224986120367594016951691992507271905708595080902010159659368839867860433342236</span>, <span class="number">2208574074019210752518459502962754515153645798717698412888529548015314931730564928870825878207969197632997431492713572137381185806543942907257429896476484304820878553303138599159</span>, <span class="number">768875672280773738301803816415515519067859985949784777815605972358140605222957399855931295900483405997209014872309627261455336173608212560504792804732406159988744626008190591642</span>, <span class="number">213430837881757766520777720690227709564760977311522001626864091515991137423909703305978776728094360822736833235760061066314816749758660033547207607953805341923438394772222356568</span>, <span class="number">82360211831711259567147082155555818156999516949891879514305397375226376936714506922756403002876731807095740268483307937613566131364594612432398098476300712735589147781570183292</span>, <span class="number">17749505352232170648277795567698933594199437689182764405380407013992895289676270195878470798816715217377777574478356564936400974585960088437473753598924064324383361905659789789</span>, <span class="number">3427214394932046144638723931330597473316067571098072662894954825121393877991928319931449114219100671521983554547487355301825989691873309784465316768877146988849237541879345997</span>, <span class="number">1033902507229521469775736346351634090020261583833297661608844489398831364552754846127512235344097362890795464047384509362185144853214501000183283440093026203459311568816825264</span>, <span class="number">224896235915885231383021605802223120291823571580780275950317681857821908865357784480256946962966353978144999197255874549242776446126658379098611152585008158970159741029928166</span>, <span class="number">46029158819241197707530664166476597494824578315547299718547883731820892091315435238631987346971891025923179798692039448953613556744177038196467650472219486883115951311114343</span>, <span class="number">11947866502696456680811378187645438096064991719463034800178755900009558951200835612294081250719346343143340755576335021624771970543003065673188450976052831967872919086392740</span>, <span class="number">2920182352645954475250456149302161189384947754266138653194940049989939156554780361528842542799077656577372777863627070726368904843252451856963117841700429655465449705784298</span>, <span class="number">641622426678020294248348183140299041659157650855760105808225416711044677800278294044700367798760043786235745613510792462327964867426046011657009528106413572140156175050547</span>, <span class="number">139954746021857963632941471710740997948822448809029403690252968784849647633362222415971470082427919553489814062772632095710992183657541577740542585479640231081279442703729</span>, <span class="number">26951287563812328009402867445459718346022404035671471571180747182520664735617063468580188663385794364598479725800534646437082877207222254951262061856164914161401031069085</span>, <span class="number">7533585444288704788707326472044821719148563540561950589462107215132713320228676563974287003223326227564110259498308322080055316439031345783355395296729881160340610419798</span>, <span class="number">2276681583409260736395242645263289467585348662731848036224090877214770286189504748163492790260653720049576572250410962278647838121717162502347694787530301107754917965930</span>, <span class="number">474556448905745036966775435479094252142291985759634322576584740921367165655972599891226896859675668151114091970232772247346351748955558953513984653925641106869750480713</span>, <span class="number">127434337967780172994097939061090682233760718060985516805855544997040535343689397647620215878303719159525314116562161004671399396862283153119456440081266677387394513825</span>, <span class="number">26958440398830097157570752848820597974607321452122682350667898050790790872944229259301257843111978215025542048968699222294492807645241856446964337776714971381969501071</span>, <span class="number">5543555284065922229007474385783130130141655633965977061928013317537397727717406514000700955159647395591026117082092382033235800387850239860460046217510413778741145568</span>, <span class="number">1234762639172810584930296374422356813288496696923257612102992994614585199225028932857122231293467541131628736229833789522239025569090130126077017761481761935075168095</span>, <span class="number">355466248406445302867530536283270751070714127588124044114582631609659246249339560304163152323418724390561360227173698743244037301264764126798143323643968965204937509</span>, <span class="number">72700233281268425015457883799224003903351225804106120865021630177680188790291132871915896124460090399131402188231983457135950533458784941828330878270977967060216148</span>, <span class="number">17316325779212303492370685449752299828026183539683998725619992507954441121758510621171086796417805607101134043617316264832615245565516418608812080799316990851625705</span>, <span class="number">4045793926070659592750134404331599438619282956075192844401269281007613550701517318190039173492631001707043977026685514125253560526115949503328595814800145874763660</span>, <span class="number">711093850172488751248536015688936346283846062295071944527029992467516277719725837096755918337587878576030222851749327532666344838291776707230618144013255672878802</span>, <span class="number">265627118033654696712457079751401631255125309014812639375295118794146799198801006240800873274048170518660448221821727034749291649708953722421725907035286053353872</span>, <span class="number">56397799026942637682063511042055387061218525595156363606895648399263418939712512484112089481484737116602512227228360835774657959685026627558074305176995845647003</span>, <span class="number">14485314789957973511455116454157965523985421493897618644045918045972073878396047755360530791556364199120111093825046698573687446383611922050184839529827282440392</span>, <span class="number">3550955573839595298078922255066479093374448121222507459840552079059417076208499387361330875700156148993662311858100125881757983588374422578671684157194578005699</span>, <span class="number">845394743568277367630651838202283372116209637644259875312243046465466486130071115873693547193074995290146894807692302774606698607144257685615262061054213977420</span>, <span class="number">157730148886711208861332893525227881346167845596707482474187376786153504516831765170538422967044056418676212271368775137847308449974344069982254963969728576186</span>, <span class="number">54972881967813310263623651713923315210166704822071760933248319000133464676004646169143078394020203091841106960137380702725337793156762085219469872257140065395</span>, <span class="number">10729618624425932454603285350456338562675184367958955898413107388221142096410983819404349570576694967179369846493834859543515755779034404675292796271503098978</span>, <span class="number">2442709998183758153870663320358670148543830566673551209180788899834647749860789589565309923762896818608005296106561164431377898506019097822580641263331814899</span>, <span class="number">651590036376284619471743663785818577107718418313829721360265583261583596100827943422638184205536113868285291626431841044058974804223249221103868269005376657</span>, <span class="number">114607798091152645971169174208076386390725220406372401915445980825934238917993417913942451617626679858301802459311641056076814238046173194524157303256038150</span>, <span class="number">39902529162554510030314089494503111747276505091248405060746015077422014506338256115473236342993594864048856417342484086620483648018566663638691082167406896</span>, <span class="number">7696036409658331229292571646244718273466046087174912598857625566056708582171413470987556822776798859431848832604237853020082821687940873973792941059899704</span>, <span class="number">2124793715529138812294972358553948624813291392446651644830711957681124971135340690294893448419315140942986852615187098678211216431027229098600530178187333</span>, <span class="number">658384832743376570742078380839633081933064245096557997421967190397377225701314189557712470669358349072689322858650074777626830988174808516744296032918846</span>, <span class="number">207441722934708037755237631720378642887937120813748348023809687455047615244353892880515039372882445336126456679753369371480841621878413386189854105557570</span>, <span class="number">46120989258570141716198175239164426659655378133453203231982537688000264558364343582463401621127725393877459942514087061448921695021828660135004811441077</span>, <span class="number">8188249463851855339650372248928765967441086033339032675901168172673586603869217763697984051550480433177801759541580074823902608731330486865652085135044</span>, <span class="number">2937142904794524692633847174299189664745670816742834573158221153146769098153095208026269794290966633578370921776670433893125934429015973900770183068397</span>, <span class="number">733124926365921400367689082582974550222406734787055535605162687013854196685186803977001257147200683812867023143593280536908792623212121135546302252718</span>, <span class="number">163278402453599131564496240174531690514528227885644439879148727669198836851619817419582703102053351987308732391369947772790306377652049104175405389057</span>, <span class="number">30247650270830046327693354982611104496891052070130966758534212809812843335592964533296290766840765263207385481421035739473846342013342141171267959427</span>, <span class="number">10078130422940933339521748812234495734268808180137214319132992860890442263439248960992021699437860319479050323778157839338656439168670198619111143719</span>, <span class="number">2468880502161574512996214909253394046701372930781084997897282377444297398943413058653731620475409298189864459900922031063170285510529204509174601472</span>, <span class="number">607074026100427506196023135076433955199278835550407310798426497629249872001552107547116229667872950481628543662982580322754725261269013849906534673</span>, <span class="number">132740473918237042219883376937810235079740145884708583638955667277623190279830437900121550989480157388767941856419463040395910600481643868918183256</span>, <span class="number">31718510456640085593521631697634193356173604238387825664787000835659167411973149050707246808351118400835035866343214347384616969135648635282147931</span>, <span class="number">7013023279079169100512494613396045516189395791014739872279083083144940194186933569894993097804928064121695159201540587912810973411497923430308118</span>, <span class="number">1771185586112090213616219590319917086599723206748079096836927259082387415598439340193771966567407719988569555116938671184047274203791682665544114</span>, <span class="number">397374970256811388188624914624139083024782079917643579178513419907217677561151325006437923068157587425558261984085274694860016959461272906962347</span>, <span class="number">79357052331733760410996870451429462826990142415371259214931967883012213322689987714484368914655142353136743730816759493623445282698964105194007</span>, <span class="number">18024995037150399824560351471574943556440673595591374226442857720036395804619368162299007566488606118476181051500800792556435843369345814420200</span>, <span class="number">3672082813534614033824027501205682677746304198256311647201407880518658491065244877413146229442328563967205873649123895823789401080903874966058</span>, <span class="number">884390448367024106697977520994089114652140177186827650340642302821550463666402143376715117683073225822100147575051185094558637911933790548300</span>, <span class="number">188239732756327819809744123998273956373038631188535307108080455432157193929576323356894115167616675699250266852372722398883063108283627629142</span>, <span class="number">33288603989729116913271536956952173835445978966530730095436444955036538722332958231617041802341417062090911709863572792283326143337721274355</span>, <span class="number">11485733967829072841907653505652765367596185911550254707130569392647462332893031105105058197515848740962693154105512628726167266984356020289</span>, <span class="number">2403399291804759683718697201628718853672014990022411946032431974098338948608647899389041474778909482165700212670301626696886803147288043249</span>, <span class="number">511319889754958068650171413169799880502913743237143323338990019288960892229714861654882544537650773480294037968794797914167989453965720824</span>, <span class="number">108151236227275669723663372909233127249406930188286111418173641508503812685900937356143956513296377001193855340520507635261983173020133040</span>, <span class="number">29238304319413057053313068686030250753447165587962843793828466785518433534702764546822180884428461976687744929459281379124786742084937021</span>, <span class="number">8710806082582848713173281808121766793059207164795295196447513451552342446919958461280536897422363560410120915054864290671091109422830007</span>, <span class="number">2960745852030782790607427333914261375033099283529370879973360161495226124203100530063141357601421786632355173585713266548540973431376582</span>, <span class="number">604226789553326438591187728019722484152820159976600984629527520901554123057786334839341626845330699593003318860611284025243121271706983</span>, <span class="number">182601602703012851376129630760230344746014108213070190831158648995503303041568836468914587260292443510296580408749988987988496769980026</span>, <span class="number">45452114165544367630569931330797239179068892066478030202246828842399491816831847850747717090783448434947452983100492335497009639567888</span>, <span class="number">17121905765418035275547423058447462707899580001255272989656046701474401090015657327101125412277786884745764423250530487272209339058447</span>, <span class="number">3774603297652275052121496733944137560240160153708941233671122697937317529256966828765637412706299259386179629160090242954994907929332</span>, <span class="number">1060720547441758622170146447289706124200025617853186951481807263542360257370083864882158715152433273118314629121456220166038646613297</span>, <span class="number">221968014150998259820244482577203245639303312867709655818056071267607816968641371724863025295597993367786164837699315327363092768373</span>, <span class="number">48882714266352303994499906166362680249387918980441207673706748487810074857456907593421757139320785593117603391693650930762966455968</span>, <span class="number">16202448926627445820838961561455164462246910065772244580677765363543397691542726082412061203163218760307389834156275979660359394394</span>, <span class="number">2956163682419868606126264117158250029934298756926288053091609992334385653684466888852763393290616941805759810929196668548734379973</span>, <span class="number">947743414350088412833104395509485078494688169216314527117041568424743421788079617145817207736081707175649820823460623353469499129</span>, <span class="number">184945524926843220565904193572688427321550948207655453104873607656563645624884025013598624332554709507217938881998831490973926770</span>, <span class="number">56091241819606834802888641120709675472905317085277369060569812131174812302014447128355020686805930142925377568700991226583887786</span>, <span class="number">11342476554725825973899273577573419030806527097049265365675861670559660391106730894000199354064208522140305551746468882526930218</span>, <span class="number">2402177443476249504669747634772796049517512708172380623039160322117732888388776939986309881254003733945369109368480598991083692</span>, <span class="number">779694676467776330674778030069618028430247798034244061629255618166403221248637754838157860401196252119142530084615889227008718</span>, <span class="number">279805151354990313327069866270353558845137298807826578854001581649814949600343606775647790956175906533124785285484676594205727</span>, <span class="number">71475104043185673882357779032282210215441549654529833915666511795774890652222328738683786126978390540777959958334867072773903</span>, <span class="number">17943539235945014339231354558742830502206047263873390682998140665294407299445224663761111928004278268665005924991145357190559</span>, <span class="number">4644026442647371851471373522652996931494883964189143247893482852205071445064380253582641516905658082237627505163407862645664</span>, <span class="number">1409644155578077661014560265925065735043498896729842671302999827395230787557009605337358883198670470099670153973385533319619</span>, <span class="number">323096734145812043063935925026236730750028036642046031570292345040624480525514361785469029998625026693350812690921739556759</span>, <span class="number">66490109788591511799221912380563668027716398810544644123382175383682357229245468554339935745239347569290928368121481198120</span>, <span class="number">12656292548243054261915436732277320096081079272327419007058490559709461117024442299280829706525636594720337557745657188367</span>, <span class="number">3391681366475824837488092758715214360838073187075047614113065989329609613896833473414068502642149439870471691863634629122</span>, <span class="number">1171517421153263625675697419132009454686117107914679030403775353063155717395912120634642665620725468223446139999071277507</span>, <span class="number">283703308943571467555327320427163735194765821724187323544643973406396459830945519805247147967066979142358739388094356677</span>, <span class="number">68051202286065965847502158995164914066216566669074127539650532219749577216638549042842244710379907101440823172129217941</span>, <span class="number">13657391854992511108591836048816405373941724899814769682716923188133130484869138365241075289816576384008939639840185236</span>, <span class="number">2883783693644859186835460708048379333567917588026714123591585397758887606304693027342351097912118721134282551369664243</span>, <span class="number">799049413981621014519709854919842048905323519892313665984919603393072653972864233067257746232644641382453549991205564</span>, <span class="number">167323486728516981799615013230008131717839880066330604897780052101994505570227406902019168715315935265773326851501787</span>, <span class="number">36720821966367632835200966450053402442515187808387796741238632349642200514749124280117021313827183586060369692397742</span>, <span class="number">9231349669963900651759770670625059190403421490616649578654575717995018536450416781815824036250202148465899261409814</span>, <span class="number">1782108859562682583955834770956766771890605266822317978330465547356702234978432274339716401371413673051273821401047</span>, <span class="number">403558799957529775306903388246707975744649346938130151765107472774892029713724284184220469230250620098654222513187</span>, <span class="number">113610170795802770344935864787382347027936273326387062416574602249889635787754346617875788451115772661826280534521</span>, <span class="number">32055073799513070460127524930885397197257512625854036561086683809899754909243064094359316603350553060664792782962</span>, <span class="number">9032924934526196049960770072668776382612241442724751839457302023155061259650364280524549081144893790536494565021</span>, <span class="number">2017862790729520323724155794794272872202696299996991444268875260039652843714149080734888358373743815054699872032</span>, <span class="number">641989462295283575733593919337192523868529607267791351139020713122159499889249625918896534847416953951571198300</span>, <span class="number">128576036185681041874919451733195397084174018792730182604376427967040903314850718633946179141568345684439398601</span>, <span class="number">40372047007036282320578970360805818319565465833073029617047122562052782556856211341854983376957243551410081742</span>, <span class="number">12690329041364261531787667832647179962305068888653710915257119208086200721695307184639464428289081103144163044</span>, <span class="number">3561839882694824398822284966776610177573484210494611237706713481725365094327241161248699081978241602830178596</span>, <span class="number">1199938132534089466501994820759235969832300222872622731608847912038243599132645129289586987692172765041057363</span>, <span class="number">324263436138121201088338125064781061780131145213294921711639118717892670326681104392825089385185080492440484</span>, <span class="number">68312903907509568411987755477707268100466381276451833349595552008166402404491773244111478626617324226539375</span>, <span class="number">17644820024620964580235818915132121042107943132825887368503777072488644953818352369186661300059264368686602</span>, <span class="number">3506176982938427175993147412444392161707218066658168782915638022559988465482121419504891010260766228901318</span>, <span class="number">1066127911891872518349397911557440606663336809214920827134975446907327509548040800613223772158827103310018</span>, <span class="number">226192414853873324160991825316404956087309825251607871786471768482769238181939189651359979648153657144702</span>, <span class="number">45868481610678874924581859998825662511897619432776149300471637861901025934649825592930301843850526560482</span>, <span class="number">13790618957198333318923230203705633437848971510707911225277092048085966476634360389032477412386316672075</span>, <span class="number">2577037700547459915849817513069936580425167358802123937052546118913600453224885074049561249688358836828</span>, <span class="number">907316011507113096967526321014989153923826069305244388586962072152306166058795915708345202709057953005</span>, <span class="number">257655812504204080571300921288974779044004152926402846615682864861219686480771224251979519937398150021</span>, <span class="number">49251062839756470728155099947305937498531111600022908848098152154867828870296984401906907127621922967</span>, <span class="number">18003086576459067165101290934987020831800807030229687007784917512221091664668503037255416369751058381</span>, <span class="number">3931602604129427365537886268681901399659904652265314628365560645602702305389347981284422957262198925</span>, <span class="number">1024271243554288667730540660664163792950639594042380266463713922650987059456833218457318808946966091</span>, <span class="number">264399551848126394660403560510401104363977298239470868728218368941030448200247464958990623172466340</span>, <span class="number">91991457278474569364064153570190123603908094841658212918408559703533962838464377716405517361239718</span>, <span class="number">22400319343956127928389329988299680966797095025488025868862978943959831082472834977311350142227326</span>, <span class="number">4054933925260064992644878588484342847457594792015796931877255389193313381697255433801823807489993</span>, <span class="number">1563931191287550417926830376062569859269361644002382824954373333292013041945346281280805769011292</span>, <span class="number">343600935590550484460351833584964172817805330710096798788745676605896512317351762955463013247649</span>, <span class="number">63176100013413022744650607325631187438860827337150751513958540819158680919377176592820951694123</span>, <span class="number">21461895060447171957232560518498142689748550789857829420960180353599240337920080298104122001920</span>, <span class="number">5835166770039346718590125171268445418773015279002775708686914119655634953623824713817863325421</span>, <span class="number">1583080965885530423876853196443645139416147803583378489670913938148126388391843537295818940207</span>, <span class="number">392027882718889629138666367076395194013822284370187648811904450742968357888850048132707951624</span>, <span class="number">84773060845038628419287336751649666625561226450930810787040749330985148718455599359011719538</span>, <span class="number">20913329354023188439880157138010537207897970146456506518137268768176475768733880753458923347</span>, <span class="number">4311750805563893138689876217833463788577851583828477282279295599052168675043703275872499679</span>, <span class="number">853899685398867377607396879875326827128843982112866203167371936104484725330862023846437598</span>, <span class="number">177330267045126383717093581983187474779454406408201086941455408963372790398670000549267776</span>, <span class="number">53143647775046286515978817675952110384368487980955438888997975610432428251415059859228454</span>, <span class="number">10991259161865360146194812310045803635018376660538575719261554366173833834812335245373835</span>, <span class="number">4056765217542521288464908532309700817396778995632736813131981648221349714370388148127516</span>, <span class="number">804624166261647601714189486709310419472244009530705820922420809512944365943834561839229</span>, <span class="number">221209387838524016717980366851546408106123634464083126244578703480033718962945353384984</span>, <span class="number">44893426704852156297812963470050296993434463573414592728231358819460836492051444088309</span>, <span class="number">15097276880249572944791099185953982641176811310343688646744220558627388586126270884093</span>, <span class="number">3177547688411513827329112344846258118128928380413096551275296685970663730887380521208</span>, <span class="number">707854681966281587817169996379236533896940250761506339446186239585936846532007717960</span>, <span class="number">123430766712269269314015844444108981877839453341743217081639119599583069918979135631</span>, <span class="number">42727196484340883716428235074652898935106385756024360939020725643288512665432787419</span>, <span class="number">9795023686113954751639542218587813833546340682044130681106706094735594753449446343</span>, <span class="number">3333589652095912448402556417544763364674016013042330262047943676041390880358346180</span>, <span class="number">947455010581251264347248926744940190279860580467728251791365397084078291899564124</span>, <span class="number">268670018298046298594544067046438306285322924770238391595093977430279476868065240</span>, <span class="number">78094390422018068485749659108183366278694042747549744891971134188665400412950020</span>, <span class="number">18124918094760916369648633132238959364840331932070152769613739914614309846704031</span>, <span class="number">4241888706533610079212359644998015902376872441583028817350629704555219530448753</span>, <span class="number">1292864973632566395230008219224138571254648896695439011761255646000025705327047</span>, <span class="number">268748278858999280597005392622004242197468731403889200124673378952297248513604</span>, <span class="number">88509143938000904019404561563568039020388387086033088264015176342184836107961</span>, <span class="number">20193371122440969904693011623640235956008535236609083989796068753247319156032</span>, <span class="number">4038600180280215891988824178178278280373636611246918842044528278230564207261</span>, <span class="number">1107150907782944887892399335890628523766269912586346493641592121812091723247</span>, <span class="number">210625186186013434779241292600805721380717453215450496819990522919652412749</span>, <span class="number">52953910211550391007013147620224873533688473472101985821194501496064403298</span>, <span class="number">9097555221706291288743269232756819233000414675958515393645941994120605160</span>, <span class="number">3429649093597174301305755373533641028744892761855146399462989664052400884</span>, <span class="number">741640028601865737636894538300654069448568041784703865806900024636263858</span>, <span class="number">137111267993711698795554790044192357770629382096307382022924712860324239</span>, <span class="number">38616149627736424773611788634842959989120382193171456026729095563767415</span>, <span class="number">9431485520373346422889960992205054090491173749526200420980321805553690</span>, <span class="number">1992952778532071559000019699416705938136688490627773967637839059076015</span>, <span class="number">574194788106589082411518870360486672683587224354718671901248024476268</span>, <span class="number">102609620640057348696515220693089742351613040750651566890644962920462</span>, <span class="number">36268823254475267212915191076327557136209959811616783925907478300982</span>, <span class="number">7567999544690811975942075962292580482677577353162367723788797894980</span>, <span class="number">1874140527739488453786828468118120241481575966337619572680165251377</span>, <span class="number">453914446353792760975691426663914252084437914832347163629988619705</span>, <span class="number">165150650733410175597931630292861667062273243834275274945484646602</span>, <span class="number">34566163119600685975060339689452757045437083897698838710019239494</span>, <span class="number">7694148541008402030841753047537726531717215585386379181283251145</span>, <span class="number">1697576884850411658454847805622249167935227079092758267244556419</span>, <span class="number">472437807783179983228633641986010243354676995634705949446120356</span>, <span class="number">119409918075506001971427759705853133156186846892920587610723175</span>, <span class="number">25613263424766799565203791718547119460962423676387668942984591</span>, <span class="number">7805142960598461841091346841458786166600096726425068620929337</span>, <span class="number">2767230135693902128766236987544547378777436388091785064756910</span>, <span class="number">689644486314086496286093830416975206144754872092432108597436</span>, <span class="number">138642086125227682870831666630271950088954885603515871632201</span>, <span class="number">30047434693445231347602467117028303851832764185641774643468</span>, <span class="number">6851801387424175873694354145711254327404855789285230103013</span>, <span class="number">2120042874205307146695207067554609162977513984517631857617</span>, <span class="number">490320105846897857421254356104910632681008002313418940471</span>, <span class="number">126323731373804665276167034060996983366300068355660603173</span>, <span class="number">21699921539905324453875345006818945922412432384306278913</span>, <span class="number">7939681050823987735942326816454304705408373515598927024</span>, <span class="number">1704054406000164917101338955641076586996654015897777293</span>, <span class="number">674629720702507360892410918497513853241707768110535720</span>, <span class="number">130116804903893330957629746403630277914984408897684191</span>, <span class="number">36586674897705341032938585410676119549859764313014514</span>, <span class="number">6820517853488553816157069373430435510514248629408934</span>, <span class="number">1940615831245060580576779381334292194461763717429719</span>, <span class="number">486407487540373443078130965659847688641455681092783</span>, <span class="number">115503902548715291215146001384729209189201342203617</span>, <span class="number">20726453501406140054607926221786392225949497849620</span>, <span class="number">5795586010156766459954451266198423523738902544440</span>, <span class="number">1894126095992857664160110316211206136427948391401</span>, <span class="number">400235284644456465531456917507977101554184036138</span>, <span class="number">96821039379669584765064498053975819680674844391</span>, <span class="number">23003305579401059533778299981921977893360385917</span>, <span class="number">5228073966664279351555893540080524011514115962</span>, <span class="number">1242198234479925081489833339665036257581784830</span>, <span class="number">412185918978837707936146917867270887000813745</span>, <span class="number">100133634343775138722999743130814482251294603</span>, <span class="number">26059544917887755330857182088221243972088111</span>, <span class="number">5139528748995372887990321340679356174733638</span>, <span class="number">1253542354308041615766358708614160342158058</span>, <span class="number">255695244303425264981809526736239333102982</span>, <span class="number">61808370933695923699986081041674755242751</span>, <span class="number">12426096507290278206573602748929564597975</span>, <span class="number">2986453750810080523307169404271220297061</span>, <span class="number">642144302488057714162005557670195083334</span>, <span class="number">130361391592026886001154254666792730817</span>, <span class="number">38722902212652057786773086799878934378</span>, <span class="number">7692285091800305362911294817569041066</span>, <span class="number">2668441901840977427307689562983863761</span>, <span class="number">627879703191450992712744583653335581</span>, <span class="number">143466848278452388635765854137055267</span>, <span class="number">40114449315047293082657646359855538</span>, <span class="number">9604649217508319090540717981276261</span>, <span class="number">2160954625898663094838587676686854</span>, <span class="number">663518655289550974870054172122371</span>, <span class="number">165231181091826810616798470843406</span>, <span class="number">32017505733146837917121936265672</span>, <span class="number">6710170503572414769550988030906</span>, <span class="number">2193907060628154300461720427652</span>, <span class="number">655138594818423378286082953437</span>, <span class="number">128372286376670762441323321515</span>, <span class="number">34081674525017606572942142473</span>, <span class="number">9410152783640368288366142632</span>, <span class="number">2828735859241558188208098320</span>, <span class="number">551007171562149788272788426</span>, <span class="number">123790351812017402954987183</span>, <span class="number">26171709615346256252881994</span>, <span class="number">5974406115827778237616062</span>, <span class="number">1129305631130982975444977</span>, <span class="number">309305180419035303006618</span>, <span class="number">63076647774929269450546</span>, <span class="number">17802308053095636943505</span>, <span class="number">5708739899619810440888</span>, <span class="number">1717642617243788103954</span>, <span class="number">487452007321104273269</span>, <span class="number">128040514304008259695</span>, <span class="number">22395338754966061650</span>, <span class="number">6980614247696882509</span>, <span class="number">1954726203330249242</span>, <span class="number">521378690601084559</span>, <span class="number">136837526017031961</span>, <span class="number">29173740577404415</span>, <span class="number">7191768065683254</span>, <span class="number">1621292657659019</span>, <span class="number">549037231011822</span>, <span class="number">141224784287699</span>, <span class="number">28266584508619</span>, <span class="number">8568210839573</span>, <span class="number">1730361037440</span>, <span class="number">343914088335</span>, <span class="number">79692432578</span>, <span class="number">29986725790</span>, <span class="number">6384194185</span>, <span class="number">1319027283</span>, <span class="number">483793159</span>, <span class="number">103505140</span>, <span class="number">22103086</span>, <span class="number">7280487</span>, <span class="number">2401760</span>, <span class="number">411716</span>, <span class="number">143073</span>, <span class="number">37097</span>, <span class="number">10436</span>, <span class="number">1884</span>, <span class="number">649</span>, <span class="number">134</span>, <span class="number">40</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line">c= <span class="number">2488656295807929935404316556194747314175977860755594014838879551525915558042003735363919054632036359039039831854134957725034750353847782168033537523854288427613513938991943920607437000388885418821419115067060003426834</span></span><br><span class="line"></span><br><span class="line">flag = find_flag(a,c)</span><br><span class="line"><span class="built_in">print</span>(flag.decode())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7ez_math"><a class="markdownIt-Anchor" href="#7ez_math"></a> 7.ez_math:</h3><p>矩阵运算，<code>det_B=1</code>，最后<code>flag=det_MAT/(point1-point2)</code></p><p>这里用gmpy2的mpz来存储大整数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">point1=<span class="number">85763755029292607594055805804755756282473763031524911851356658672180185707477</span></span><br><span class="line">point2=<span class="number">70470862191594893036733540494554536608294230603070251013536189798304544579643</span></span><br><span class="line">MAT = [</span><br><span class="line">    [mpz(<span class="number">73595299897883318809385485549070133693240974831930302408429664709375267345973630251242462442287906226820558620868020093702204534513147710406187365838820773200509683489479230005270823245</span>),</span><br><span class="line">     mpz(<span class="number">46106113894293637419638880781044700751458754728940339402825975283562443072980134956975133603010158365617690455079648357103963721564427583836974868790823082218575195867647267322046726830</span>),</span><br><span class="line">     mpz(<span class="number">161159443444728507357705839523372181165265338895748546250868368998015829266587881868060439602487400399254839839711192069105943123376622497847079185</span>)],</span><br><span class="line">    [mpz(<span class="number">13874395612510317401724273626815493897470313869776776437748145979913315379889260408106588331541371806148807844847909</span>),</span><br><span class="line">     mpz(<span class="number">17025249852164087827929313934411832021160463738288565876371918871371314930048841650464137478757581505369909723030523</span>),</span><br><span class="line">     mpz(<span class="number">59510107422473463833740668736202898422777415868238817665123293560097821015330</span>)],</span><br><span class="line">    [mpz(<span class="number">11314088133820151155755028207579196628679021106024798818326096960197933616112389017957501267749946871903275867785729</span>),</span><br><span class="line">     mpz(<span class="number">13883500421020573457778249958402264688539607625195400103961001780695107955462968883861677871644577542226749179056659</span>),</span><br><span class="line">     mpz(<span class="number">48528427402189936709203219516777784993195743269405968907408051071264464132448</span>)]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">determinant</span>(<span class="params">matrix</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(matrix) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> matrix[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(matrix) == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> matrix[<span class="number">0</span>][<span class="number">0</span>] * matrix[<span class="number">1</span>][<span class="number">1</span>] - matrix[<span class="number">0</span>][<span class="number">1</span>] * matrix[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        det = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(matrix)):</span><br><span class="line">            sub_matrix = [row[:i] + row[i+<span class="number">1</span>:] <span class="keyword">for</span> row <span class="keyword">in</span> matrix[<span class="number">1</span>:]]</span><br><span class="line">            det += matrix[<span class="number">0</span>][i] * (-<span class="number">1</span>) ** i * determinant(sub_matrix)</span><br><span class="line">        <span class="keyword">return</span> det</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">det_MAT = determinant(MAT)</span><br><span class="line"></span><br><span class="line">flag = det_MAT // (point1-point2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8mid_math"><a class="markdownIt-Anchor" href="#8mid_math"></a> 8.mid_math:</h3><p>与上一题解法相同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">point1=<span class="number">65540596822333029826884315503808996273733737079814345540607878287618419734231</span></span><br><span class="line">point2=<span class="number">45151244176940366132774311848077675849486332018843894072137609985463616792271</span></span><br><span class="line">MAT=[[mpz(<span class="number">9259505595451159514948336330303511539525155092949382077995385373332083424570340733825203563332256599256361679775371565817159463557158551820090084800254999338417057682355404780422980119717238594927467956675771042145306399815569005775907169857728757334979422594358</span>),</span><br><span class="line">  mpz(<span class="number">3700462282298785820527479428312072678870010244861115107206951164684911761755437333209293039456840068340334559453608012512177623936248784897843503284633804083281388001236742261832974291349480314135560368365574114042082002559069958228523318326290833422846224288247</span>),</span><br><span class="line">  mpz(<span class="number">20791012146351643571145217310876690226642338279942557085580439219377325884045305279931904540467264182713135410067252835618936836675270813727053937054168296298149405902638242278868020381541490973458957704137657413376043351193</span>)],</span><br><span class="line"> [mpz(<span class="number">3802535350808074374431476757195874789213113083310705049856269457737583463559458126494122484246497049005001474007088865512110432486291568737501434666990689483191924384489484665070592656641925905986397402822195880143437724155134584374613878027218950975919679551229</span>),</span><br><span class="line"> mpz(<span class="number">1519642544380087919293814751485424198320747098741960781639133554268321708273309194651985562222274023623071346914239982055028526526058064787882720065775210796950963778381575914964024929110539407721461321785325399699126116201001806816030960662346173275101476487421</span>),</span><br><span class="line">  mpz(<span class="number">8538097185709421082644083672229287227818939415260987123718318427750267353075860559170390896769087600458156859498331152566368881938040799840806164389020986990994328370205184734637870147251004626759120887684269603636183629300</span>)],</span><br><span class="line"> [mpz(<span class="number">17987668490992083132878642797176089621188858356259455169173987325310681186627844776077058221612169421636403546746899152917309634315569997105261046388995579843528014810244648968375990949478033964619008761814039733347955609163</span>),</span><br><span class="line">  mpz(<span class="number">7188579142941521685422767412932555782658469950638690886255638896617687421517941457682493542615460990114218059246938237257830976937359020731335958068934235967457123039874441635435388736524907036941379695243043923900290273902</span>),</span><br><span class="line">  mpz(<span class="number">40388963560266769813551191613694768219344365780650048155838802242681775019274045964917142477325170274191702615504062392461666558731638338001971723737440974198823443420018559746335727687</span>)]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">determinant</span>(<span class="params">matrix</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(matrix) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> matrix[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(matrix) == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> matrix[<span class="number">0</span>][<span class="number">0</span>] * matrix[<span class="number">1</span>][<span class="number">1</span>] - matrix[<span class="number">0</span>][<span class="number">1</span>] * matrix[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        det = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(matrix)):</span><br><span class="line">            sub_matrix = [row[:i] + row[i+<span class="number">1</span>:] <span class="keyword">for</span> row <span class="keyword">in</span> matrix[<span class="number">1</span>:]]</span><br><span class="line">            det += matrix[<span class="number">0</span>][i] * (-<span class="number">1</span>) ** i * determinant(sub_matrix)</span><br><span class="line">        <span class="keyword">return</span> det</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">det_MAT = determinant(MAT)</span><br><span class="line"></span><br><span class="line">flag = det_MAT // (point1-point2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="week2-2"><a class="markdownIt-Anchor" href="#week2-2"></a> week2:</h2><h3 id="1two_squares"><a class="markdownIt-Anchor" href="#1two_squares"></a> 1.two_squares:</h3><p>直接利用sage的内置函数<code>two_squres()</code>分解平方数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">42330675787206041757903427737108553993012805007294570657461042152628982126538</span></span><br><span class="line">x = <span class="number">209479773119142584969854470862023704936857416491817498021871883305658177375498</span></span><br><span class="line"></span><br><span class="line">p,q = two_squares(x)</span><br><span class="line">n = p*q</span><br><span class="line">Phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e,Phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h3 id="2铜匠"><a class="markdownIt-Anchor" href="#2铜匠"></a> 2.铜匠:</h3><p>给了<strong>p的高位</strong>和<strong>q的低位</strong>，</p><p>简单变形：</p><p><strong>n = p<sub>low</sub> * q<sub>low</sub> (mod 2<sup>266</sup>)</strong></p><p><strong>p<sub>low</sub> = n * q<sub>low</sub> (mod 2<sup>266</sup>)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Sage</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p_high = <span class="number">14439249591349619691972392177790365247490839237199085979433418493254022567815148979672690178</span></span><br><span class="line">q_low = <span class="number">90063199151369157959005663017593053931871580139169245885113098598755909124764417</span></span><br><span class="line">n = <span class="number">18347545778876678838092757800261556931131930866012101566000425608407193858675622059415995283684230959320874387944052648148677918542763633503231962873204645415818139345588988936580526094727943067102768943117592654029397879665312089518191052154267343886226820785206334238961064175118262578895847281575656290248049404047727756356910896332939145136942219317065063060070725033146788186604738271846183709127655298440696824683099637827282095133642324657860714680107691622056420045091586609974536644773286992447027164350612852922016376888380895187804771279035652496676089183636450028327097084911908336202253562671798012457461</span></span><br><span class="line">ct = <span class="number">15659576879410368237140555530527974801613150473447768911067611094143466009251385693099110691602954207905029692682380253595062935017486879899242785756448973466690818942065250284891341066578689696180061755610538867770441139827574063212967027249650509215685566103350688284041405586915563454117672061141919712416360596137520514412607512596079964611672166435592936417138352662031529414118312166411150736015788925026636845744110093161894267707446937939130745326244186579516665160036229715964182962542836836457885170975474737620430886449029488829662146456489724775166105816909257516908496172172266375617868819982791477888289</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">mod = <span class="number">1</span>&lt;&lt;<span class="number">266</span></span><br><span class="line">pl = n*inverse_mod(q_low,mod) % mod</span><br><span class="line">pbar = (p_high&lt;&lt;<span class="number">721</span>) + pl</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">     f = pbar + (x*mod*<span class="number">4</span>) + (i&lt;&lt;<span class="number">266</span>)</span><br><span class="line">     f = f.monic()</span><br><span class="line">     pp = f.small_roots(X=<span class="number">2</span>^<span class="number">453</span>,beta=<span class="number">0.4</span>)</span><br><span class="line">     <span class="keyword">if</span> pp :<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">p = <span class="built_in">int</span>(pbar + (pp[<span class="number">0</span>]&lt;&lt;<span class="number">268</span>) + (i&lt;&lt;<span class="number">266</span>))</span><br><span class="line">q = n//p</span><br><span class="line">Phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e,Phi)</span><br><span class="line">m = <span class="built_in">pow</span>(ct,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3random_primes"><a class="markdownIt-Anchor" href="#3random_primes"></a> 3.random_primes:</h3><p>题目提示<code>len(flag)==45</code>,</p><p>则<strong>n的大小大概为2<sup>360</sup></strong> , 而其中的<strong>组成n的素因子的大小为2<sup>128</sup></strong>，也就是说<strong>三个素因子的乘积就已经比n大</strong>，</p><p>所以我们只要知道其中组成n的三个因子即可求解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">n = <span class="number">78300669134090137852678272985826748552135227276632141248987049792032006306302216838913764274866303353208450204056303587307590215658369546155011362928706987241738494219541640893624036978156512506828463680671263486243620357332029975262649036988429673099480612452108805474703908926666372276084227948945557265663478215385708377783788570365632616043692339165126905185780780266966306548390661933964569191558132570743049563034138454687784280737515786647554373002062073506433019576711216881997114922882459590300118573321037403610889041169358378723253785685185468195113769538654602557963324567374538144099228383454092513581001676844948371535253876783418313588527754932166605066901072445123419390582818421290114496685300926300428214457517990285819930164112928731952543551128353453115448896272534889430898972420106066951673716649898254901175990616932072274131352817500432771246120044877003878221635833566879303044541045834038388997926347179939044765998585225912825579716411592564742018931576637831147018364052669287568321730785094397048548966924521616592554123755297954204221563101170233500051950508111908253332306439556638016218903032470713009804240601585082087048162066169084662644707376647151608352036058459491394516846894878416951958668053255135013274125427380981145860643060541753558111657169642936860264070256441807766713460296249602643758686033797758071121020245797758472562524923801634553187959279204425077723939301840341779998492203869115635533331664608105795918593153796830400602836307602218542060655621724654663459491663959746624660378618696497713505280314029154654750144247111545203758654611758984447921004347657793617842564871769622784844341157861486787088384957424536581508067582989224734241742351249915951485225249670040001204171856547596397427658888879993013652971335861824416084725435327931256774534973698438003593122194474117269397752225948596514379988893089239094703410940035417268946100231522267605729519374566776171026410423486906556493370843386314649478106704968479881781695360132024826936593194324539644886241562342997299649076507105518992946223028855705189458007533521138703343150937158114114218932400728424949936286443583797118636171187082834662757985896337364138817400612718422265665198024836586611857266616428913152399750688461692677751727389476785588380514444593900569311496880422405988762554852121131345538798688587092154717384294801026132314002251890156123191210398076704434510182202143578810771596233936298462366674592585338029819643973999567268938697218329734244529139548760101393715777276776940762681748317493543343685273831243829694914274003574509516149595004243952747746644961308054952235256037171151695870643020625268635139422461824974663101258586488528601193378268634713686606488503649923013225514905688326248009253372769118830036659383418890729585564557376820890036155588551064419189532686009173215470250197488274429655669070803391973941917017493224972246331391152287082983301776505925295294164201606063028946348118492358755684668733095242911870636074134633575423928967453742150728552560370847186174905012586984090885433727025000206871702482359563400504600567763564582739694873656581728461491373440639163666040518508819641244084238867282549191870081112768586762540287977817548140346798817430775010275964061529114139424317686620296832033309265702409802876815255731607798400127673166880859281784259402995434972992131101158600882460475931695668710417351337637612478180964570698492610372677176847071937542439765750578751925220375723373827393178629810215549480885217514819316424426943459039642952096990941480059597449017550988311939357225101582029418355438775525606571176735588489070335070244453533520858832311313682516805060002632168734723995449881138047136306876918900826798316113276424022400544205104057777588615149030045126315192448561606146254432070045197349283823967140032987449249831755565764939530383006495743</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">1093256121418811691349633884423021356633978134292966489553874542781791238358295335426668415023166027954996625051420577493667824501649432869528057686451750288316816910397382629774298441937547233956753065529097877191699918039115202957337087658469098304374696277563020457331278140075969310150315715843020746656167994646063024677105714238622574336597601173953997036582942407796229805377339006787815702404915271846770376106312644390819144016155830513829761647568620243654068928415623802444953011361211378013499713469372806125474734994287518083907329841838337717556241874324440340626885553763322954232400855565339807071892321582386180978536483407197865884342435897670134641970372091590178581326892854820705050227840462139458418313478056939546089488178689697927788133612008061739961796780717135680690059059843521460548943400440075072549263642778142322553681107266326899389399400224420049958868630481920741293895509509786744023698063926664818702849276103941412666213912301512015982875337927624885673329513416992222855651023180889148449319496283772492522626881480405730489310544315066415406419791190663101607618436762339809465699249346219280236246798494923574248758432354732450859901402315454165220861852940020724189284384978436094976303046718818115920223875761763369205054892082583399430768426962644539683767683622215674622364530161306440520074932775203726898254313918302918158338893115967835907921400822151110065285755016823481526036112086877396184474779772672777884312990976267562132296839364269838737667955289273381304280292531609850947774380025541448760290985029328831136155532030110660328741793152955524993218772392841301083853407843632521944959421101063922926408630857942155173553265649994782728054809833578075255522763473867570242922191690258610960429527917825954799350243215320860648845823888406079144360733120892758516436394283721941074591992068709056978434144249946370176209580261992712491146585486352865467853012283982569783829897373148685163663183813646084064010686825626422454984021416402862127889251773565118407053577546260937996800783904867497317512257427384881412920876851185681901360445996414854617735746124849305097724462381788049919520369827437945533718238301976608693210822883549849346914749712641177399278642094159972818771839223940037362062271618565492364129165948546330822175641999869293182574801410909568799887485687799830413460992606782188190161078789803079204468693865791568886757702397226751678303106993202727687413409748299454409517072068313199302592993167348776456703605936302216362148170559954097296263965296226759555059786981274338884349876203756741105449671416827010661253266421028866463837188482523849379185098341631154586750782372250753953789082447013115491415875557484766163997419331193733180948335725001700381759888109481542481560084404144004112246764995544553798311119720361550478239142333177065617369951724788288789091898104014990085985609531302672876148454755584802296948087896190960286862545509803680907635139069769773489974690789281850253441901658186053827023495071972754442328786102677924620742574365171969462047797683507872502560411636054630326651806741191565960549277521714122075001246821117983391397806797612028499867676071294152880791421912694378781390703123405056446531600817818157671340725736220061182015810279092548335683818151707498767164622121926625237321182816937233802267205025138008023815746402851176062360192537976175702542328058732539514446727425707394730057315691659046002877368113680075447504177622678838170749340265685373340874438362777036176293805138792214226140580946132386530852126980325547324038761178186444019589823730620635017784138099601753640268173837644549341739416563571709247391327046697023194351531203111048984847048754457714313305254115325718812624677601983165234723923006394872649966184045387413721873049174098054565879297120256469204258468893249797880459716409176351490537</span></span><br><span class="line">primes = [<span class="number">255675877315683439181791416047922719357</span>, <span class="number">180461111025833129025002455435975940971</span>, <span class="number">337490274732450824975483083220272824199</span>, <span class="number">304456281514261901091507788207898547903</span>, <span class="number">254797576342247974393400562686432925229</span>, <span class="number">183131976400038388097951032415099792851</span>, <span class="number">187104898097787470482482874168168046723</span>, <span class="number">300625339408843701719323023799725058313</span>, <span class="number">293895810597575199851257228961757849961</span>, <span class="number">197370673648293754589174456296168807801</span>, <span class="number">214231100175566513755789399545798257027</span>, <span class="number">299940533764670809123600295354236009687</span>, <span class="number">329911008919678926860313614132444450849</span>, <span class="number">292789028093982326052555296040896616647</span>, <span class="number">267992025172569093811940290026790452689</span>, <span class="number">192120589915828510906490323831586947847</span>, <span class="number">208470412662206941915861109996165224771</span>, <span class="number">195723355777376859063723356742829282943</span>, <span class="number">195479450259644250739997899829659598467</span>, <span class="number">225273608271867864202603965232709350643</span>, <span class="number">297983612753980801299047698668400172129</span>, <span class="number">289863711883286870918208567358762217117</span>, <span class="number">320181619705477005993614485764800027801</span>, <span class="number">274756647552045078797369358162815740121</span>, <span class="number">208678800821922117897086572764543689257</span>, <span class="number">274510151199776127157320013074195989531</span>, <span class="number">270061041585244138305865647463819178071</span>, <span class="number">231693016600939448457585159254864460211</span>, <span class="number">221276763231716810367704255896280432977</span>, <span class="number">284588387935614601031451184436365997027</span>, <span class="number">190107678698149330362585520776807817237</span>, <span class="number">244360771516251060479861295353775315223</span>, <span class="number">184597108435320085388683362929647254859</span>, <span class="number">214993743235105601056961433866767506839</span>, <span class="number">319622401044815459679561340300419077137</span>, <span class="number">312048738778225034570138647462191322423</span>, <span class="number">192343262692325176379644178905323471293</span>, <span class="number">217411522139037534713431287902356703153</span>, <span class="number">203269104665429435826852242437943175799</span>, <span class="number">197694542080431775212389192687346023837</span>, <span class="number">170754527923440727794804968936874697237</span>, <span class="number">199565850096248778954713726823038799169</span>, <span class="number">329479041983980219266962570620791190271</span>, <span class="number">336543942677902368237166971184411120319</span>, <span class="number">296349049540412710059375861980880864529</span>, <span class="number">276958785496368109105253052397588113011</span>, <span class="number">236061938563845834433725013690718000077</span>, <span class="number">175132351377019405283465079997063887583</span>, <span class="number">210382170435243156571657554946080029177</span>, <span class="number">179295658173078371976938970235081809653</span>, <span class="number">221499702407155816778095037176350210511</span>, <span class="number">273750615951477382944958796366722325273</span>, <span class="number">215400010676152024850087488645214675509</span>, <span class="number">242104770580865606729511928881839588399</span>, <span class="number">237832832377832763447973839385045714547</span>, <span class="number">240569613888482344825828531593242970283</span>, <span class="number">188780850815328211058185207879562258749</span>, <span class="number">236351101956411494065697625496351792553</span>, <span class="number">234848091988225252588700833488573195973</span>, <span class="number">216111241348931999833159262144497816823</span>, <span class="number">248635261568172677022024655836676274851</span>, <span class="number">175169438550312686771927355949990675153</span>, <span class="number">222945249317916941175129207081724296809</span>, <span class="number">272123250140823727659430614318422459467</span>, <span class="number">321040760103571995807993446246308239643</span>, <span class="number">244443756627073674223172405572152750757</span>, <span class="number">231281757931881868821441147678670578293</span>, <span class="number">212608548905981265953338769409211557953</span>, <span class="number">262334849743113291736207517444943890093</span>, <span class="number">221968375825210657749121344978372971509</span>, <span class="number">284590253068157230941830678792449649633</span>, <span class="number">300977729071492709020945132474829506297</span>, <span class="number">305429273614180801706392853095181679257</span>, <span class="number">335939257455017842008237083398243135951</span>, <span class="number">294393337682220551877311202846160164539</span>, <span class="number">300751607582285572452649226924384213987</span>, <span class="number">177342562402002655670186066181715938647</span>, <span class="number">314293624358674993004107306426510931177</span>, <span class="number">192176341797009660053769692734114433539</span>, <span class="number">219685065300219568101641511794459670373</span>, <span class="number">311600604660297404708381142674858758433</span>, <span class="number">189258688382892886748712093669349354607</span>, <span class="number">265765352209342630144326504781080544103</span>, <span class="number">233694355945946803066419059858430846563</span>, <span class="number">223443907562486442160842066195579310831</span>, <span class="number">182987294835928563972108625144731142337</span>, <span class="number">214137187246441738588307243392955884313</span>, <span class="number">251175687278238637206326829923211055529</span>, <span class="number">280606397834257483599650477170805542213</span>, <span class="number">233315167891969517243554909836441514543</span>, <span class="number">189298893622248669462727814260415085983</span>, <span class="number">248568957395290350328195179867090245057</span>, <span class="number">292645643756069284722532228739967572339</span>, <span class="number">179447399460747583275629697319304390429</span>, <span class="number">179645924152591342445122478862459911921</span>, <span class="number">332356391092472452305991116186146584177</span>, <span class="number">245901581082639772431455170863897420347</span>, <span class="number">205817781083003905754490509387056092343</span>, <span class="number">240380627852067724273161876175750141361</span>, <span class="number">268700167965406311300179029348879484383</span>, <span class="number">213345040113356686319409599805587957227</span>, <span class="number">251674200978198716465773971152251242983</span>, <span class="number">179180641720352444750737502831482762429</span>, <span class="number">306320532661676131438858609804319013343</span>, <span class="number">256526510096408769263055362633154848279</span>, <span class="number">205959060854084755092268947433148347151</span>, <span class="number">291927192797043538420569211955680836527</span>, <span class="number">204978877621419749982721876460562600659</span>, <span class="number">332399656527167823296930534887330184167</span>, <span class="number">280595736375324905544725725979456898547</span>, <span class="number">300213915091486506011056425480272542643</span>, <span class="number">318558817334795356700066397524785435681</span>, <span class="number">319436460864579377450478049744976231249</span>, <span class="number">243133148342749788432705330633449318989</span>, <span class="number">322207542584548294558453923911981520623</span>, <span class="number">320850760899167598764295789802781069077</span>, <span class="number">319881693868123342340868542828982909581</span>, <span class="number">206495732343577870213482544631201066371</span>, <span class="number">242791194590408310278390962600348350913</span>, <span class="number">251698935174714138851501858575403291023</span>, <span class="number">336741296937713120832285756167770151171</span>, <span class="number">315930741679982320652758472398428972349</span>, <span class="number">308738538640639393614807292598596283683</span>, <span class="number">242935142876894679332147837418000898919</span>, <span class="number">320412254452324446540182603262368766623</span>, <span class="number">244141238875170898148081089385979949403</span>, <span class="number">213402860730186872545578995830820087021</span>, <span class="number">257839149567099022202819187898373109541</span>, <span class="number">205790643921760418513647126480621419031</span>, <span class="number">198756405484996593521220520853141427989</span>, <span class="number">294805620517257214889752595599972901633</span>, <span class="number">255265348017204260362764409566933677153</span>, <span class="number">274956788729771493245467759809121243433</span>, <span class="number">207307664273912902821847768063880326327</span>, <span class="number">228782470653856387114481087524374601589</span>, <span class="number">327491405235009262853431015300186498577</span>, <span class="number">173419211471119738399569200317219003511</span>, <span class="number">266492438299975532333886393820275910943</span>, <span class="number">276688137488059756944807773426416608851</span>, <span class="number">189140053313243747387509835884240226891</span>, <span class="number">184847492345401269770088588442458737119</span>, <span class="number">333210953053056282315216794932763359439</span>, <span class="number">214889588455292527477541347807824233317</span>, <span class="number">215229626238372443203352172982941095611</span>, <span class="number">321221012891336284787614820604143303369</span>, <span class="number">199400757934809114495211412464158118397</span>, <span class="number">178651685535715756785532928453093603903</span>, <span class="number">220776757717693008935011794749825325367</span>, <span class="number">303675938617156800143972318322678387193</span>, <span class="number">327088681522055240658148530499087069577</span>, <span class="number">335783766579434559780651762543581106409</span>, <span class="number">259404300424171457987268194257725139933</span>, <span class="number">179840475811181163398944717514437142491</span>, <span class="number">297175485665739288479300848974745531391</span>, <span class="number">237485053681467543059304786336620370377</span>, <span class="number">297758270183402970750961370350920892967</span>, <span class="number">287801215974478613717591686806352676563</span>, <span class="number">310730027586487200761300572073383664977</span>, <span class="number">276935537099897424875065059267639595933</span>, <span class="number">251308797428280999427269663339682237319</span>, <span class="number">217181290779624781624389434069663308189</span>, <span class="number">278483889173395237559970658394075421689</span>, <span class="number">204589549925569581630736863023597052269</span>, <span class="number">226032820526239722979885626335569166693</span>, <span class="number">307616487066170583892695494367464641267</span>, <span class="number">222259520009563764167811735543215104543</span>, <span class="number">264617923645991453974534495741056598021</span>, <span class="number">300871024629133281254211035867737539223</span>, <span class="number">170303240421348821459663263562155031807</span>, <span class="number">194456703515031789312329705897177851253</span>, <span class="number">327369717787718586651743316493134914089</span>, <span class="number">313093229847313153837631186419773330871</span>, <span class="number">224824444829441039679277741769033772991</span>, <span class="number">224589292446640473576473771583959436463</span>, <span class="number">214868884335325091682110394113205785173</span>, <span class="number">281852933308534953139887124628766315043</span>, <span class="number">225661596373287038911910532148417025369</span>, <span class="number">197435393688129783450788260536037003399</span>, <span class="number">266167151841181488476394288675916455947</span>, <span class="number">179215005575751890101294918245131012843</span>, <span class="number">181845510055827963079718687867786713537</span>, <span class="number">257637102334933109362889675555405989789</span>, <span class="number">211635849392838491382106919488103885767</span>, <span class="number">186185061420106956824801515596528043351</span>, <span class="number">285418977308105637920637161558618377271</span>, <span class="number">333320927697115374794556799401253359593</span>, <span class="number">188501857269628483380021948001960729951</span>, <span class="number">333805438111531260206119448902819218463</span>, <span class="number">207203219305023873959844954660799240249</span>, <span class="number">243125622633677038874854389025310242579</span>, <span class="number">216464412848635515952075334791481048513</span>, <span class="number">215209416857176076836597526059188595229</span>, <span class="number">214612926530046226231879587951703041239</span>, <span class="number">211839237456343309131155436452991652823</span>, <span class="number">243378322702585683775212046627894119463</span>, <span class="number">300569560524099180847101362636309727649</span>, <span class="number">277442530432004673254582623587364635427</span>, <span class="number">264039335285085705456044566498360689059</span>, <span class="number">336941745040225044220256680095943361963</span>, <span class="number">294351957900120820634469984437616730183</span>, <span class="number">193397784957516885417425615607279607259</span>, <span class="number">172625665034500456784052580259369183617</span>, <span class="number">171214762299612221823796960282578324943</span>, <span class="number">194792374409055048312123241531481499583</span>, <span class="number">214020514849615741103085838425694524869</span>, <span class="number">217152285242353248407824271751534124093</span>, <span class="number">310504460995069986330272047239018516719</span>, <span class="number">257283037178296965441561511618312400677</span>, <span class="number">196379023990504203398232036900292068109</span>, <span class="number">208338219265141175146204974249461481119</span>, <span class="number">180313228114558484028748815066535513471</span>, <span class="number">293814076002148382129879416847624489347</span>, <span class="number">217981245083649644743701945778358819867</span>, <span class="number">198894611219128734462943250308461071371</span>, <span class="number">190754795019022912784187412387261424293</span>, <span class="number">273263914687122798746013275553691541621</span>, <span class="number">319875887014797059887738138214903974573</span>, <span class="number">280433942775269696096083027024527213553</span>, <span class="number">339832090471957335839878188583478605273</span>, <span class="number">245482340001475388718217992653932933781</span>, <span class="number">195945871414379770821529324478394520901</span>, <span class="number">203621853598394319877751491201563422297</span>, <span class="number">285527901432745514886361613743984147931</span>, <span class="number">284721811618834957831167749970526496317</span>, <span class="number">327215978662725442740036051250620691291</span>, <span class="number">221299321558362891869402561537662340987</span>, <span class="number">252585072729486722478056993406814970147</span>, <span class="number">280264567326332248237425051940201458271</span>, <span class="number">241027648066340372998036400876879511133</span>, <span class="number">209093079608768177230455678431608454539</span>, <span class="number">340235244837800791530469709812216931327</span>, <span class="number">318370869089270734010914463566452904391</span>, <span class="number">218007259061353959833958121965586715759</span>, <span class="number">320702628326860753372843359167209806577</span>, <span class="number">280574097974570759348625351607802595079</span>, <span class="number">228292038707075332622237132594473246261</span>, <span class="number">246482905608669854259984848561724759323</span>, <span class="number">281771843261446623855706740146832822043</span>, <span class="number">241444581355719829115072364769273312223</span>, <span class="number">309029268537775236744873599480649785803</span>, <span class="number">293169195958605701684834829075351077843</span>, <span class="number">240056552101889027428780330876207267181</span>, <span class="number">206667506718454166578882634113592471317</span>, <span class="number">295377459264316749259598713099825801289</span>, <span class="number">334341534141831513237527215426279900591</span>, <span class="number">263440016933436744959242384953581131709</span>, <span class="number">327921668846632014434297416582771393151</span>, <span class="number">179743859120339282852666034250891124503</span>, <span class="number">212172965192102954961276830300925726343</span>, <span class="number">325170702322845184523697390427992449689</span>, <span class="number">271105603309076479942153666379400527383</span>, <span class="number">271642757529104184378772507234018239527</span>, <span class="number">244844048330592276234702305193952823371</span>, <span class="number">270007525941420385852467420335121485863</span>, <span class="number">290899364033417721623974853950097454643</span>, <span class="number">279919385326960469749295500025219756669</span>]</span><br><span class="line"></span><br><span class="line">factors = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> primes:</span><br><span class="line">    <span class="keyword">if</span> n%i == <span class="number">0</span>:</span><br><span class="line">        factors.append(i)</span><br><span class="line"><span class="built_in">print</span>(factors)</span><br><span class="line"></span><br><span class="line">n1=<span class="number">255675877315683439181791416047922719357</span></span><br><span class="line">n2=<span class="number">180461111025833129025002455435975940971</span></span><br><span class="line">n3=<span class="number">337490274732450824975483083220272824199</span></span><br><span class="line"></span><br><span class="line">n = n1*n2*n3</span><br><span class="line">Phi = (n1-<span class="number">1</span>)*(n2-<span class="number">1</span>)*(n3-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, Phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4basic"><a class="markdownIt-Anchor" href="#4basic"></a> 4.basic:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">io = remote(<span class="string">&#x27;challenge.basectf.fun&#x27;</span>,<span class="number">47391</span>)</span><br><span class="line"></span><br><span class="line">se = <span class="keyword">lambda</span> data: io.send(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> delim , data : io.sendafter(delim,data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sla = <span class="keyword">lambda</span> delim,data : io.sendlineafter(delim,data)</span><br><span class="line">sea = <span class="keyword">lambda</span> delim,data : io.sendafter(delim,data)</span><br><span class="line">rc = <span class="keyword">lambda</span> numb=<span class="number">4096</span>: io.recv(numb)</span><br><span class="line">rl = <span class="keyword">lambda</span>:io.recvline()</span><br><span class="line">ru = <span class="keyword">lambda</span> delims: io.recvuntil(delims)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">     option = rc().strip()</span><br><span class="line">     <span class="built_in">print</span>(option)</span><br><span class="line">     enc= rc().strip()</span><br><span class="line">     <span class="built_in">print</span>(enc)</span><br><span class="line">     <span class="keyword">if</span> option == <span class="string">b&#x27;A&#x27;</span>:</span><br><span class="line">        secret = base64.b64decode(enc)</span><br><span class="line">     <span class="keyword">if</span> option == <span class="string">b&#x27;B&#x27;</span>:</span><br><span class="line">        secret = <span class="built_in">bytes</span>.fromhex(enc.decode())</span><br><span class="line">     <span class="keyword">if</span> option == <span class="string">b&#x27;C&#x27;</span>:</span><br><span class="line">        secret = long_to_bytes(<span class="built_in">int</span>(enc))</span><br><span class="line">     <span class="keyword">if</span> option == <span class="string">b&#x27;D&#x27;</span>:</span><br><span class="line">        secret = <span class="built_in">eval</span>(enc.decode())</span><br><span class="line">        secret = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> secret)</span><br><span class="line">        secret = secret.encode()</span><br><span class="line">     io.sendline(secret)</span><br><span class="line"></span><br><span class="line">flag = rc().strip()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="5try_to_factor"><a class="markdownIt-Anchor" href="#5try_to_factor"></a> 5.try_to_factor:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">N = <span class="number">162692163428762295773992659007654377270271126313772302197255271375236131917158614424426498628778734679898165422129699410934825650141972454562350664161510689489443251515884304101827584411577749250383438126881931889798597627663578045519256806107514170414321556291545302688028088470848270636776466672843710163017531472049823632822203461654253767303314505996071453898533003519236112138591066133289040889933161978131399309340741554076140734156174295730180874473301361701867633594222054688204666518058106672165786417002466165926062199279674267145233283545524775943767021416906072142236079753359492846480515376121887507681663761713445807717270089017438999615422884163666812016989696908657065537508715229685120221307021151610089917537155165897740417480127289719971512938348936259</span></span><br><span class="line">c = <span class="number">113962118676826667648935023618252851875440854724310328843964819392166304653581141146631375503931008732348730639629174670963727399860571217264854300057305570824097216782800531930906801885967717639795643406206813677461127762087560021634738167845077869308515223303820469892552545806179267969169748886980836435095</span></span><br><span class="line">gift = <span class="number">863514692222931709925579242743251211976114217396765747601042357918763818732391790491059528595917786523674732369068315533549380754409535403506339052401422249684188032949680148055803474336983973622610403448963752802490806614810077181934627694570685722842963961551889267501616799757825675192653489096007790143775773378495299981666657347802233798206597104474595281241837323214457344961462510183726339545608046357281265026013496037522835659867389206279894057481600882665189079672009577651494435000349624334685832217586703242422260870866432379257259316411280539845741932725104662417642890238587876489774492067722351467773093391502588019563488688309892102039611978767690653206664257400163618467825666105966072942726011447079204869750153256054140924951306811971422635104088608275908232688385437145325481792836532453258784103533536292492138405929815964841772656055397705840797739586953744563989819811944946916720655079908564653686456283647030055622241840292127096994325415897266379446446435164189216562921252341705747891518007710533906231225283309180960546212899099652226954393826875</span></span><br><span class="line">fac=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">10</span>):</span><br><span class="line">    tmp=GCD(N, <span class="built_in">pow</span>(i, gift,N)-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> isPrime(tmp) <span class="keyword">and</span> tmp <span class="keyword">not</span> <span class="keyword">in</span> fac:</span><br><span class="line">        fac.append(tmp)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> fac:</span><br><span class="line">            <span class="keyword">if</span> tmp%f==<span class="number">0</span>:</span><br><span class="line">                tmp//=f</span><br><span class="line">            <span class="keyword">if</span> isPrime(tmp) <span class="keyword">and</span> tmp <span class="keyword">not</span> <span class="keyword">in</span> fac:</span><br><span class="line">                fac.append(tmp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">10</span>):</span><br><span class="line">    tmp=GCD(N, <span class="built_in">pow</span>(<span class="number">3</span>, gift*<span class="number">2</span>**i,N)-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> isPrime(tmp) <span class="keyword">and</span> tmp <span class="keyword">not</span> <span class="keyword">in</span> fac:</span><br><span class="line">        fac.append(tmp)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> fac:</span><br><span class="line">            <span class="keyword">if</span> tmp%f==<span class="number">0</span>:</span><br><span class="line">                tmp//=f</span><br><span class="line">            <span class="keyword">if</span> isPrime(tmp) <span class="keyword">and</span> tmp <span class="keyword">not</span> <span class="keyword">in</span> fac:</span><br><span class="line">                fac.append(tmp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> fac:</span><br><span class="line">    <span class="keyword">for</span> q <span class="keyword">in</span> fac:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;BaseCTF&#x27;</span> <span class="keyword">in</span> long_to_bytes(<span class="built_in">pow</span>(c, inverse(<span class="number">65537</span>, (p-<span class="number">1</span>)*(q-<span class="number">1</span>)),p*q)):</span><br><span class="line">            <span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, inverse(<span class="number">65537</span>, (p-<span class="number">1</span>)*(q-<span class="number">1</span>)),p*q)))</span><br></pre></td></tr></table></figure><h3 id="6mid_math2"><a class="markdownIt-Anchor" href="#6mid_math2"></a> 6.mid_math2:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">MAT=[[<span class="number">9194428734244577957135736828947112370812209206819996917633266069359894211949655026549592464237531352518967649750275097282532736237822915630766535634248987628113137246739472264614337707439494149796414126558156060870508338278038269649101921703583149322486905552569052814106532234864028314925118581658029792157851338427975728108000711353532410024128431635933014226306706319591106081211872</span>,</span><br><span class="line">  <span class="number">7052600738698435126221697697810087514520765619736355003187836563546493264420232197860875416948961661231812045406188307561458872254314061097960625042149316957446344556490001927621879295417925720004568332344856366002394724202261454916368122811414228043610804718983599804179657247820737462743875143882925818085495573474169110616761320858675303922740882169073395416895304752909979711051264</span>,</span><br><span class="line">  <span class="number">13094262565727554986668133240216117564284263232131011542877585146452802164148464500319291219458081531317231044962383872061004846788004747813785963603455919882739054992075130196548494850105124430477756818974520035883861936342117869122455996838023977818945511119955390136020375974150407580576040034808588694313922810340598787633148909527275716235390356737099830131958338026891256778602432</span>],</span><br><span class="line"> [<span class="number">7291452286171544741377496447735677778433522048452394999757158120018504601116506253897733192493798837108269469756414516913436198353934250444263790689101779479157541198872731006007031448329354826004420971505929629537584453480285628607579031078497417101681028600589030661495031531644755072500393418929237208836713910921969937998825721580514845395852889662758886414966066733340052235985735</span>,</span><br><span class="line">  <span class="number">5592919719754926663830816961667268104316637431189640788304536404157195458040686322901848820171568258023938724485177544141303597034389473064509506247034833050568643394732003598890104462382321956436508366359718039669456303596542945687737870352569084995858128262046585579724537002100295978230177579835256681774512205534970583421138287684468047290246482431883957170924203400422234299829407</span>,</span><br><span class="line">  <span class="number">10384135162743100269852365857770153822630076412853981379757028821332622753962517667857057209221058533163475030678127399042436975886694593504673386134198042731671320468065688239424934644173240507619471360908786669070898288638067852779718549009532013299792474712979659423962779677856135791013599792822988457540442172903145046394648862567656330868441373023488569784114231877910285319620037</span>],</span><br><span class="line"> [<span class="number">34946383530632295853235791100380055176686898072752599942691162027311662041417740482507624946631032260410440329949488242706004902881977357811370156793240362927747354453547446315050117795844866771053429455608334265986953931753411938119703800489233043034369650346216548318254326462336573090313788936967898128977445514764945671848611612198443909056919</span>,</span><br><span class="line">  <span class="number">26805677375585831510259621878357023272222175103906204143689109861471123435549853025410319713500257027420994041712736040084303902812241806295302385126726161281240831030434347236854521776375408982352155894199700974681768432734155312616453345950508256035721377179651166114898547487082749355033867559583905997404388549346221139007108462958001461826337</span>,</span><br><span class="line">  <span class="number">49768956277664050500387501949373949828589012443212214016088015478826178759698946452495063308332332373728223252613132611904477061717762261927498754849913008747980442098787524359755695519989286304445175440218168145037681791003471134417445542856715034633656861298596197935068562189476201463465706711744838395255326376049859058504891392128431832044455</span>]]</span><br><span class="line">enc = <span class="number">11781599055433308033432930805524658061560499523533841161297213162869735414528038973998414585008473948613388691447093</span></span><br><span class="line">e = <span class="number">160907</span></span><br><span class="line"></span><br><span class="line">u13=MAT[<span class="number">0</span>][<span class="number">2</span>]//MAT[<span class="number">2</span>][<span class="number">2</span>]</span><br><span class="line">u23=MAT[<span class="number">1</span>][<span class="number">2</span>]//MAT[<span class="number">2</span>][<span class="number">2</span>]</span><br><span class="line">u12=((MAT[<span class="number">0</span>][<span class="number">0</span>]*u23-MAT[<span class="number">1</span>][<span class="number">0</span>]*u13)//(MAT[<span class="number">1</span>][<span class="number">0</span>]-MAT[<span class="number">2</span>][<span class="number">0</span>]*u23)+u13)//u23</span><br><span class="line"></span><br><span class="line">MAT=matrix(MAT)</span><br><span class="line">MAT=matrix(ZZ,[[<span class="number">1</span>,u12,u13],[<span class="number">0</span>,<span class="number">1</span>,u23],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]]).inverse()*MAT</span><br><span class="line">a,b,c=<span class="built_in">list</span>(MAT[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(enc, inverse(e, (a-<span class="number">1</span>)*(b-<span class="number">1</span>)*(c-<span class="number">1</span>)),a*b*c)))</span><br></pre></td></tr></table></figure><h2 id="week3"><a class="markdownIt-Anchor" href="#week3"></a> week3:</h2><h3 id="1没有n啊"><a class="markdownIt-Anchor" href="#1没有n啊"></a> 1.没有n啊：</h3><p>yafu分解c，得到质因数，然后得到phi_c，然后解出n,<code>注意此处由于先是计算c = pow(m,e,n), 然后是 x = pow(n,e,c),所以c是比n小的，此处 n = n+c</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="number">52453423663797600504896811946820841317615798875871627840172711423749946998217916744135290476795328543876098295227017753117609268701786914053599060330837226980969490439739651088710549890669593587642238827462108900683237797139569260570711611781514337884756698142193277516649805710242748531658979160170193283558</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = <span class="number">54297831548863701092644190086258072883163378307246681513317422545902442650340916001357605211715836911877651782099787873046987096258918495734824011752504203578982947618784736181975847356304742402103468329660346526185908618978851982007496096394151821403282347897417590596861323293706611997134962231129075032641</span></span><br><span class="line">x = <span class="number">40635864473997460751766935373772107585133301579524000836637683731949939348171187931595274511243052505604832873086269554842194695737052043633079044688826020656068356561856848814530947955429343483847291398607359454851926470168457852479044154798114087493843073091985855839008222762224952503563764527380033064437</span></span><br><span class="line"></span><br><span class="line">c_list = [</span><br><span class="line">    <span class="number">2</span>,<span class="number">3</span>,<span class="number">73</span>,<span class="number">3967</span>,<span class="number">6373</span>,<span class="number">4744823012787277141</span>,<span class="number">95592293</span>,<span class="number">216465863</span>,<span class="number">48245998253859255581546561942142167304434549996919484957120717763726325509833409296170471619434291990255044694414983821250538266717293535917534918221352198192885071310932646412147737114561229291373456448363184353049796801297876664512630305475226391199481032049429</span></span><br><span class="line">]</span><br><span class="line">phi_c=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c_list:</span><br><span class="line">    phi_c*=i-<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(phi_c)</span><br><span class="line">d_c = gmpy2.invert(e,phi_c)</span><br><span class="line">n =<span class="built_in">pow</span>(x,d_c,c)+c</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h3 id="2exgcd"><a class="markdownIt-Anchor" href="#2exgcd"></a> 2.exgcd：</h3><p>共模攻击，e1e2不互素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n = <span class="number">27855350163093443890983002241607629119744539643165776358993469078731521668677421483556132628708836721737685936980427467856642738196111748018522018598646125626995613169001111504706363742194664774823604738939411512861441742683157275818500991834651769368178320088982759626122029956515159435424882855075032400667120376075618896752694718491438251810609878021717559466498493103257912108879328270813061231904227056671621363669388496383136964549879459562004569059185078204867346250733489663015417879915436157806942021693920206071715538430633494012923651469196048546309592946901609803631751035364478773126967010589504275776307</span></span><br><span class="line">e1 = <span class="number">3747</span></span><br><span class="line">e2 = <span class="number">2991</span></span><br><span class="line">c1 = <span class="number">24426579024062518665031958216110619832653602343205488454298659533869220501923184793828421371206493659949730138867555889074137026401207985428160803910695088081370233571905915349589146504374710444468715701305061060934519410886010929009297226496448218819742287990364436349188987723637449590579092391100714056589967894609950537021838172987840638735592599678186555961654312442380755963257875487240962193060914793587712733601168204859917001269928487633954556221987632934190217367502677285906521385169669644977192556145782303526375491484736352799180747403161343130663661867413380222714012960607473395828938694285120527085083</span></span><br><span class="line">c2 = <span class="number">6932145147126610816836065944280934160173362059462927112752295077225965836502881335565881607385328990881865436690904056577675885697508058289570333933837515526915707121125766720407153139160751343352211421901876051228566093038929625042619250168565502734932197817082848506826847112949495527533238122893297049985517280574646627011986403578166952789317461581409161873814203023736604394085875778774834314777046086921852377348590998381648241629124408514875110073073851913857329679268519229436092660959841766848676678740851087184214283196544821779336090434587905158006710112461778939184327386306992082433561460542130441825293</span></span><br><span class="line"></span><br><span class="line">gcd, s, r = gmpy2.gcdext(e1, e2)</span><br><span class="line"><span class="keyword">if</span> s &lt; <span class="number">0</span>:</span><br><span class="line">    s = -s</span><br><span class="line">    c1 = gmpy2.invert(c1, n)</span><br><span class="line"><span class="keyword">if</span> r &lt; <span class="number">0</span>:</span><br><span class="line">    r = -r</span><br><span class="line">    c2 = gmpy2.invert(c2, n)</span><br><span class="line">m = <span class="built_in">pow</span>(c1, s, n) * <span class="built_in">pow</span>(c2, r, n) % n</span><br><span class="line">m = gmpy2.iroot(m,gcd)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3wiener"><a class="markdownIt-Anchor" href="#3wiener"></a> 3.wiener? :</h3><p><code>leak = decimal.Decimal((3 * P * Q-1)/(3 * Q * Q))</code></p><p>直接对leak进行连分数展开即可得到<code>P/Q</code>,则分子为P,分母为Q</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">11032748573623426359632659657114807044712138586316710250985606809252700461490504487308849626514319062562557448839550994242999334882617031487618174168038491566640081840111747765753878087564318833273878755416584962921669911444225959335274753391800995531023212276838665202257007640354237043291129197348884914956663597240094662207929658519596987351984403258345205873566463643624175318315064440456858013874962784792564480286904620663695194689839431808082976248378509181327101557380978849545906691903896662095520288964101796965095129861467059775556110616007889846240936219381379219605528051627402300580239311202137582442057</span></span><br><span class="line">leak = <span class="number">0.829374344780877053838760251345359097311540811993463349625630085472892814959843248358036249898871908548743719153319438638517170060651237635838827482534816419091949205584951292517303330452910012749674475329235689229498752425379611083979518257734473992186831474208400813283887045691145481237726578827559198828469462343342343287720369159899636816373592067698883361360269728719786071024354151682314608072902347335691012713629816579496252896260869382806838857194293618332286500427694077400072428506897829689703872985954772105672992293334668485358785863779749153981721900135318166811250762946069962348114491411585418993494561587403918162681937152503739843</span></span><br><span class="line"></span><br><span class="line">cf = continued_fraction(leak)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(cf)):</span><br><span class="line">    q = cf.denominator(i)</span><br><span class="line">    p = cf.numerator(i)</span><br><span class="line">    <span class="keyword">if</span> isPrime(p) <span class="keyword">and</span> isPrime(q):</span><br><span class="line">        <span class="built_in">print</span>(p,q)</span><br><span class="line">        n = p*q</span><br><span class="line">        phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">        d = gmpy2.invert(e, phi)</span><br><span class="line">        m =<span class="built_in">pow</span>(c,<span class="built_in">int</span>(d),n)</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4没有n啊-_pro"><a class="markdownIt-Anchor" href="#4没有n啊-_pro"></a> 4.没有n啊 _pro:</h3><h3 id="5ez_log"><a class="markdownIt-Anchor" href="#5ez_log"></a> 5.ez_log:</h3><p>用sage里内置的log可以解 <strong>z = y<sup>x</sup> mod n</strong> 中的x，然后AES解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long <span class="keyword">as</span> b2l, long_to_bytes <span class="keyword">as</span> l2b, getPrime</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">pad = <span class="keyword">lambda</span> x: x+<span class="string">b&#x27;\x00&#x27;</span>*(<span class="number">16</span>-<span class="built_in">len</span>(x)%<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">KEY,ENC</span>):</span><br><span class="line">    cipher = AES.new(KEY, AES.MODE_ECB)</span><br><span class="line">    decrypted = cipher.decrypt(ENC)</span><br><span class="line">    <span class="keyword">return</span> decrypted</span><br><span class="line"></span><br><span class="line">enc = <span class="number">33416570913716503492297352041317858420349510954381249751537743898024527101872454706181188441210166165803904185550746</span></span><br><span class="line">y = <span class="number">82941012</span></span><br><span class="line">n = <span class="number">228338567</span></span><br><span class="line">z = <span class="number">51306718</span></span><br><span class="line"></span><br><span class="line">F = GF(n)</span><br><span class="line">x = discrete_log(F(z),F(y))</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">x = <span class="number">38806815</span></span><br><span class="line">key = l2b(Integer(x))</span><br><span class="line">          </span><br><span class="line">enc_bytes = l2b(enc)</span><br><span class="line">flag = decrypt(pad(key),enc_bytes)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="week4"><a class="markdownIt-Anchor" href="#week4"></a> week4:</h2><h3 id="3rabin"><a class="markdownIt-Anchor" href="#3rabin"></a> 3.rabin:</h3><p>e=4，如果是一般的rabin算法的话e要求为2，此处只要在最后求解出的m处开个平方根即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">import gmpy2</span><br><span class="line"></span><br><span class="line">p= 8531212975719216550108614256955774722172741885676113601617182716356239301381951899737237219659253655889636684200345109462928796329670321336864298557778843</span><br><span class="line">q= 7443256287912111739335729314443559886458007838130371799255078565502662459436043455787869631999073617967343884377537828940738213460508765519478956421282871</span><br><span class="line">n= 63500004625039456439237191267891267558404574431112995926594213383621331385226487443753506088788203040258384788149958095020759745138424276657604371402824844725005596890673468964961037168078105356669148960568974603581485045691990626520286184874115519591663033533771400334558853058140717812903874350138362098253</span><br><span class="line">c= 51452608438757130697131508192775727191605112918772187364577097224326062184288501602000700342623122861398852536963355962672293705131887315354242193416090384360837672258861475017098419459125395949090523474744886423754439919504732741712693909507972791203801494594878447921609420574365853676576693694677914169353</span><br><span class="line">e= 4</span><br><span class="line"></span><br><span class="line">def rabin_decrypt(c, p, q, e=2):</span><br><span class="line">    n = p*q</span><br><span class="line">    mp = pow(c, (p+1)//4, p)</span><br><span class="line">    mq = pow(c, (q+1)//4, q)</span><br><span class="line">    yp = gmpy2.invert(p, q)</span><br><span class="line">    yq = gmpy2.invert(q, p)</span><br><span class="line">    r = (yp*p*mq + yq*q*mp) % n</span><br><span class="line">    rr = n-r</span><br><span class="line">    s = (yp*p*mq - yq*q*mp) % n</span><br><span class="line">    ss = n-s</span><br><span class="line">    return (r,rr,s,ss)</span><br><span class="line"></span><br><span class="line">m = rabin_decrypt(c, p, q)</span><br><span class="line"></span><br><span class="line">for i in range(4):</span><br><span class="line">    try:</span><br><span class="line">        print(bytes.fromhex(hex(gmpy2.iroot(m[i],2)[0])[2:]))</span><br><span class="line">    except:</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure><h1 id="buuctf-2023"><a class="markdownIt-Anchor" href="#buuctf-2023"></a> buuctf-2023:</h1><h2 id="week1-3"><a class="markdownIt-Anchor" href="#week1-3"></a> week1:</h2><h3 id="1caesars-secert"><a class="markdownIt-Anchor" href="#1caesars-secert"></a> 1.Caesar’s Secert：</h3><p>凯撒加密，偏移为5</p><p>flag{ca3s4r’s_c1pher_i5_v4ry_3azy}</p><h3 id="2fence"><a class="markdownIt-Anchor" href="#2fence"></a> 2.Fence:</h3><p>栅栏加密，栏数为2</p><p>flag{reordering_the_plaintext#686f8c03}</p><h3 id="3brainfuck"><a class="markdownIt-Anchor" href="#3brainfuck"></a> 3.brainfuck:</h3><p>brainfuck加密</p><p>flag{Oiiaioooooiai#b7c0b1866fe58e12}</p><h3 id="4vigenère"><a class="markdownIt-Anchor" href="#4vigenère"></a> 4.Vigenère：</h3><p>维吉尼亚加密，密钥为kfc</p><p>flag{la_c1fr4_del_5ign0r_giovan_batt1st4_b3ll5s0}</p><h3 id="5babyencoding"><a class="markdownIt-Anchor" href="#5babyencoding"></a> 5.babyencoding：</h3><p>第一段为base64加密，结果为flag{dazzling_encoding#4e0ad4</p><p>第二段为base32加密，结果为f0ca08d1e1d0f10c0c7afe422fea7</p><p>第三段为UUencode加密，结果为c55192c992036ef623372601ff3a}</p><h3 id="6babyxor"><a class="markdownIt-Anchor" href="#6babyxor"></a> 6.babyxor:</h3><p>单步异或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> xor</span><br><span class="line"></span><br><span class="line">string=<span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;e9e3eee8f4f7bffdd0bebad0fcf6e2e2bcfbfdf6d0eee1ebd0eabbf5f6aeaeaeaeaeaef2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;flag&#x27;</span> <span class="keyword">in</span> xor(<span class="built_in">bytes</span>([i]), string):</span><br><span class="line">        <span class="built_in">print</span>(xor(<span class="built_in">bytes</span>([i]), string))</span><br></pre></td></tr></table></figure><h3 id="7babyrsa"><a class="markdownIt-Anchor" href="#7babyrsa"></a> 7.babyrsa:</h3><p>提供了n,c,e，且n的位数不大，可以直接利用sage的factor()分解，用euler_phi()计算得到Phi</p><p><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240811153403433.png" alt="image-20240811153403433" / loading="lazy"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">17290066070594979571009663381214201320459569851358502368651245514213538229969915658064992558167323586895088933922835353804055772638980251328261</span></span><br><span class="line">c = <span class="number">14322038433761655404678393568158537849783589481463521075694802654611048898878605144663750410655734675423328256213114422929994037240752995363595</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">Phi = <span class="number">17290065983330319066216184030777067976382697670733255200004943703459332462321021486252411405242719735544959857825124088104221030960082400051200</span></span><br><span class="line">d = invert(e, Phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8affine"><a class="markdownIt-Anchor" href="#8affine"></a> 8.Affine:</h3><h4 id="仿射加密affine-cipher"><a class="markdownIt-Anchor" href="#仿射加密affine-cipher"></a> <strong><code>仿射加密Affine cipher:</code></strong></h4><p><strong>加密函数</strong>：<code>e(x) = ax+b  (mod m)</code></p><p><strong>解密函数</strong>：<code>d(x) = a^-1 *(x-b)  (mod m)</code></p><p><strong>求乘法逆元的公式子</strong>：<code>a*a^(-1) (mod m) = 1</code></p><p>​</p><p><strong>字母含义及加密条件：</strong></p><ol><li>a和m<a href="https://baike.baidu.com/item/%E4%BA%92%E8%B4%A8">互质</a></li><li>m为字母数，即m = 26</li><li>b为移动大小</li><li>a^(-1) 是<a href="https://baike.baidu.com/item/%E4%B9%98%E6%B3%95%E9%80%86%E5%85%83">乘法逆元</a></li><li>mod是求余的意思</li></ol><p><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240811192528561.png" alt="image-20240811192528561" / loading="lazy"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">f = <span class="string">b&#x27;flag&#x27;</span></span><br><span class="line">aa = -<span class="number">1</span></span><br><span class="line">bb = -<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">if</span>(a*f[<span class="number">0</span>]+b)%<span class="number">256</span> == <span class="number">0xdd</span> <span class="keyword">and</span> (a*f[<span class="number">1</span>]+b)%<span class="number">256</span> == <span class="number">0x43</span> <span class="keyword">and</span> (a*f[<span class="number">2</span>]+b)%<span class="number">256</span> == <span class="number">0x88</span> <span class="keyword">and</span> (a*f[<span class="number">3</span>]+b)%<span class="number">256</span> == <span class="number">0xee</span>:</span><br><span class="line">            aa = a</span><br><span class="line">            bb = b</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">data = <span class="string">b&#x27;dd4388ee428bdddd5865cc66aa5887ffcca966109c66edcca920667a88312064&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(data),<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(((<span class="built_in">int</span>(data[i:i+<span class="number">2</span>],<span class="number">16</span>)-bb)*invert(aa,<span class="number">256</span>))%<span class="number">256</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​</p><h3 id="9small-d"><a class="markdownIt-Anchor" href="#9small-d"></a> 9.Small d:</h3><p>e过大，d很小，可以通过算法快速得到d的值</p><p><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240811192440508.png" alt="image-20240811192440508" / loading="lazy"></p><p>​</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> RSAwienerHacker <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="number">6755916696778185952300108824880341673727005249517850628424982499865744864158808968764135637141068930913626093598728925195859592078242679206690525678584698906782028671968557701271591419982370839581872779561897896707128815668722609285484978303216863236997021197576337940204757331749701872808443246927772977500576853559531421931943600185923610329322219591977644573509755483679059951426686170296018798771243136530651597181988040668586240449099412301454312937065604961224359235038190145852108473520413909014198600434679037524165523422401364208450631557380207996597981309168360160658308982745545442756884931141501387954248</span></span><br><span class="line">e = <span class="number">8614531087131806536072176126608505396485998912193090420094510792595101158240453985055053653848556325011409922394711124558383619830290017950912353027270400567568622816245822324422993074690183971093882640779808546479195604743230137113293752897968332220989640710311998150108315298333817030634179487075421403617790823560886688860928133117536724977888683732478708628314857313700596522339509581915323452695136877802816003353853220986492007970183551041303875958750496892867954477510966708935358534322867404860267180294538231734184176727805289746004999969923736528783436876728104351783351879340959568183101515294393048651825</span></span><br><span class="line">n = <span class="number">19873634983456087520110552277450497529248494581902299327237268030756398057752510103012336452522030173329321726779935832106030157682672262548076895370443461558851584951681093787821035488952691034250115440441807557595256984719995983158595843451037546929918777883675020571945533922321514120075488490479009468943286990002735169371404973284096869826357659027627815888558391520276866122370551115223282637855894202170474955274129276356625364663165723431215981184996513023372433862053624792195361271141451880123090158644095287045862204954829998614717677163841391272754122687961264723993880239407106030370047794145123292991433</span></span><br><span class="line"></span><br><span class="line">d=hack_RSA(e,n)</span><br><span class="line">flag=long_to_bytes(<span class="built_in">pow</span>(c,d,n))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="10babyaes"><a class="markdownIt-Anchor" href="#10babyaes"></a> 10.babyaes:</h3><p>解密 flag 我们需要获取到 key 和 iv 的值，由条件：</p><p><code>key=os.urandom(16)*2 </code></p><p><code>iv=os.urandom(16) </code></p><p>可知：key是32bytes,256bits ；iv是16bytes ,128bits</p><p>key^iv ，那么<strong>只有 iv 与 key 的低128位相异或</strong>，所以 <strong>key 的⾼128位是固定不变的</strong>。</p><p>所以 xor  的⾼128bits,就是 key 的⾼128bits,进⽽可以得到 key 的所有值256bits。</p><p>之后 <strong>key 的低128bits，与 xor 的低128bits 相异或</strong>，所得结果就是 <code>iv</code> 的值了</p><p>得到 key , iv 后就可以直接⽤aes.decrypt()来解密了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    xor = <span class="number">3657491768215750635844958060963805125333761387746954618540958489914964573229</span> ^ <span class="number">1</span></span><br><span class="line">    out = long_to_bytes(xor)</span><br><span class="line">    key = out[:<span class="number">16</span>]*<span class="number">2</span></span><br><span class="line">    iv = bytes_to_long(key[<span class="number">16</span>:]) ^ bytes_to_long(out[<span class="number">16</span>:])</span><br><span class="line">    iv = long_to_bytes(iv)</span><br><span class="line">    ciphertext = <span class="string">b&#x27;&gt;]\xc1\xe5\x82/\x02\x7ft\xf1B\x8d\n\xc1\x95i&#x27;</span></span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    flag = cipher.decrypt(ciphertext)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="week2-3"><a class="markdownIt-Anchor" href="#week2-3"></a> week2:</h2><h3 id="1不止一个pi"><a class="markdownIt-Anchor" href="#1不止一个pi"></a> 1.不止一个pi:</h3><p>根据简化剩余系与欧拉函数的性质：</p><p>​设a=p<sub>1</sub><sup>a1</sup>p<sub>2</sub><sup>a2</sup>……p<sub>k</sub><sup>ak</sup>，则</p><p>​φ(a) = a(1-1/p<sub>1</sub>)(1-1/p<sub>2</sub>)……(1-1/p<sub>k</sub>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">q =  <span class="number">115478867870347527660680329271012852043845868401928361076102779938370270670897498759391844282137149013845956612257534640259997979275610235395706473965973203544920469416283181677660262509481282536465796731401967694683575843183509430017972506752901270887444490905891490955975762524187534052478173966117471143713</span></span><br><span class="line">p =  <span class="number">171790960371317244087615913047696670778115765201883835525456016207966048658582417842936925149582378305610304505530997833147251832289276125084339614808085356814202236463900384335878760177630501950384919794386619363394169016560485152083893183420911295712446925318391793822371390439655160077212739260871923935217</span></span><br><span class="line">c =  <span class="number">4459183928324369762397671605317600157512712503694330767938490496225669985050002776253470841193156951087663107866714426230222002399666306287642591077990897883174134404896800482234781531592939043551832049756571987010173667074168282355520711905659013076509353523088583347373358980842707686611157050425584598825151399870268083867269912139634929397957514376826145870752116583185351576051776627208882377413433140577461314504762388617595282085102271510792305560608934353515552201553674287954987323321512852114353266359364282603487098916608302944694600227628787791876600901537888110093703612414836676571562487005330299996908873589228072982641114844761980143047920770114535924959765518365614709272297666231481655857243004072049094078525569460293381479558148506346966064906164209362147313371962567040047084516510135054571080612077333228195608109065475260832580192321853906138811139036658485688320161530131239854003996457871663456850196483520239675981391047452381998620386899101820782421605287708727667663038905378115235163773867508258208867367314108701855709002634592329976912239956212490788262396106230191754680813790425433763427315230330459349320412354189010684525105318610102936715203529222491642807382215023468936755584632849348996666528981269240867612068382243822300418856599418223875522408986596925018975565057696218423036459144392625166761522424721268971676010427096379610266649911939139451989246194525553533699831110568146220347603627745407449761792135898110139743498767543521297525802809254842518002190381508964357001211353997061417710783337</span></span><br><span class="line">e =  <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">n=p**<span class="number">3</span>*q**<span class="number">2</span></span><br><span class="line">Phi = p**<span class="number">2</span>*(p-<span class="number">1</span>)*q*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, Phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h3 id="2rotate-xor"><a class="markdownIt-Anchor" href="#2rotate-xor"></a> 2.Rotate Xor:</h3><p><strong><code>round_rotate_left</code></strong>：实现了将 <code>num</code> 的最高 <code>step</code> 位移动到最低 <code>step</code> 位的位置，同时保持其他位不变。</p><p>根据加密手搓解密脚本即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> xor</span><br><span class="line"></span><br><span class="line">ROUND = <span class="number">12</span></span><br><span class="line">k2 = <span class="number">9982833494309156947</span></span><br><span class="line">ciphertext = <span class="string">b&#x27;\x8dSyy\xd2\xce\xe2\xd2\x98\x0fth\x9a\xc6\x8e\xbc\xde`zl\xc0\x85\xe0\xe4\xdfQlc&#x27;</span></span><br><span class="line">enc_k1 = <span class="number">7318833940520128665</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">round_rotate_right</span>(<span class="params">num,step</span>):</span><br><span class="line">    <span class="keyword">return</span> (num &gt;&gt; step) | (num &lt;&lt; (<span class="number">64</span> - step)) &amp; <span class="number">0xffffffffffffffff</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_key</span>(<span class="params">key</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(ROUND):</span><br><span class="line">        key = round_rotate_right(key ^ k2, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line">k1 = decrypt_key(enc_k1)</span><br><span class="line">flag = xor(ciphertext,long_to_bytes(k1))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="3滴啤"><a class="markdownIt-Anchor" href="#3滴啤"></a> 3.滴啤:</h3><p>给了 <code>p*q=n</code>，<code>d mod (p-1)=dp</code>，<code>pow(m,e,p*q)=c</code></p><p><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240807203058349.png" alt="image-20240807203058349" / loading="lazy"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> xor</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"></span><br><span class="line">n = <span class="number">93172788492926438327710592564562854206438712390394636149385608321800134934361353794206624031396988124455847768883785503795521389178814791213054124361007887496351504099772757164211666778414800698976335767027868761735533195880182982358937211282541379697714874313863354097646233575265223978310932841461535936931</span></span><br><span class="line">c = <span class="number">52777705692327501332528487168340175436832109866218597778822262268417075157567880409483079452903528883040715097136293765188858187142103081639134055997552543213589467751037524482578093572244313928030341356359989531451789166815462417484822009937089058352982739611755717666799278271494933382716633553199739292089</span></span><br><span class="line">dp = <span class="number">307467153394842898333761625034462907680907310539113349710634557900919735848784017007186630645110812431448648273172817619775466967145608769260573615221635</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_q</span>(<span class="params">e, n,dp</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):</span><br><span class="line">        <span class="keyword">if</span>(e*dp%x==<span class="number">1</span>):</span><br><span class="line">            p=(e*dp-<span class="number">1</span>)//x+<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span>(n%p!=<span class="number">0</span>):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            q=n//p</span><br><span class="line">    <span class="keyword">return</span> q</span><br><span class="line"></span><br><span class="line">q = get_q(e, n, dp)</span><br><span class="line">p = n//q</span><br><span class="line">Phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e, Phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h3 id="4halfcandecode"><a class="markdownIt-Anchor" href="#4halfcandecode"></a> 4.halfcandecode:</h3><p>p,q很接近，可以用yafu分解，也可以<code>q=next_prime(gmpy2.iroot(n)[0]);p=n//q</code>得到，进而得到前半部分的flag</p><p>后半则进行<code>md5爆破</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> xor</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> printable</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = <span class="number">10631151190024160908870967192522097752991652918777416177941351782447314225123009693276679810786266997133099934443701772661928189884235742113123409596993841</span></span><br><span class="line">q = <span class="number">10631151190024160908870967192522097752991652918777416177941351782447314225123009693276679810786266997133099934443701772661928189884235742113123409596993409</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">113021375625152132650190712599981988437204747209058903684387817901743950240396649608148052382567758817980625681440722581705541952712770770893410244646286485083142929097056891857721084849003860977390188797648441292666187101736281034814846427200984062294497391471725496839508139522313741138689378936638290593969</span></span><br><span class="line">c1 = <span class="number">43054766235531111372528859352567995977948625157340673795619075138183683929001986100833866227688081563803862977936680822407924897357491201356413493645515962458854570731176193055259779564051991277092941379392700065150286936607784073707448630150405898083000157174927733260198355690620639487049523345380364948649</span></span><br><span class="line"></span><br><span class="line">md5_hash = [</span><br><span class="line">    <span class="string">&#x27;4a8a08f09d37b73795649038408b5f33&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;03c7c0ace395d80182db07ae2c30f034&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;e1671797c52e15f763380b45e841ec32&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b14a7b8059d9c055954c92674ce60032&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;e358efa489f58062f10dd7316b65649e&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cfcd208495d565ef66e7dff9f98764da&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b14a7b8059d9c055954c92674ce60032&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;8fa14cdd754f91cc6554c9e71929cce7&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;0cc175b9c0f1b6a831c399e269772661&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;4a8a08f09d37b73795649038408b5f33&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;e358efa489f58062f10dd7316b65649e&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cfcd208495d565ef66e7dff9f98764da&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;4b43b0aee35624cd95b910189b3dc231&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cbb184dd8e05c9709e5dcaedaa0495cf&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">d=inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m=<span class="built_in">pow</span>(c1,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line">mm=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> h <span class="keyword">in</span> md5_hash:</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> printable:</span><br><span class="line">        <span class="keyword">if</span> md5(p.encode()).hexdigest()==h:</span><br><span class="line">            mm+=p</span><br><span class="line"><span class="built_in">print</span>(mm)</span><br></pre></td></tr></table></figure><h3 id="5partial-decrypt"><a class="markdownIt-Anchor" href="#5partial-decrypt"></a> 5.partial decrypt：</h3><p><code>m = c^d mod n</code></p><p><strong>中国剩余定理可写成：</strong></p><p><code>m1 = c^d mod p</code></p><p><code>m2 = c^d mod q</code></p><p><strong>这时候n的位数降低了，但d的位数依旧很大</strong></p><p><strong>利用欧拉函数：</strong></p><p><code>c^d mod p = c^(d mod phi(p)) mod p = c^(d mod (p-1)) mod p</code></p><p><strong>同理：</strong></p><p><code>c^d mod q = c^(d mod phi(q)) mod q = c^(d mod (q-1)) mod q</code></p><p><strong>令</strong>  <code>dp = d mod (p-1) = e^(-1) mod (p-1)</code></p><p><strong>同理</strong>   <code>dq = d mod (q-1) = e^(-1) mod (q-1)</code></p><p><code>m1 = c^dp mod p</code></p><p><code>m2 = c^dq mod q</code></p><p><strong>最后RSA的求解过程为：</strong></p><p><code>qlnv = q^(-1) mod p</code></p><p><code>h = qlnv * (m1-m2) mod p</code></p><p><code>m = m2 + h * q</code></p><p><strong>最后的求解过程可以写成：</strong></p><p><code>S = CRT(m1,m2) = m2+((m1-m2)*(q^(-1) mod p))*q</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> xor</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> printable</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">q = <span class="number">7325294399829061614283539157853382831627804571792179477843187097003503398904074108324900986946175657737035770512213530293277111992799331251231223710406931</span></span><br><span class="line">h = <span class="number">4180720137090447835816240697100630525624574275</span></span><br><span class="line">m2 = <span class="number">4816725107096625408335954912986735584642230604517017890897348901815741632668751378729851753037917164989698483856004115922538576470127778342121497852554884</span></span><br><span class="line"></span><br><span class="line">m = m2+h*q</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="week3-2"><a class="markdownIt-Anchor" href="#week3-2"></a> week3:</h2><h3 id="1rabins-rsa"><a class="markdownIt-Anchor" href="#1rabins-rsa"></a> 1.Rabin’s RSA:</h3><p><code>e=2</code>，且结合题目，是**<code>Rabin加密</code>**</p><p>先yafu分解出p,q</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> xor</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> printable</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = <span class="number">14450452739004884887</span></span><br><span class="line">q = <span class="number">13934102561950901579</span></span><br><span class="line">n = <span class="number">201354090531918389422241515534761536573</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">2</span></span><br><span class="line">c = <span class="number">20442989381348880630046435751193745753</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rabin_decrypt</span>(<span class="params">c, p, q, e=<span class="number">2</span></span>):</span><br><span class="line">    n = p*q</span><br><span class="line">    mp = <span class="built_in">pow</span>(c, (p+<span class="number">1</span>)//<span class="number">4</span>, p)</span><br><span class="line">    mq = <span class="built_in">pow</span>(c, (q+<span class="number">1</span>)//<span class="number">4</span>, q)</span><br><span class="line">    yp = gmpy2.invert(p, q)</span><br><span class="line">    yq = gmpy2.invert(q, p)</span><br><span class="line">    r = (yp*p*mq + yq*q*mp) % n</span><br><span class="line">    rr = n-r</span><br><span class="line">    s = (yp*p*mq - yq*q*mp) % n</span><br><span class="line">    ss = n-s</span><br><span class="line">    <span class="keyword">return</span> (r,rr,s,ss)</span><br><span class="line"></span><br><span class="line">m = rabin_decrypt(c, p, q)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m[i])[<span class="number">2</span>:]))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>或者利用轩禹CTF-RSA工具中自带的rabin算法：</p><p><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240813105140497.png" alt="image-20240813105140497" / loading="lazy"></p><h3 id="2babyrandom"><a class="markdownIt-Anchor" href="#2babyrandom"></a> 2.babyrandom：</h3><p><code>LCG伪随机数的参数恢复</code></p><p>附件中可见：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">GetRandom</span>():</span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    nx = (a*x + b) % p</span><br><span class="line">    <span class="built_in">print</span>(nx)</span><br><span class="line">    x = nx</span><br></pre></td></tr></table></figure><p>利用<code>线性同余</code>得到随机数</p><p><img src="C:%5CUsers%5CALICE%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240813153356546.png" alt="image-20240813153356546" / loading="lazy"></p><p>有结论</p><p><strong>a = (X<sub>n</sub>+2 - X<sub>n+1</sub>)(X<sub>n+1</sub> - X<sub>n</sub>)<sup>-1</sup>   (mod m)</strong></p><p><strong>b = X<sub>n+1</sub> - aX<sub>n</sub>   (mod m)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p = <span class="number">64999433139797068147576269731948390094958654326970231465808792590598519729077</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">28410</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">x = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    x.append(<span class="built_in">int</span>(r.recvline().strip().decode()))</span><br><span class="line"></span><br><span class="line">a = (x[<span class="number">2</span>]-x[<span class="number">1</span>])*inverse(x[<span class="number">1</span>]-x[<span class="number">0</span>],p)%p</span><br><span class="line"></span><br><span class="line">b = (x[<span class="number">1</span>]-a*x[<span class="number">0</span>])%p</span><br><span class="line"></span><br><span class="line">flag = ((x[<span class="number">0</span>]-b)*inverse(a,p)) % p</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag))</span><br></pre></td></tr></table></figure><h3 id="3knapsack"><a class="markdownIt-Anchor" href="#3knapsack"></a> 3.knapsack:</h3><h3 id="4小明的密码题"><a class="markdownIt-Anchor" href="#4小明的密码题"></a> 4.小明的密码题:</h3><h4 id="coppersmith攻击已知m的高位攻击"><a class="markdownIt-Anchor" href="#coppersmith攻击已知m的高位攻击"></a> Coppersmith攻击（已知m的高位攻击）</h4><p>​<code>C = m^e mod N</code></p><p>并且我们假设我们知道m的很大一部分m<sub>0</sub>，即 <code>m = m0+x</code>，但是我们不知道x。</p><p>e足够小，且部分明文泄露时，可以采用Coppersmith单变量等式的攻击：</p><p>​<code>c = m^e mod n = (mbar + x0)^e mod n</code></p><p>其中 <code>mbar  = (m&gt;&gt;kbits) &lt;&lt;kbits</code></p><p>当|x<sub>0</sub>|&lt;=N<sup>1/e</sup>时，可以在log N和e的多项式时间内求出x<sub>0</sub></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Sage</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">131889193322687215946601811511407251196213571687093913054335139712633125177496800529685285401802802683116451016274353008428347997732857844896393358010946452397522017632024075459908859131965234835870443110233375074265933004741459359128684375786221535003839961829770182916778717973782408036072622166388614214899</span></span><br><span class="line">c = <span class="number">11188201757361363141578235564807411583085091933389381887827791551369738717117549969067660372214366275040055647621817803877495473068767571465521881010707873686036336475554105314475193676388608812872218943728455841652208711802376453034141883236142677345880594246879967378770573385522326039206400578260353074379</span></span><br><span class="line">e = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">part = bytes_to_long(<span class="string">b&#x27;sm4ll_r00ts_is_brilliant#&#x27;</span>)</span><br><span class="line">x = PolynomialRing(Zmod(n),<span class="string">&#x27;x&#x27;</span>).gen()</span><br><span class="line">f = ((part&lt;&lt;<span class="number">64</span>)+x)**e - c</span><br><span class="line">xx = f.small_roots(X = <span class="number">2</span>**<span class="number">64</span>)[<span class="number">0</span>]</span><br><span class="line">flag = (part&lt;&lt;<span class="number">64</span>) + xx</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(flag)))</span><br></pre></td></tr></table></figure><h3 id="5door"><a class="markdownIt-Anchor" href="#5door"></a> 5.Door:</h3><h3 id="6eazy_crt"><a class="markdownIt-Anchor" href="#6eazy_crt"></a> 6.eazy_crt:</h3><p><code>RSA-CRT fault attack</code>:</p><p><img src="https://a1ic3-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240814152051848.png" alt="image-20240814152051848" / loading="lazy"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m=<span class="number">2180240512138982889935733758776025289492848542072999905411903898302427496814336475436552230920326681809745778470583226987</span></span><br><span class="line">n=<span class="number">25505131259827344749407187081729819350996141100990518281765117676936124636084125400315049858697199427401342785804654120926568235761577895862889807660442415521870277729420875825744007886870384790308986342360349597392841568418588521694478184632631896474390291958350681472768485356865513284619086754437723630874827593280089682939629265210875169009057935264259019861755270570945614034505771690412042781423771110441028258110022746603974882162934979726300741541857444013708508946471384525030286343828680432038605288717842755346907256658746733811881247992925881684393431852248253701825024590345480994598867741811599162649467</span></span><br><span class="line">S_=<span class="number">5510086561842250138908875342533294108331951659612671466695801343686972919443402163401521040457640602756777910081639191753436122171756174730531385913865951826869995984787102439679170684422717808771260217541439878677750508065703064081375473845405916674327932798153100574555933448570618732842365795738120491532398081467312017203933413296779070611024124965772787502242499016884537233028947865288037718074352448773759363242111080540630360902388540661831992776707600133253329779003707938065020121645530719140954554800986771763343191398210100325971573069812381693089384221441735278736889673500218274673196333806222266248844379127652366</span></span><br><span class="line">S=<span class="number">11422623501509574650959962952004985925543723972567988534433510888436662069119800576321679344425052011563473005275801787271861671898318523033415642388512047035650991047953319601346912194462122313366888126100093635969476696871403883687946617575837061694813669883782221006701704487938500886952347003631626326127154081787016692856628561200386941683756397734100698520464199249811238013146899352390453500132666840606585760306723894654933077094375810666168464835756607377998959675132305971721109661644231613426322675350973373434138686086023265910883509514575554429502214217460059521619625693750938117427832654792355808803321</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">p = GCD(<span class="built_in">pow</span>(S_,e,n)-m,n)</span><br><span class="line">q = n//p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag&#123;&#x27;</span>+md5(<span class="built_in">str</span>(q).encode()).hexdigest()+<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="dasctf2024八月开学季"><a class="markdownIt-Anchor" href="#dasctf2024八月开学季"></a> DASCTF2024八月开学季！</h1><h2 id="1ezsquares"><a class="markdownIt-Anchor" href="#1ezsquares"></a> 1.EZsquares:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">n0 = <span class="number">192573744538639130845868727014075967669513667763315934161849620531683536696376138303320681922782003088094539724238109116416456294472461075668568088688287209898850985024632463251984323888765249950269595045648435192047990940593817086918399212487934262786817996341234806934640246045717955941049031252181676005098</span></span><br><span class="line">c = <span class="number">1541487946178344665369701061600511101386703525091161664845860490319891364778119340877432325104511886045675705355836238082338561882984242433897307540689460550149990099278522355182552369360471907683216881430656993369902193583200864277424101240184767762679012998894182000556316811264544736356326198994294262682</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">p,q = two_squares(n0)</span><br><span class="line">Phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = invert(e,Phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h1 id="su2023"><a class="markdownIt-Anchor" href="#su2023"></a> SU2023:</h1><h2 id="1sign1n"><a class="markdownIt-Anchor" href="#1sign1n"></a> 1.sign1n:</h2><p>题目给了WHATF等式，等式两边同乘e3即可求出kphi，尝试用kphi和n分解n；其次在gift函数中容易得到r=2，若r不为2则输出结果必为合数。然后就是已知kphi，分解n</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factorize_multi_prime</span>(<span class="params">N, phi</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Recovers the prime factors from a modulus if Euler&#x27;s totient is known.</span></span><br><span class="line"><span class="string">    This method works for a modulus consisting of any number of primes, but is considerably be slower than factorize.</span></span><br><span class="line"><span class="string">    More information: Hinek M. J., Low M. K., Teske E., &quot;On Some Attacks on Multi-prime RSA&quot; (Section 3)</span></span><br><span class="line"><span class="string">    :param N: the modulus</span></span><br><span class="line"><span class="string">    :param phi: Euler&#x27;s totient, the order of the multiplicative group modulo N</span></span><br><span class="line"><span class="string">    :return: a tuple containing the prime factors</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    prime_factors = <span class="built_in">set</span>()</span><br><span class="line">    factors = [N]</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(factors) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># Element to factorize.</span></span><br><span class="line">        N = factors[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        w = randrange(<span class="number">2</span>, N - <span class="number">1</span>)</span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> phi % (<span class="number">2</span> ** i) == <span class="number">0</span>:</span><br><span class="line">            sqrt_1 = <span class="built_in">pow</span>(w, phi // (<span class="number">2</span> ** i), N)</span><br><span class="line">            <span class="keyword">if</span> sqrt_1 &gt; <span class="number">1</span> <span class="keyword">and</span> sqrt_1 != N - <span class="number">1</span>:</span><br><span class="line">                <span class="comment"># We can remove the element to factorize now, because we have a factorization.</span></span><br><span class="line">                factors = factors[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">                p = GCD(N, sqrt_1 + <span class="number">1</span>)</span><br><span class="line">                q = N // p</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> isPrime(p):</span><br><span class="line">                    prime_factors.add(p)</span><br><span class="line">                <span class="keyword">elif</span> p &gt; <span class="number">1</span>:</span><br><span class="line">                    factors.append(p)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> isPrime(q):</span><br><span class="line">                    prime_factors.add(q)</span><br><span class="line">                <span class="keyword">elif</span> q &gt; <span class="number">1</span>:</span><br><span class="line">                    factors.append(q)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Continue in the outer loop</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">tuple</span>(prime_factors)</span><br><span class="line"></span><br><span class="line">n = <span class="number">17501785470905115084530641937586010443633001681612179692218171935474388105810758340844015368385708349722992595891293984847291588862799310921139505076364559140770828784719022502905431468825797666445114531707625227170492272392144861677408547696040355055483067831733807927267488677560035243230884564063878855983123740667214237638766779250729115967995715398679183680360515620300448887396447013941026492557540060990171678742387611013736894406804530109193638867704765955683067309269778890269186100476308998155078252336943147988308936856121869803970807195714727873626949774272831321358988667427984601788595656519292763705699</span></span><br><span class="line">WHATF= <span class="number">7550872408895903340469549867088737779221735042983487867888690747510707575208917229455135563614675077641314504029666714424242441219246566431788414277587183624484845351111624500646035107614221756706581150918776828118482092241867365644233950852801286481603893259029733993572417125002284605243126366683373762688802313288572798197775563793405251353957529601737375987762230223965539018597115373258092875512799931693493522478726661976059512568029782074142871019609980899851702029278565972205831732184397965899892253392769838212803823816067145737697311648549879049613081017925387808738647333178075446683195899683981412014732</span></span><br><span class="line">sign = <span class="number">12029865785359077271888851642408932941748698222400692402967271078485911077035193062225857653592806498565936667868784327397659271889359852555292426797695393591842279629975530499882434299824406229989496470187187565025826834367095435441393901750671657454855301104151016192695436071059013094114929109806658331209302942624722867961155156665675500638029626815869590842939369327466155186891537025880396861428410389552502395963071259114101340089657190695306100646728391832337848064478382298002033457224425654731106858054291015385823564302151351406917158392454536296555530524352049490745470215338669859669599380477470525863815</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">kphi = e**<span class="number">3</span>*WHATF - <span class="number">3</span>*e**<span class="number">3</span> - <span class="number">1</span></span><br><span class="line">p,q = factorize_multi_prime(n,kphi)</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(sign,e,n)</span><br><span class="line">flag = (m*<span class="built_in">int</span>(invert(<span class="built_in">int</span>(<span class="built_in">pow</span>(<span class="number">2</span>,e**<span class="number">2</span>+d**<span class="number">2</span>,n)),n)))%n</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag))</span><br></pre></td></tr></table></figure><h1 id="2024长城杯复现"><a class="markdownIt-Anchor" href="#2024长城杯复现"></a> 2024长城杯(复现)：</h1><h2 id="1randomrsa"><a class="markdownIt-Anchor" href="#1randomrsa"></a> 1.RandomRSA：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> mpz, isqrt, powmod, invert, is_prime,jacobi</span><br><span class="line"><span class="keyword">import</span> concurrent.futures</span><br><span class="line"><span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"></span><br><span class="line">p, a, b = <span class="number">170302223332374952785269454020752010235000449292324018706323228421794605831609342383813680059406887437726391567716617403068082252456126724116360291722050578106527815908837796377811535800753042840119867579793401648981916062128752925574017615120362457848369672169913701701169754804744410516724429370808383640129</span>, <span class="number">95647398016998994323232737206171888899957187357027939982909965407086383339418183844601496450055752805846840966207033179756334909869395071918100649183599056695688702272113280126999439574017728476367307673524762493771576155949866442317616306832252931038932232342396406623324967479959770751756551238647385191314</span>, <span class="number">122891504335833588148026640678812283515533067572514249355105863367413556242876686249628488512479399795117688641973272470884323873621143234628351006002398994272892177228185516130875243250912554684234982558913267007466946601210297176541861279902930860851219732696973412096603548467720104727887907369470758901838</span></span><br><span class="line">n, c = <span class="number">5593134172275186875590245131682192688778392004699750710462210806902340747682378400226605648011816039948262008066066650657006955703136928662067931212033472838067050429624395919771757949640517085036958623280188133965150285410609475158882527926240531113060812228408346482328419754802280082212250908375099979058307437751229421708615341486221424596128137575042934928922615832987202762651904056934292682021963290271144473446994958975487980146329697970484311863524622696562094720833240915154181032649358743041246023013296745195478603299127094103448698060367648192905729866897074234681844252549934531893172709301411995941527</span>, <span class="number">2185680728108057860427602387168654320024588536620246138642042133525937248576850574716324994222027251548743663286125769988360677327713281974075574656905916643746842819251899233266706138267250441832133068661277187507427787343897863339824140927640373352305007520681800240743854093190786046280731148485148774188448658663250731076739737801267702682463265663725900621375689684459894544169879873344003810307496162858318574830487480360419897453892053456993436452783099460908947258094434884954726862549670168954554640433833484822078996925040310316609425805351183165668893199137911145057639657709936762866208635582348932189646</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模数 p 和多项式的系数 a, b, 以及 n</span></span><br><span class="line">p = mpz(p)  <span class="comment"># LCG 中的模数</span></span><br><span class="line">a = mpz(a)  <span class="comment"># LCG 的乘数</span></span><br><span class="line">b = mpz(b)  <span class="comment"># LCG 的增量</span></span><br><span class="line">n = mpz(n)  <span class="comment"># RSA 模数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求解方程中的 x</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_quadratic_mod</span>(<span class="params">a, b, c, p</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;求解模数 p 下的二次方程 a*x^2 + b*x + c ≡ 0 (mod p)&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 计算判别式 Δ = b^2 - 4ac (mod p)</span></span><br><span class="line">    discriminant = (b * b - <span class="number">4</span> * a * c) % p</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断判别式是否有解</span></span><br><span class="line">    <span class="keyword">if</span> jacobi(discriminant, p) != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 没有平方根，二次方程无解</span></span><br><span class="line"></span><br><span class="line">    sqrt_discriminant = sympy.nthroot_mod(discriminant, <span class="number">2</span>, p)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算 2a 的逆元</span></span><br><span class="line">    inv_2a = invert(<span class="number">2</span> * a, p)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 求解方程 x = (-b ± sqrt(Δ)) / 2a (mod p)</span></span><br><span class="line">    x1 = ((-b + sqrt_discriminant) * inv_2a) % p</span><br><span class="line">    x2 = ((-b - sqrt_discriminant) * inv_2a) % p</span><br><span class="line">    <span class="keyword">return</span> x1, x2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 并行处理多个 c1 值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_c1_range</span>(<span class="params">c1_start, c1_end</span>):</span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> c1 <span class="keyword">in</span> <span class="built_in">range</span>(c1_start, c1_end):</span><br><span class="line">        <span class="keyword">for</span> c2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">            <span class="comment"># 构建模数下的二次方程</span></span><br><span class="line">            b_prime = (b + c2 + a * c1) % p</span><br><span class="line">            c_prime = (c1 * (b + c2) - n) % p</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 求解二次方程</span></span><br><span class="line">            res = solve_quadratic_mod(a, b_prime, c_prime, p)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 检查解是否存在</span></span><br><span class="line">            <span class="keyword">if</span> res:</span><br><span class="line">                x1, x2 = res</span><br><span class="line">                p1_x1 = (x1 + c1) % p</span><br><span class="line">                p2_x1 = (a * x1 + b + c2) % p</span><br><span class="line">                p1_x2 = (x2 + c1) % p</span><br><span class="line">                p2_x2 = (a * x2 + b + c2) % p</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 检查是否为素数并且满足 p1_x1 * p2_x1 == n</span></span><br><span class="line">                <span class="keyword">if</span> is_prime(p1_x1) <span class="keyword">and</span> is_prime(p2_x1) <span class="keyword">and</span> p1_x1 * p2_x1 == n:</span><br><span class="line">                    results.append((c1, c2, x1))</span><br><span class="line">                <span class="keyword">if</span> is_prime(p1_x2) <span class="keyword">and</span> is_prime(p2_x2) <span class="keyword">and</span> p1_x2 * p2_x2 == n:</span><br><span class="line">                    results.append((c1, c2, x2))</span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多进程执行主函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    results = []</span><br><span class="line"></span><br><span class="line">    num_cpus = os.cpu_count()  <span class="comment"># 获取可用CPU核数</span></span><br><span class="line">    chunk_size = <span class="number">10</span>  <span class="comment"># 每个任务处理10个c1</span></span><br><span class="line">    total_c1 = <span class="number">1000</span>  <span class="comment"># c1的总范围</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> concurrent.futures.ProcessPoolExecutor(max_workers=num_cpus) <span class="keyword">as</span> executor:</span><br><span class="line">        futures = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将c1范围分块提交给进程池</span></span><br><span class="line">        <span class="keyword">for</span> c1_start <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, total_c1, chunk_size):</span><br><span class="line">            c1_end = <span class="built_in">min</span>(c1_start + chunk_size, total_c1)</span><br><span class="line">            futures.append(executor.submit(process_c1_range, c1_start, c1_end))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 收集结果</span></span><br><span class="line">        <span class="keyword">for</span> future <span class="keyword">in</span> tqdm.tqdm(concurrent.futures.as_completed(futures)):</span><br><span class="line">            result = future.result()</span><br><span class="line">            <span class="keyword">if</span> result:</span><br><span class="line">                results.extend(result)</span><br><span class="line">                <span class="keyword">break</span>  <span class="comment"># 找到结果后提前退出</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出找到的结果</span></span><br><span class="line">    <span class="keyword">if</span> results:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;找到的结果: &quot;</span>, results)</span><br><span class="line">        c1, c2, x = results[<span class="number">0</span>]</span><br><span class="line">        pp = x + c1</span><br><span class="line">        qq = (a * x + b + c2) % p</span><br><span class="line">        <span class="built_in">print</span>((x + c1) * (a * x + b + c2) % p == n % p)</span><br><span class="line">        <span class="built_in">print</span>(is_prime(pp), is_prime(qq), pp * qq == n)</span><br><span class="line">        d = invert(<span class="number">65537</span>, (pp - <span class="number">1</span>) * (qq - <span class="number">1</span>))</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, d, pp * qq)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有找到符合条件的 c1 和 c2&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行主函数</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="crypto" scheme="https://alic3-myth.github.io/categories/crypto/"/>
    
    
    <category term="crypto" scheme="https://alic3-myth.github.io/tags/crypto/"/>
    
  </entry>
  
</feed>
